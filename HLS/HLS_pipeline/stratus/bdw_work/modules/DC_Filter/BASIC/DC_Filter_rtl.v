// Generated by stratus_hls 19.12-s100  (91710.131054)
// Wed May  5 02:43:45 2021
// from ../DC_Filter.cpp

`timescale 1ps / 1ps

      
module DC_Filter(i_clk, i_rst, i_rgb_busy, i_rgb_vld, i_rgb_data, o_result_busy, o_result_vld, o_result_data, i_rgb_inside_busy, i_rgb_inside_vld, i_rgb_inside_data, o_rgb_inside_busy, o_rgb_inside_vld, o_rgb_inside_data);

      input i_clk;
      input i_rst;
      input i_rgb_vld;
      input [23:0] i_rgb_data;
      input o_result_busy;
      input i_rgb_inside_vld;
      input [23:0] i_rgb_inside_data;
      input o_rgb_inside_busy;
      output i_rgb_busy;
      output o_result_vld;
      output [23:0] o_result_data;
      reg [23:0] o_result_data;
      output i_rgb_inside_busy;
      output o_rgb_inside_vld;
      output [23:0] o_rgb_inside_data;
      reg [23:0] o_rgb_inside_data;
      reg o_rgb_inside_m_req_m_prev_trig_req;
      reg o_rgb_inside_m_unacked_req;
      wire DC_Filter_Xor_1Ux1U_1U_1_4_out1;
      wire DC_Filter_Or_1Ux1U_1U_4_5_out1;
      reg DC_Filter_N_Muxb_1_2_4_4_82_out1;
      reg i_rgb_inside_m_unvalidated_req;
      wire DC_Filter_gen_busy_r_4_156_gnew_req_i0;
      wire DC_Filter_gen_busy_r_4_156_gdiv_i1;
      wire DC_Filter_gen_busy_r_4_156_gen_busy_0_i_rgb_m_data_is_invalid_next;
      reg o_result_m_req_m_prev_trig_req;
      reg o_result_m_unacked_req;
      wire DC_Filter_Xor_1Ux1U_1U_1_1_out1;
      wire DC_Filter_Or_1Ux1U_1U_4_2_out1;
      reg DC_Filter_N_Muxb_1_2_4_4_7_out1;
      reg i_rgb_m_unvalidated_req;
      wire DC_Filter_gen_busy_r_4_155_gnew_req_i0;
      wire DC_Filter_gen_busy_r_4_155_gdiv_i1;
      wire DC_Filter_gen_busy_r_4_155_gen_busy_0_i_rgb_m_data_is_invalid_next;
      reg[4:0] global_state1_next;
      wire[11:0] DC_Filter_Add_12Ux12U_12U_4_72_out1;
      wire[11:0] DC_Filter_Mul_8Ux4U_12U_4_71_out1;
      wire DC_Filter_Equal_2Ux1U_1U_4_70_out1;
      reg[11:0] DC_Filter_N_Mux_12_3_2_4_68_out1;
      wire DC_Filter_OrReduction_2U_1U_4_67_out1;
      wire[3:0] DC_Filter_Add_4Ux2U_4U_4_64_out1;
      reg[1:0] DC_Filter_Add_8Ux2U_9U_4_62_in1;
      reg[1:0] gs_ctrl45;
      reg[7:0] DC_Filter_Add_8Ux2U_9U_4_62_in2;
      reg[1:0] gs_ctrl44;
      wire[3:0] DC_Filter_Mul_2Ux2U_4U_4_61_out1;
      reg[1:0] DC_Filter_Mul_2Ux2U_4U_4_61_in2;
      reg gs_ctrl43;
      wire DC_Filter_OrReduction_2U_1U_4_55_out1;
      wire DC_Filter_Equal_2Ux1U_1U_4_54_out1;
      wire DC_Filter_Equal_2Ux2U_1U_4_53_out1;
      reg[1:0] DC_Filter_Equal_2Ux2U_1U_4_53_in2;
      reg gs_ctrl40;
      reg[1:0] DC_Filter_Add_2Ux1U_2U_4_52_in2;
      reg gs_ctrl39;
      reg DC_Filter_Add_1Ux1U_2U_4_20_in2;
      reg[1:0] DC_Filter_Add_3Ux2U_4U_4_19_in1;
      reg gs_ctrl37;
      reg[1:0] DC_Filter_Mul_2Ux2U_4U_4_16_in2;
      reg[1:0] gs_ctrl35;
      reg[3:0] gs_ctrl34;
      reg[2:0] gs_ctrl33;
      reg gs_ctrl32;
      reg[8:0] DC_Filter_Add_9Ux1U_9U_4_13_in2;
      reg gs_ctrl31;
      wire[11:0] DC_Filter_Add_12Ux9U_12U_4_12_out1;
      reg[8:0] DC_Filter_Add_12Ux9U_12U_4_12_in1;
      wire[8:0] DC_Filter_Add_8Ux2U_9U_4_62_out1;
      reg[1:0] gs_ctrl30;
      reg[11:0] DC_Filter_Add_12Ux9U_12U_4_12_in2;
      reg[2:0] gs_ctrl29;
      reg[3:0] DC_Filter_Mul_9Ux4U_12U_4_11_in1;
      reg[2:0] gs_ctrl28;
      wire[3:0] DC_Filter_Add_4Ux2U_4U_4_10_out1;
      reg[1:0] DC_Filter_Add_4Ux2U_4U_4_10_in1;
      wire[1:0] DC_Filter_Add_1Ux1U_2U_4_20_out1;
      reg[2:0] gs_ctrl27;
      reg[3:0] DC_Filter_Add_4Ux2U_4U_4_10_in2;
      reg[2:0] gs_ctrl26;
      wire[3:0] DC_Filter_Mul_2Ux2U_4U_4_9_out1;
      reg[1:0] DC_Filter_Mul_2Ux2U_4U_4_9_in2;
      reg[1:0] gs_ctrl25;
      reg[1:0] s_reg_73;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_52_out1;
      reg[11:0] s_reg_72;
      wire[11:0] DC_Filter_Mul_9Ux4U_12U_4_11_out1;
      wire[3:0] DC_Filter_Mul_2Ux2U_4U_4_16_out1;
      wire[3:0] DC_Filter_Add_3Ux2U_4U_4_19_out1;
      reg[3:0] s_reg_70;
      wire[11:0] DC_Filter_Add_12Ux1U_12U_4_51_out1;
      reg[8:0] s_reg_68;
      reg[1:0] s_reg_67;
      reg[1:0] s_reg_66;
      reg[11:0] DC_Filter_N_Mux_12_2_1_4_58_out1;
      reg[11:0] s_reg_65;
      reg[11:0] DC_Filter_N_Mux_12_2_0_4_57_out1;
      reg[11:0] s_reg_64;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_44_out1;
      reg[11:0] DC_Filter_N_Mux_12_2_0_4_56_out1;
      wire DC_Filter_LessThan_12Ux9U_1U_4_36_out1;
      reg[11:0] s_reg_63;
      wire DC_Filter_And_1Ux1U_1U_4_79_out1;
      wire[2:0] DC_Filter_gen_busy_r_4_155_out1;
      wire DC_Filter_Not_1U_1U_1_6_out1;
      reg o_rgb_inside_m_req_m_trig_req;
      reg[11:0] s_reg_69;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_39_out1;
      reg[11:0] s_reg_71;
      wire[1:0] DC_Filter_Add_1Ux1U_2U_4_32_out1;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_30_out1;
      wire DC_Filter_LessThan_12Ux9U_1U_4_31_out1;
      wire[8:0] DC_Filter_Add_9Ux1U_9U_4_13_out1;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_15_out1;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_14_out1;
      reg i_rgb_m_busy_req_0;
      reg[11:0] DC_Filter_N_Mux_12_2_3_4_73_out1;
      reg[11:0] DC_Filter_N_Mux_12_2_3_4_74_out1;
      reg[11:0] DC_Filter_N_Mux_12_2_3_4_75_out1;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_66_out1;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_76_out1;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_77_out1;
      reg[4:0] global_state1;
      reg stall1;
      reg[4:0] global_state_next;
      wire DC_Filter_Equal_2Ux1U_1U_4_145_out1;
      wire DC_Filter_OrReduction_2U_1U_4_142_out1;
      wire[3:0] DC_Filter_Add_4Ux2U_4U_4_139_out1;
      reg[1:0] DC_Filter_Add_8Ux2U_9U_4_137_in1;
      reg[1:0] gs_ctrl23;
      reg[7:0] DC_Filter_Add_8Ux2U_9U_4_137_in2;
      reg[1:0] gs_ctrl22;
      wire[3:0] DC_Filter_Mul_2Ux2U_4U_4_136_out1;
      reg[1:0] DC_Filter_Mul_2Ux2U_4U_4_136_in2;
      wire DC_Filter_OrReduction_2U_1U_4_130_out1;
      wire DC_Filter_Equal_2Ux1U_1U_4_129_out1;
      wire DC_Filter_Equal_2Ux2U_1U_4_128_out1;
      reg[1:0] DC_Filter_Equal_2Ux2U_1U_4_128_in2;
      reg gs_ctrl18;
      reg[1:0] DC_Filter_Add_2Ux1U_2U_4_127_in2;
      reg gs_ctrl17;
      reg[11:0] DC_Filter_Add_12Ux12U_12U_4_110_in1;
      wire[11:0] DC_Filter_Mul_8Ux4U_12U_4_146_out1;
      reg[11:0] DC_Filter_Add_12Ux12U_12U_4_110_in2;
      reg[11:0] DC_Filter_N_Mux_12_3_2_4_143_out1;
      reg gs_ctrl15;
      reg[3:0] DC_Filter_Add_4Ux2U_4U_4_96_in2;
      wire[1:0] DC_Filter_Add_1Ux1U_2U_4_95_out1;
      reg DC_Filter_Add_1Ux1U_2U_4_95_in2;
      reg[1:0] DC_Filter_Add_3Ux2U_4U_4_94_in1;
      reg gs_ctrl12;
      reg[1:0] DC_Filter_Mul_2Ux2U_4U_4_91_in2;
      reg[1:0] gs_ctrl10;
      reg[3:0] gs_ctrl9;
      reg[2:0] gs_ctrl8;
      wire[11:0] DC_Filter_Add_12Ux12U_12U_4_110_out1;
      reg[1:0] gs_ctrl7;
      reg[8:0] DC_Filter_Add_9Ux1U_9U_4_88_in2;
      reg gs_ctrl6;
      reg[8:0] DC_Filter_Add_12Ux9U_12U_4_87_in1;
      wire[8:0] DC_Filter_Add_8Ux2U_9U_4_137_out1;
      reg[1:0] gs_ctrl5;
      reg[11:0] DC_Filter_Add_12Ux9U_12U_4_87_in2;
      reg[2:0] gs_ctrl4;
      reg[3:0] DC_Filter_Mul_9Ux4U_12U_4_86_in1;
      reg[2:0] gs_ctrl3;
      wire[3:0] DC_Filter_Add_4Ux2U_4U_4_85_out1;
      reg[1:0] DC_Filter_Add_4Ux2U_4U_4_85_in1;
      reg[2:0] gs_ctrl2;
      reg[3:0] DC_Filter_Add_4Ux2U_4U_4_85_in2;
      reg gs_ctrl1;
      wire[3:0] DC_Filter_Mul_2Ux2U_4U_4_84_out1;
      reg[1:0] DC_Filter_Mul_2Ux2U_4U_4_84_in2;
      reg[1:0] gs_ctrl0;
      reg[1:0] s_reg_148;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_127_out1;
      wire[11:0] DC_Filter_Add_12Ux9U_12U_4_87_out1;
      reg[11:0] s_reg_147;
      wire[3:0] DC_Filter_Mul_2Ux2U_4U_4_91_out1;
      wire[3:0] DC_Filter_Add_4Ux1U_4U_4_98_out1;
      reg[3:0] s_reg_145;
      wire[3:0] DC_Filter_Add_4Ux2U_4U_4_96_out1;
      wire[3:0] DC_Filter_Add_3Ux2U_4U_4_94_out1;
      reg[3:0] s_reg_144;
      wire[11:0] DC_Filter_Mul_9Ux4U_12U_4_86_out1;
      reg[10:0] s_reg_143;
      wire[11:0] DC_Filter_Add_12Ux1U_12U_4_126_out1;
      reg[8:0] s_reg_141;
      reg[1:0] s_reg_140;
      reg[1:0] s_reg_139;
      reg[11:0] DC_Filter_N_Mux_12_2_1_4_133_out1;
      reg[11:0] s_reg_138;
      reg[11:0] DC_Filter_N_Mux_12_2_0_4_132_out1;
      reg[11:0] s_reg_137;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_119_out1;
      reg[11:0] DC_Filter_N_Mux_12_2_0_4_131_out1;
      wire DC_Filter_LessThan_12Ux9U_1U_4_113_out1;
      reg[11:0] s_reg_136;
      wire DC_Filter_And_1Ux1U_1U_4_81_out1;
      wire[2:0] DC_Filter_gen_busy_r_4_156_out1;
      wire DC_Filter_Not_1U_1U_1_3_out1;
      reg o_result_m_req_m_trig_req;
      reg[11:0] s_reg_142;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_114_out1;
      reg[8:0] s_reg_146;
      wire[1:0] DC_Filter_Add_1Ux1U_2U_4_107_out1;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_105_out1;
      wire DC_Filter_LessThan_12Ux9U_1U_4_106_out1;
      wire[8:0] DC_Filter_Add_9Ux1U_9U_4_88_out1;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_90_out1;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_89_out1;
      reg i_rgb_inside_m_busy_req_0;
      reg[11:0] DC_Filter_N_Mux_12_2_3_4_148_out1;
      reg[11:0] DC_Filter_N_Mux_12_2_3_4_149_out1;
      reg[11:0] DC_Filter_N_Mux_12_2_3_4_150_out1;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_141_out1;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_151_out1;
      wire[1:0] DC_Filter_Add_2Ux1U_2U_4_152_out1;
      reg[4:0] global_state;
      reg stall0;
      reg[7:0] f1_array_rgb_DIN;
      reg f1_array_rgb_CE;
      reg f1_array_rgb_RW;
      reg[11:0] f1_array_rgb_in1;
      wire[7:0] f1_array_rgb_out1;
      wire[3:0] mask1_in1;
      wire[3:0] mask1_out1;
      reg[7:0] f2_array_rgb_DIN;
      reg f2_array_rgb_CE;
      reg f2_array_rgb_RW;
      reg[11:0] f2_array_rgb_in1;
      wire[7:0] f2_array_rgb_out1;
      wire[3:0] mask2_in1;
      wire[3:0] mask2_out1;

         DC_Filter_ROM_9X4_mask2 mask2(
                                   .in1( mask2_in1 ),
                                   .out1( mask2_out1 ),
                                   .clk( i_clk )
                                 );

         DC_Filter_RAM_2322X8_1 f2_array_rgb(
                                  .DIN( f2_array_rgb_DIN ),
                                  .CE( f2_array_rgb_CE ),
                                  .RW( f2_array_rgb_RW ),
                                  .in1( f2_array_rgb_in1 ),
                                  .out1( f2_array_rgb_out1 ),
                                  .clk( i_clk )
                                );

         DC_Filter_ROM_9X4_mask1 mask1(
                                   .in1( mask1_in1 ),
                                   .out1( mask1_out1 ),
                                   .clk( i_clk )
                                 );

         DC_Filter_RAM_2322X8_1 f1_array_rgb(
                                  .DIN( f1_array_rgb_DIN ),
                                  .CE( f1_array_rgb_CE ),
                                  .RW( f1_array_rgb_RW ),
                                  .in1( f1_array_rgb_in1 ),
                                  .out1( f1_array_rgb_out1 ),
                                  .clk( i_clk )
                                );

         // resource: mux_24bx2i0c
         // resource: regr_en_24
         always @(posedge i_clk)
          begin :drive_o_result_data
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd06, 5'd10:                      begin
                        o_result_data <= i_rgb_inside_data;
                     end
                     
                     5'd15:                      begin
                        if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_141_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_151_out1 && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_152_out1)) begin
                           o_result_data <= {DC_Filter_N_Mux_12_2_3_4_148_out1[11:4], {DC_Filter_N_Mux_12_2_3_4_149_out1[11:4], DC_Filter_N_Mux_12_2_3_4_150_out1[11:4]}};
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_inside_m_busy_req_0
            if (i_rst == 1'b0) begin
               i_rgb_inside_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd01:                         begin
                           if (9'd258 == DC_Filter_Add_9Ux1U_9U_4_88_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_90_out1 && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_89_out1)) begin
                              i_rgb_inside_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        5'd04:                         begin
                           if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_88_out1 && (2'd2 == DC_Filter_Add_1Ux1U_2U_4_107_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_105_out1 && DC_Filter_LessThan_12Ux9U_1U_4_106_out1))) begin
                              i_rgb_inside_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        5'd06, 5'd10:                         begin
                           i_rgb_inside_m_busy_req_0 <= 1'd1;
                        end
                        
                        5'd09:                         begin
                           if (9'd257 != s_reg_146) begin
                              i_rgb_inside_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        5'd13:                         begin
                           case (s_reg_146) 

                              9'd257:                               begin
                                 if (2'd3 != DC_Filter_Add_2Ux1U_2U_4_114_out1) begin
                                    i_rgb_inside_m_busy_req_0 <= 1'd0;
                                 end
                              end
                              
                              default:                               begin
                                 i_rgb_inside_m_busy_req_0 <= 1'd0;
                              end
                              
                           endcase

                        end
                        
                        5'd16:                         begin
                           if (9'd256 == DC_Filter_Add_9Ux1U_9U_4_88_out1 && 12'd0000 == s_reg_142) begin
                              i_rgb_inside_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_result_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd15:                         begin
                           if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_141_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_151_out1 && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_152_out1)) begin
                              o_result_m_req_m_trig_req <= DC_Filter_Not_1U_1U_1_3_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx3i1c
         always @(DC_Filter_And_1Ux1U_1U_4_81_out1 or DC_Filter_gen_busy_r_4_156_out1[0] or global_state)
          begin :drive_stall0
            case (global_state) 

               5'd06, 5'd10:                begin
                  stall0 = DC_Filter_gen_busy_r_4_156_out1[0];
               end
               
               5'd16:                begin
                  stall0 = DC_Filter_And_1Ux1U_1U_4_81_out1;
               end
               
               default:                begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // resource: mux_12bx2i0c
         // resource: regr_en_sc_12
         always @(posedge i_clk)
          begin :drive_s_reg_136
            if (i_rst == 1'b0) begin
               s_reg_136 <= 12'd0000;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd04:                         begin
                           if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_88_out1 && (2'd2 == DC_Filter_Add_1Ux1U_2U_4_107_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_105_out1 && (!DC_Filter_LessThan_12Ux9U_1U_4_106_out1 && !DC_Filter_LessThan_12Ux9U_1U_4_113_out1)))) begin
                              /* state49 */
                              s_reg_136 <= DC_Filter_N_Mux_12_2_0_4_131_out1;
                           end
                        end
                        
                        5'd05:                         begin
                           if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_119_out1 && 9'd257 == DC_Filter_Add_9Ux1U_9U_4_88_out1) begin
                              /* state53 */
                              s_reg_136 <= DC_Filter_N_Mux_12_2_0_4_131_out1;
                           end
                        end
                        
                        5'd09:                         begin
                           if (9'd257 == s_reg_146) begin
                              /* state52 */
                              s_reg_136 <= DC_Filter_N_Mux_12_2_0_4_131_out1;
                           end
                        end
                        
                        5'd13:                         begin
                           if (9'd257 == s_reg_146 && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_114_out1) begin
                              /* state50 */
                              s_reg_136 <= DC_Filter_N_Mux_12_2_0_4_131_out1;
                           end
                        end
                        
                        5'd14:                         begin
                           /* state54 */
                           s_reg_136 <= DC_Filter_N_Mux_12_2_0_4_131_out1;
                        end
                        
                        5'd15:                         begin
                           s_reg_136 <= DC_Filter_N_Mux_12_2_3_4_148_out1;
                        end
                        
                        5'd16:                         begin
                           if (9'd256 != DC_Filter_Add_9Ux1U_9U_4_88_out1) begin
                              /* state51 */
                              s_reg_136 <= DC_Filter_N_Mux_12_2_0_4_131_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_12bx2i0c
         // resource: regr_en_sc_12
         always @(posedge i_clk)
          begin :drive_s_reg_137
            if (i_rst == 1'b0) begin
               s_reg_137 <= 12'd0000;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd04:                         begin
                           if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_88_out1 && (2'd2 == DC_Filter_Add_1Ux1U_2U_4_107_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_105_out1 && (!DC_Filter_LessThan_12Ux9U_1U_4_106_out1 && !DC_Filter_LessThan_12Ux9U_1U_4_113_out1)))) begin
                              s_reg_137 <= DC_Filter_N_Mux_12_2_0_4_132_out1;
                           end
                        end
                        
                        5'd05:                         begin
                           if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_119_out1 && 9'd257 == DC_Filter_Add_9Ux1U_9U_4_88_out1) begin
                              s_reg_137 <= DC_Filter_N_Mux_12_2_0_4_132_out1;
                           end
                        end
                        
                        5'd09:                         begin
                           if (9'd257 == s_reg_146) begin
                              s_reg_137 <= DC_Filter_N_Mux_12_2_0_4_132_out1;
                           end
                        end
                        
                        5'd13:                         begin
                           if (9'd257 == s_reg_146 && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_114_out1) begin
                              s_reg_137 <= DC_Filter_N_Mux_12_2_0_4_132_out1;
                           end
                        end
                        
                        5'd14:                         begin
                           s_reg_137 <= DC_Filter_N_Mux_12_2_0_4_132_out1;
                        end
                        
                        5'd15:                         begin
                           s_reg_137 <= DC_Filter_N_Mux_12_2_3_4_149_out1;
                        end
                        
                        5'd16:                         begin
                           if (9'd256 != DC_Filter_Add_9Ux1U_9U_4_88_out1) begin
                              s_reg_137 <= DC_Filter_N_Mux_12_2_0_4_132_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_12bx2i0c
         // resource: regr_en_sc_12
         always @(posedge i_clk)
          begin :drive_s_reg_138
            if (i_rst == 1'b0) begin
               s_reg_138 <= 12'd0000;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd04:                         begin
                           if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_88_out1 && (2'd2 == DC_Filter_Add_1Ux1U_2U_4_107_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_105_out1 && (!DC_Filter_LessThan_12Ux9U_1U_4_106_out1 && !DC_Filter_LessThan_12Ux9U_1U_4_113_out1)))) begin
                              s_reg_138 <= DC_Filter_N_Mux_12_2_1_4_133_out1;
                           end
                        end
                        
                        5'd05:                         begin
                           if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_119_out1 && 9'd257 == DC_Filter_Add_9Ux1U_9U_4_88_out1) begin
                              s_reg_138 <= DC_Filter_N_Mux_12_2_1_4_133_out1;
                           end
                        end
                        
                        5'd09:                         begin
                           if (9'd257 == s_reg_146) begin
                              s_reg_138 <= DC_Filter_N_Mux_12_2_1_4_133_out1;
                           end
                        end
                        
                        5'd13:                         begin
                           if (9'd257 == s_reg_146 && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_114_out1) begin
                              s_reg_138 <= DC_Filter_N_Mux_12_2_1_4_133_out1;
                           end
                        end
                        
                        5'd14:                         begin
                           s_reg_138 <= DC_Filter_N_Mux_12_2_1_4_133_out1;
                        end
                        
                        5'd15:                         begin
                           s_reg_138 <= DC_Filter_N_Mux_12_2_3_4_150_out1;
                        end
                        
                        5'd16:                         begin
                           if (9'd256 != DC_Filter_Add_9Ux1U_9U_4_88_out1) begin
                              s_reg_138 <= DC_Filter_N_Mux_12_2_1_4_133_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i1c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_s_reg_139
            if (i_rst == 1'b0) begin
               s_reg_139 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd01:                         begin
                           if (9'd258 == DC_Filter_Add_9Ux1U_9U_4_88_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_90_out1 && 2'd3 != DC_Filter_Add_2Ux1U_2U_4_89_out1)) begin
                              s_reg_139 <= DC_Filter_Add_2Ux1U_2U_4_89_out1;
                           end
                        end
                        
                        5'd04:                         begin
                           if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_88_out1) begin
                              case (DC_Filter_Add_1Ux1U_2U_4_107_out1) 

                                 2'd2:                                  begin
                                    s_reg_139 <= 2'd0;
                                 end
                                 
                                 default:                                  begin
                                    s_reg_139 <= DC_Filter_Add_1Ux1U_2U_4_107_out1;
                                 end
                                 
                              endcase

                           end
                        end
                        
                        5'd05, 5'd09, 5'd13:                         begin
                           s_reg_139 <= 2'd0;
                        end
                        
                        5'd15:                         begin
                           if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_141_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_151_out1 && 2'd3 != DC_Filter_Add_2Ux1U_2U_4_152_out1)) begin
                              s_reg_139 <= DC_Filter_Add_2Ux1U_2U_4_152_out1;
                           end
                        end
                        
                        5'd16:                         begin
                           /* state70 */
                           case (DC_Filter_Add_9Ux1U_9U_4_88_out1) 

                              9'd256:                               begin
                                 if (12'd0000 != s_reg_142) begin
                                    s_reg_139 <= 2'd0;
                                 end
                              end
                              
                              default:                               begin
                                 s_reg_139 <= 2'd0;
                              end
                              
                           endcase

                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx7i2c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_s_reg_140
            if (i_rst == 1'b0) begin
               s_reg_140 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd01:                         begin
                           if (9'd258 == DC_Filter_Add_9Ux1U_9U_4_88_out1) begin
                              case (DC_Filter_Add_2Ux1U_2U_4_90_out1) 

                                 2'd3:                                  begin
                                    /* state6 */
                                    case (DC_Filter_Add_2Ux1U_2U_4_89_out1) 

                                       2'd3:                                        begin
                                          s_reg_140 <= 2'd1;
                                       end
                                       
                                       default:                                        begin
                                          s_reg_140 <= 2'd0;
                                       end
                                       
                                    endcase

                                 end
                                 
                                 default:                                  begin
                                    s_reg_140 <= DC_Filter_Add_2Ux1U_2U_4_90_out1;
                                 end
                                 
                              endcase

                           end
                        end
                        
                        5'd04:                         begin
                           if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_88_out1 && 2'd2 == DC_Filter_Add_1Ux1U_2U_4_107_out1) begin
                              /* state17 */
                              case (DC_Filter_Add_2Ux1U_2U_4_105_out1) 

                                 2'd3:                                  begin
                                    s_reg_140 <= 2'd0;
                                 end
                                 
                                 default:                                  begin
                                    s_reg_140 <= DC_Filter_Add_2Ux1U_2U_4_105_out1;
                                 end
                                 
                              endcase

                           end
                        end
                        
                        5'd05:                         begin
                           case (DC_Filter_Add_2Ux1U_2U_4_119_out1) 

                              2'd3:                               begin
                                 s_reg_140 <= 2'd0;
                              end
                              
                              default:                               begin
                                 s_reg_140 <= DC_Filter_Add_2Ux1U_2U_4_119_out1;
                              end
                              
                           endcase

                        end
                        
                        5'd09, 5'd14:                         begin
                           s_reg_140 <= 2'd0;
                        end
                        
                        5'd13:                         begin
                           if (9'd257 == s_reg_146) begin
                              case (DC_Filter_Add_2Ux1U_2U_4_114_out1) 

                                 2'd3:                                  begin
                                    s_reg_140 <= 2'd0;
                                 end
                                 
                                 default:                                  begin
                                    s_reg_140 <= DC_Filter_Add_2Ux1U_2U_4_114_out1;
                                 end
                                 
                              endcase

                           end
                        end
                        
                        5'd15:                         begin
                           if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_141_out1) begin
                              case (DC_Filter_Add_2Ux1U_2U_4_151_out1) 

                                 2'd3:                                  begin
                                    if (2'd3 != DC_Filter_Add_2Ux1U_2U_4_152_out1) begin
                                       s_reg_140 <= 2'd0;
                                    end
                                 end
                                 
                                 default:                                  begin
                                    s_reg_140 <= DC_Filter_Add_2Ux1U_2U_4_151_out1;
                                 end
                                 
                              endcase

                           end
                        end
                        
                        5'd16:                         begin
                           /* state70 */
                           case (DC_Filter_Add_9Ux1U_9U_4_88_out1) 

                              9'd256:                               begin
                                 case (s_reg_142) 

                                    12'd0000:                                     begin
                                       s_reg_140 <= 2'd1;
                                    end
                                    
                                    default:                                     begin
                                       s_reg_140 <= 2'd0;
                                    end
                                    
                                 endcase

                              end
                              
                              default:                               begin
                                 s_reg_140 <= 2'd0;
                              end
                              
                           endcase

                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_9bx5i2c
         // resource: regr_en_sc_9
         always @(posedge i_clk)
          begin :drive_s_reg_141
            if (i_rst == 1'b0) begin
               s_reg_141 <= 9'd000;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd01:                         begin
                           case (DC_Filter_Add_9Ux1U_9U_4_88_out1) 

                              9'd258:                               begin
                                 case (DC_Filter_Add_2Ux1U_2U_4_90_out1) 

                                    2'd3:                                     begin
                                       /* state6 */
                                       case (DC_Filter_Add_2Ux1U_2U_4_89_out1) 

                                          2'd3:                                           begin
                                             s_reg_141 <= 9'd001;
                                          end
                                          
                                          default:                                           begin
                                             s_reg_141 <= 9'd000;
                                          end
                                          
                                       endcase

                                    end
                                    
                                    default:                                     begin
                                       s_reg_141 <= 9'd000;
                                    end
                                    
                                 endcase

                              end
                              
                              default:                               begin
                                 s_reg_141 <= DC_Filter_Add_9Ux1U_9U_4_88_out1;
                              end
                              
                           endcase

                        end
                        
                        5'd04:                         begin
                           case (DC_Filter_Add_9Ux1U_9U_4_88_out1) 

                              9'd257:                               begin
                                 case (DC_Filter_Add_1Ux1U_2U_4_107_out1) 

                                    2'd2:                                     begin
                                       /* state17 */
                                       case (DC_Filter_Add_2Ux1U_2U_4_105_out1) 

                                          2'd3:                                           begin
                                             if (DC_Filter_LessThan_12Ux9U_1U_4_106_out1) begin
                                                s_reg_141 <= 9'd001;
                                             end
                                             else begin
                                                s_reg_141 <= {8'b00000000, DC_Filter_LessThan_12Ux9U_1U_4_113_out1};
                                             end
                                          end
                                          
                                          default:                                           begin
                                             s_reg_141 <= 9'd001;
                                          end
                                          
                                       endcase

                                    end
                                    
                                    default:                                     begin
                                       s_reg_141 <= 9'd001;
                                    end
                                    
                                 endcase

                              end
                              
                              default:                               begin
                                 s_reg_141 <= DC_Filter_Add_9Ux1U_9U_4_88_out1;
                              end
                              
                           endcase

                        end
                        
                        5'd05:                         begin
                           if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_119_out1) begin
                              case (DC_Filter_Add_9Ux1U_9U_4_88_out1) 

                                 9'd257:                                  begin
                                    s_reg_141 <= 9'd000;
                                 end
                                 
                                 default:                                  begin
                                    s_reg_141 <= DC_Filter_Add_9Ux1U_9U_4_88_out1;
                                 end
                                 
                              endcase

                           end
                        end
                        
                        5'd09:                         begin
                           case (s_reg_146) 

                              9'd257:                               begin
                                 s_reg_141 <= 9'd000;
                              end
                              
                              default:                               begin
                                 s_reg_141 <= s_reg_146;
                              end
                              
                           endcase

                        end
                        
                        5'd13:                         begin
                           case (s_reg_146) 

                              9'd257:                               begin
                                 case (DC_Filter_Add_2Ux1U_2U_4_114_out1) 

                                    2'd3:                                     begin
                                       s_reg_141 <= 9'd000;
                                    end
                                    
                                    default:                                     begin
                                       s_reg_141 <= 9'd001;
                                    end
                                    
                                 endcase

                              end
                              
                              default:                               begin
                                 s_reg_141 <= s_reg_146;
                              end
                              
                           endcase

                        end
                        
                        5'd16:                         begin
                           /* state70 */
                           case (DC_Filter_Add_9Ux1U_9U_4_88_out1) 

                              9'd256:                               begin
                                 s_reg_141 <= 9'd001;
                              end
                              
                              default:                               begin
                                 s_reg_141 <= DC_Filter_Add_9Ux1U_9U_4_88_out1;
                              end
                              
                           endcase

                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_12bx2i1c
         // resource: regr_en_12
         always @(posedge i_clk)
          begin :drive_s_reg_142
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd05:                      begin
                        if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_119_out1 && 9'd257 == DC_Filter_Add_9Ux1U_9U_4_88_out1) begin
                           s_reg_142 <= DC_Filter_Add_12Ux1U_12U_4_126_out1;
                        end
                     end
                     
                     5'd09:                      begin
                        if (9'd257 == s_reg_146) begin
                           s_reg_142 <= DC_Filter_Add_12Ux1U_12U_4_126_out1;
                        end
                     end
                     
                     5'd13:                      begin
                        s_reg_142 <= 12'd0003;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_11
         always @(posedge i_clk)
          begin :drive_s_reg_143
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd01, 5'd16:                      begin
                        s_reg_143 <= DC_Filter_Mul_9Ux4U_12U_4_86_out1[10:0];
                     end
                     
                     5'd13:                      begin
                        if (9'd257 == s_reg_146 && 2'd3 != DC_Filter_Add_2Ux1U_2U_4_114_out1) begin
                           s_reg_143 <= DC_Filter_Mul_9Ux4U_12U_4_86_out1[10:0];
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_4bx2i0c
         // resource: regr_en_4
         always @(posedge i_clk)
          begin :drive_s_reg_144
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd01:                      begin
                        s_reg_144 <= DC_Filter_Add_3Ux2U_4U_4_94_out1;
                     end
                     
                     5'd04:                      begin
                        if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_88_out1) begin
                           case (DC_Filter_Add_1Ux1U_2U_4_107_out1) 

                              2'd2:                               begin
                                 if (2'd3 != DC_Filter_Add_2Ux1U_2U_4_105_out1) begin
                                    s_reg_144 <= DC_Filter_Add_4Ux2U_4U_4_96_out1;
                                 end
                              end
                              
                              default:                               begin
                                 s_reg_144 <= DC_Filter_Add_4Ux2U_4U_4_96_out1;
                              end
                              
                           endcase

                        end
                     end
                     
                     5'd13:                      begin
                        if (9'd257 == s_reg_146 && 2'd3 != DC_Filter_Add_2Ux1U_2U_4_114_out1) begin
                           s_reg_144 <= DC_Filter_Add_3Ux2U_4U_4_94_out1;
                        end
                     end
                     
                     5'd16:                      begin
                        case (s_reg_142) 

                           12'd0000:                            begin
                              s_reg_144 <= DC_Filter_Add_3Ux2U_4U_4_94_out1;
                           end
                           
                           default:                            begin
                              s_reg_144 <= DC_Filter_Add_4Ux2U_4U_4_96_out1;
                           end
                           
                        endcase

                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_4
         always @(posedge i_clk)
          begin :drive_s_reg_145
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  s_reg_145 <= DC_Filter_Add_4Ux1U_4U_4_98_out1;
               end
               
            endcase

         end

         // resource: mux_9bx2i0c
         // resource: regr_en_9
         always @(posedge i_clk)
          begin :drive_s_reg_146
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd04:                      begin
                        if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_88_out1 && (2'd2 == DC_Filter_Add_1Ux1U_2U_4_107_out1 && 2'd3 != DC_Filter_Add_2Ux1U_2U_4_105_out1)) begin
                           s_reg_146 <= {5'b00000, DC_Filter_Mul_2Ux2U_4U_4_91_out1};
                        end
                     end
                     
                     5'd07, 5'd10:                      begin
                        s_reg_146 <= DC_Filter_Add_9Ux1U_9U_4_88_out1;
                     end
                     
                     5'd16:                      begin
                        if (12'd0000 != s_reg_142) begin
                           s_reg_146 <= {5'b00000, DC_Filter_Mul_2Ux2U_4U_4_91_out1};
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_12bx2i0c
         // resource: regr_en_12
         always @(posedge i_clk)
          begin :drive_s_reg_147
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd10:                      begin
                        s_reg_147 <= DC_Filter_Mul_9Ux4U_12U_4_86_out1;
                     end
                     
                     5'd11:                      begin
                        s_reg_147 <= DC_Filter_Add_12Ux9U_12U_4_87_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_2bx3i1c
         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_148
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd04, 5'd05, 5'd09, 5'd13, 5'd14:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_127_out1) 

                           2'd3:                            begin
                              s_reg_148 <= 2'd0;
                           end
                           
                           default:                            begin
                              s_reg_148 <= DC_Filter_Add_2Ux1U_2U_4_127_out1;
                           end
                           
                        endcase

                     end
                     
                     5'd15:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_141_out1) 

                           2'd3:                            begin
                              case (DC_Filter_Add_2Ux1U_2U_4_151_out1) 

                                 2'd3:                                  begin
                                    if (2'd3 != DC_Filter_Add_2Ux1U_2U_4_152_out1) begin
                                       s_reg_148 <= 2'd0;
                                    end
                                 end
                                 
                                 default:                                  begin
                                    s_reg_148 <= 2'd0;
                                 end
                                 
                              endcase

                           end
                           
                           default:                            begin
                              s_reg_148 <= DC_Filter_Add_2Ux1U_2U_4_141_out1;
                           end
                           
                        endcase

                     end
                     
                     5'd16:                      begin
                        if (9'd256 != DC_Filter_Add_9Ux1U_9U_4_88_out1) begin
                           case (DC_Filter_Add_2Ux1U_2U_4_127_out1) 

                              2'd3:                               begin
                                 s_reg_148 <= 2'd0;
                              end
                              
                              default:                               begin
                                 s_reg_148 <= DC_Filter_Add_2Ux1U_2U_4_127_out1;
                              end
                              
                           endcase

                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_2bx4i1c
         always @(s_reg_139 or DC_Filter_Add_2Ux1U_2U_4_119_out1 or DC_Filter_Add_2Ux1U_2U_4_141_out1 or gs_ctrl0)
          begin :drive_DC_Filter_Mul_2Ux2U_4U_4_84_in2
            case (gs_ctrl0) 

               2'd1:                begin
                  DC_Filter_Mul_2Ux2U_4U_4_84_in2 = 2'd0;
               end
               
               2'd2:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_119_out1) 

                     2'd3:                      begin
                        DC_Filter_Mul_2Ux2U_4U_4_84_in2 = 2'd0;
                     end
                     
                     default:                      begin
                        DC_Filter_Mul_2Ux2U_4U_4_84_in2 = DC_Filter_Add_2Ux1U_2U_4_119_out1;
                     end
                     
                  endcase

               end
               
               2'd3:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_141_out1) 

                     2'd3:                      begin
                        DC_Filter_Mul_2Ux2U_4U_4_84_in2 = 2'd0;
                     end
                     
                     default:                      begin
                        DC_Filter_Mul_2Ux2U_4U_4_84_in2 = DC_Filter_Add_2Ux1U_2U_4_141_out1;
                     end
                     
                  endcase

               end
               
               default:                begin
                  DC_Filter_Mul_2Ux2U_4U_4_84_in2 = s_reg_139;
               end
               
            endcase

         end

         // resource: DC_Filter_Mul_2Ux2U_4U_4  instance: DC_Filter_Mul_2Ux2U_4U_4_84
         assign DC_Filter_Mul_2Ux2U_4U_4_84_out1 = {2'b00, DC_Filter_Mul_2Ux2U_4U_4_84_in2}*4'd03;

         // resource: mux_4bx2i0c
         always @(s_reg_140 or DC_Filter_Mul_2Ux2U_4U_4_84_out1 or gs_ctrl1)
          begin :drive_DC_Filter_Add_4Ux2U_4U_4_85_in2
            if (gs_ctrl1) begin
               DC_Filter_Add_4Ux2U_4U_4_85_in2 = {2'b00, s_reg_140};
            end
            else begin
               DC_Filter_Add_4Ux2U_4U_4_85_in2 = DC_Filter_Mul_2Ux2U_4U_4_84_out1;
            end
         end

         // resource: mux_2bx5i3c
         always @(s_reg_140 or DC_Filter_Add_9Ux1U_9U_4_88_out1 or DC_Filter_LessThan_12Ux9U_1U_4_113_out1 or DC_Filter_Add_2Ux1U_2U_4_119_out1 or DC_Filter_Add_2Ux1U_2U_4_141_out1 or DC_Filter_Add_2Ux1U_2U_4_151_out1 or gs_ctrl2)
          begin :drive_DC_Filter_Add_4Ux2U_4U_4_85_in1
            case (gs_ctrl2) 

               3'd1:                begin
                  if (DC_Filter_LessThan_12Ux9U_1U_4_113_out1) begin
                     DC_Filter_Add_4Ux2U_4U_4_85_in1 = 2'd2;
                  end
                  else begin
                     DC_Filter_Add_4Ux2U_4U_4_85_in1 = 2'd0;
                  end
               end
               
               3'd2:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_119_out1) 

                     2'd3:                      begin
                        case (DC_Filter_Add_9Ux1U_9U_4_88_out1) 

                           9'd257:                            begin
                              DC_Filter_Add_4Ux2U_4U_4_85_in1 = 2'd0;
                           end
                           
                           default:                            begin
                              DC_Filter_Add_4Ux2U_4U_4_85_in1 = 2'd2;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        DC_Filter_Add_4Ux2U_4U_4_85_in1 = 2'd2;
                     end
                     
                  endcase

               end
               
               3'd3:                begin
                  DC_Filter_Add_4Ux2U_4U_4_85_in1 = 2'd0;
               end
               
               3'd4:                begin
                  DC_Filter_Add_4Ux2U_4U_4_85_in1 = 2'd3;
               end
               
               3'd5:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_141_out1) 

                     2'd3:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_151_out1) 

                           2'd3:                            begin
                              DC_Filter_Add_4Ux2U_4U_4_85_in1 = 2'd0;
                           end
                           
                           default:                            begin
                              DC_Filter_Add_4Ux2U_4U_4_85_in1 = DC_Filter_Add_2Ux1U_2U_4_151_out1;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        DC_Filter_Add_4Ux2U_4U_4_85_in1 = s_reg_140;
                     end
                     
                  endcase

               end
               
               default:                begin
                  DC_Filter_Add_4Ux2U_4U_4_85_in1 = s_reg_140;
               end
               
            endcase

         end

         // resource: DC_Filter_Add_4Ux2U_4U_4  instance: DC_Filter_Add_4Ux2U_4U_4_85
         assign DC_Filter_Add_4Ux2U_4U_4_85_out1 = DC_Filter_Add_4Ux2U_4U_4_85_in2 + {2'b00, DC_Filter_Add_4Ux2U_4U_4_85_in1};

         // resource: mux_4bx6i1c
         always @(s_reg_144 or s_reg_145 or DC_Filter_Add_4Ux2U_4U_4_85_out1 or DC_Filter_Add_9Ux1U_9U_4_88_out1 or DC_Filter_Add_2Ux1U_2U_4_114_out1 or gs_ctrl3)
          begin :drive_DC_Filter_Mul_9Ux4U_12U_4_86_in1
            case (gs_ctrl3) 

               3'd1:                begin
                  DC_Filter_Mul_9Ux4U_12U_4_86_in1 = 4'd01;
               end
               
               3'd2:                begin
                  DC_Filter_Mul_9Ux4U_12U_4_86_in1 = s_reg_144;
               end
               
               3'd3:                begin
                  DC_Filter_Mul_9Ux4U_12U_4_86_in1 = s_reg_145;
               end
               
               3'd4:                begin
                  DC_Filter_Mul_9Ux4U_12U_4_86_in1 = {1'b0, DC_Filter_Add_4Ux2U_4U_4_85_out1[2:0]};
               end
               
               3'd5:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_114_out1) 

                     2'd3:                      begin
                        DC_Filter_Mul_9Ux4U_12U_4_86_in1 = DC_Filter_Add_4Ux2U_4U_4_85_out1;
                     end
                     
                     default:                      begin
                        DC_Filter_Mul_9Ux4U_12U_4_86_in1 = {2'b00, DC_Filter_Add_2Ux1U_2U_4_114_out1};
                     end
                     
                  endcase

               end
               
               3'd6:                begin
                  /* state70 */
                  case (DC_Filter_Add_9Ux1U_9U_4_88_out1) 

                     9'd256:                      begin
                        DC_Filter_Mul_9Ux4U_12U_4_86_in1 = 4'd01;
                     end
                     
                     default:                      begin
                        DC_Filter_Mul_9Ux4U_12U_4_86_in1 = DC_Filter_Add_4Ux2U_4U_4_85_out1;
                     end
                     
                  endcase

               end
               
               default:                begin
                  DC_Filter_Mul_9Ux4U_12U_4_86_in1 = DC_Filter_Add_4Ux2U_4U_4_85_out1;
               end
               
            endcase

         end

         // resource: DC_Filter_Mul_9Ux4U_12U_4  instance: DC_Filter_Mul_9Ux4U_12U_4_86
         assign DC_Filter_Mul_9Ux4U_12U_4_86_out1 = {8'b00000000, DC_Filter_Mul_9Ux4U_12U_4_86_in1}*12'd0258;

         // resource: mux_12bx5i3c
         always @(s_reg_143 or DC_Filter_Mul_9Ux4U_12U_4_86_out1 or gs_ctrl4)
          begin :drive_DC_Filter_Add_12Ux9U_12U_4_87_in2
            case (gs_ctrl4) 

               3'd1:                begin
                  DC_Filter_Add_12Ux9U_12U_4_87_in2 = 12'd0516;
               end
               
               3'd2:                begin
                  DC_Filter_Add_12Ux9U_12U_4_87_in2 = 12'd1290;
               end
               
               3'd3:                begin
                  DC_Filter_Add_12Ux9U_12U_4_87_in2 = 12'd2064;
               end
               
               3'd4:                begin
                  DC_Filter_Add_12Ux9U_12U_4_87_in2 = {1'b0, s_reg_143};
               end
               
               default:                begin
                  DC_Filter_Add_12Ux9U_12U_4_87_in2 = DC_Filter_Mul_9Ux4U_12U_4_86_out1;
               end
               
            endcase

         end

         // resource: mux_9bx4i1c
         always @(s_reg_141 or DC_Filter_Add_9Ux1U_9U_4_88_out1 or DC_Filter_LessThan_12Ux9U_1U_4_113_out1 or DC_Filter_Add_2Ux1U_2U_4_119_out1 or DC_Filter_Add_8Ux2U_9U_4_137_out1 or gs_ctrl5)
          begin :drive_DC_Filter_Add_12Ux9U_12U_4_87_in1
            case (gs_ctrl5) 

               2'd1:                begin
                  if (DC_Filter_LessThan_12Ux9U_1U_4_113_out1) begin
                     DC_Filter_Add_12Ux9U_12U_4_87_in1 = 9'd001;
                  end
                  else begin
                     DC_Filter_Add_12Ux9U_12U_4_87_in1 = DC_Filter_Add_8Ux2U_9U_4_137_out1;
                  end
               end
               
               2'd2:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_119_out1) 

                     2'd3:                      begin
                        case (DC_Filter_Add_9Ux1U_9U_4_88_out1) 

                           9'd257:                            begin
                              DC_Filter_Add_12Ux9U_12U_4_87_in1 = DC_Filter_Add_8Ux2U_9U_4_137_out1;
                           end
                           
                           default:                            begin
                              DC_Filter_Add_12Ux9U_12U_4_87_in1 = DC_Filter_Add_9Ux1U_9U_4_88_out1;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        DC_Filter_Add_12Ux9U_12U_4_87_in1 = s_reg_141;
                     end
                     
                  endcase

               end
               
               2'd3:                begin
                  DC_Filter_Add_12Ux9U_12U_4_87_in1 = DC_Filter_Add_8Ux2U_9U_4_137_out1;
               end
               
               default:                begin
                  DC_Filter_Add_12Ux9U_12U_4_87_in1 = s_reg_141;
               end
               
            endcase

         end

         // resource: DC_Filter_Add_12Ux9U_12U_4  instance: DC_Filter_Add_12Ux9U_12U_4_87
         assign DC_Filter_Add_12Ux9U_12U_4_87_out1 = DC_Filter_Add_12Ux9U_12U_4_87_in2 + {3'b000, DC_Filter_Add_12Ux9U_12U_4_87_in1};

         // resource: mux_9bx2i0c
         always @(s_reg_141 or gs_ctrl6)
          begin :drive_DC_Filter_Add_9Ux1U_9U_4_88_in2
            if (gs_ctrl6) begin
               DC_Filter_Add_9Ux1U_9U_4_88_in2 = {1'b0, s_reg_141[7:0]};
            end
            else begin
               DC_Filter_Add_9Ux1U_9U_4_88_in2 = s_reg_141;
            end
         end

         // resource: DC_Filter_Add_9Ux1U_9U_4  instance: DC_Filter_Add_9Ux1U_9U_4_88
         assign DC_Filter_Add_9Ux1U_9U_4_88_out1 = DC_Filter_Add_9Ux1U_9U_4_88_in2 + 9'd001;

         // resource: mux_12bx4i0c
         always @(s_reg_147 or DC_Filter_Add_12Ux9U_12U_4_87_out1 or DC_Filter_Add_12Ux12U_12U_4_110_out1 or gs_ctrl7)
          begin :drive_f2_array_rgb_in1
            case (gs_ctrl7) 

               2'd1:                begin
                  f2_array_rgb_in1 = {1'b0, DC_Filter_Add_12Ux9U_12U_4_87_out1[10:0]};
               end
               
               2'd2:                begin
                  f2_array_rgb_in1 = DC_Filter_Add_12Ux12U_12U_4_110_out1;
               end
               
               2'd3:                begin
                  f2_array_rgb_in1 = s_reg_147;
               end
               
               default:                begin
                  f2_array_rgb_in1 = DC_Filter_Add_12Ux9U_12U_4_87_out1;
               end
               
            endcase

         end

         // resource: mux_8bx5i1c
         always @(i_rgb_inside_data[7:0] or o_result_data[23:8] or f2_array_rgb_out1 or gs_ctrl8)
          begin :drive_f2_array_rgb_DIN
            case (gs_ctrl8) 

               3'd1:                begin
                  f2_array_rgb_DIN = f2_array_rgb_out1;
               end
               
               3'd2:                begin
                  f2_array_rgb_DIN = i_rgb_inside_data[7:0];
               end
               
               3'd3:                begin
                  f2_array_rgb_DIN = o_result_data[15:8];
               end
               
               3'd4:                begin
                  f2_array_rgb_DIN = o_result_data[23:16];
               end
               
               default:                begin
                  f2_array_rgb_DIN = 8'd000;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         always @(stall0 or s_reg_146 or DC_Filter_Add_9Ux1U_9U_4_88_out1 or DC_Filter_Add_2Ux1U_2U_4_105_out1 or DC_Filter_LessThan_12Ux9U_1U_4_106_out1 or DC_Filter_Add_1Ux1U_2U_4_107_out1 or DC_Filter_LessThan_12Ux9U_1U_4_113_out1 or DC_Filter_Add_2Ux1U_2U_4_114_out1 or DC_Filter_Add_2Ux1U_2U_4_119_out1 or DC_Filter_Add_2Ux1U_2U_4_127_out1 or DC_Filter_Add_2Ux1U_2U_4_141_out1 or DC_Filter_Add_2Ux1U_2U_4_151_out1 or DC_Filter_Add_2Ux1U_2U_4_152_out1 or gs_ctrl9)
          begin :drive_f2_array_rgb_CE
            if (stall0) begin
               f2_array_rgb_CE = 1'b0;
            end
            else begin
               case (gs_ctrl9) 

                  4'd01:                   begin
                     f2_array_rgb_CE = 1'b1;
                  end
                  
                  4'd02:                   begin
                     if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_88_out1 && (2'd2 == DC_Filter_Add_1Ux1U_2U_4_107_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_105_out1 && !DC_Filter_LessThan_12Ux9U_1U_4_106_out1))) begin
                        if (DC_Filter_LessThan_12Ux9U_1U_4_113_out1) begin
                           f2_array_rgb_CE = 1'b1;
                        end
                        else begin
                           if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_127_out1) begin
                              f2_array_rgb_CE = 1'b1;
                           end
                           else begin
                              f2_array_rgb_CE = 1'b0;
                           end
                        end
                     end
                     else begin
                        f2_array_rgb_CE = 1'b0;
                     end
                  end
                  
                  4'd03:                   begin
                     case (DC_Filter_Add_2Ux1U_2U_4_119_out1) 

                        2'd3:                         begin
                           case (DC_Filter_Add_9Ux1U_9U_4_88_out1) 

                              9'd257:                               begin
                                 if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_127_out1) begin
                                    f2_array_rgb_CE = 1'b1;
                                 end
                                 else begin
                                    f2_array_rgb_CE = 1'b0;
                                 end
                              end
                              
                              default:                               begin
                                 f2_array_rgb_CE = 1'b1;
                              end
                              
                           endcase

                        end
                        
                        default:                         begin
                           f2_array_rgb_CE = 1'b1;
                        end
                        
                     endcase

                  end
                  
                  4'd04:                   begin
                     if (9'd257 == s_reg_146 && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_127_out1) begin
                        f2_array_rgb_CE = 1'b1;
                     end
                     else begin
                        f2_array_rgb_CE = 1'b0;
                     end
                  end
                  
                  4'd05:                   begin
                     if (9'd257 == s_reg_146 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_114_out1 && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_127_out1)) begin
                        f2_array_rgb_CE = 1'b1;
                     end
                     else begin
                        f2_array_rgb_CE = 1'b0;
                     end
                  end
                  
                  4'd06:                   begin
                     if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_127_out1) begin
                        f2_array_rgb_CE = 1'b1;
                     end
                     else begin
                        f2_array_rgb_CE = 1'b0;
                     end
                  end
                  
                  4'd07:                   begin
                     case (DC_Filter_Add_2Ux1U_2U_4_141_out1) 

                        2'd3:                         begin
                           case (DC_Filter_Add_2Ux1U_2U_4_151_out1) 

                              2'd3:                               begin
                                 if (2'd3 != DC_Filter_Add_2Ux1U_2U_4_152_out1) begin
                                    f2_array_rgb_CE = 1'b1;
                                 end
                                 else begin
                                    f2_array_rgb_CE = 1'b0;
                                 end
                              end
                              
                              default:                               begin
                                 f2_array_rgb_CE = 1'b1;
                              end
                              
                           endcase

                        end
                        
                        default:                         begin
                           f2_array_rgb_CE = 1'b1;
                        end
                        
                     endcase

                  end
                  
                  4'd08:                   begin
                     if (9'd256 != DC_Filter_Add_9Ux1U_9U_4_88_out1 && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_127_out1) begin
                        f2_array_rgb_CE = 1'b1;
                     end
                     else begin
                        f2_array_rgb_CE = 1'b0;
                     end
                  end
                  
                  default:                   begin
                     f2_array_rgb_CE = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         always @(stall0 or DC_Filter_Add_9Ux1U_9U_4_88_out1 or DC_Filter_Add_2Ux1U_2U_4_105_out1 or DC_Filter_LessThan_12Ux9U_1U_4_106_out1 or DC_Filter_Add_1Ux1U_2U_4_107_out1 or DC_Filter_LessThan_12Ux9U_1U_4_113_out1 or DC_Filter_Add_2Ux1U_2U_4_119_out1 or gs_ctrl10)
          begin :drive_f2_array_rgb_RW
            if (stall0) begin
               f2_array_rgb_RW = 1'b0;
            end
            else begin
               case (gs_ctrl10) 

                  2'd1:                   begin
                     f2_array_rgb_RW = 1'b1;
                  end
                  
                  2'd2:                   begin
                     if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_88_out1 && (2'd2 == DC_Filter_Add_1Ux1U_2U_4_107_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_105_out1 && !DC_Filter_LessThan_12Ux9U_1U_4_106_out1))) begin
                        if (DC_Filter_LessThan_12Ux9U_1U_4_113_out1) begin
                           f2_array_rgb_RW = 1'b1;
                        end
                        else begin
                           f2_array_rgb_RW = 1'b0;
                        end
                     end
                     else begin
                        f2_array_rgb_RW = 1'b0;
                     end
                  end
                  
                  2'd3:                   begin
                     case (DC_Filter_Add_2Ux1U_2U_4_119_out1) 

                        2'd3:                         begin
                           case (DC_Filter_Add_9Ux1U_9U_4_88_out1) 

                              9'd257:                               begin
                                 f2_array_rgb_RW = 1'b0;
                              end
                              
                              default:                               begin
                                 f2_array_rgb_RW = 1'b1;
                              end
                              
                           endcase

                        end
                        
                        default:                         begin
                           f2_array_rgb_RW = 1'b1;
                        end
                        
                     endcase

                  end
                  
                  default:                   begin
                     f2_array_rgb_RW = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_89
         assign DC_Filter_Add_2Ux1U_2U_4_89_out1 = s_reg_139 + 2'd1;

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_90
         assign DC_Filter_Add_2Ux1U_2U_4_90_out1 = s_reg_140 + 2'd1;

         // resource: mux_2bx2i1c
         always @(DC_Filter_Add_2Ux1U_2U_4_105_out1 or gs_ctrl6)
          begin :drive_DC_Filter_Mul_2Ux2U_4U_4_91_in2
            if (gs_ctrl6) begin
               DC_Filter_Mul_2Ux2U_4U_4_91_in2 = 2'd0;
            end
            else begin
               DC_Filter_Mul_2Ux2U_4U_4_91_in2 = DC_Filter_Add_2Ux1U_2U_4_105_out1;
            end
         end

         // resource: DC_Filter_Mul_2Ux2U_4U_4  instance: DC_Filter_Mul_2Ux2U_4U_4_91
         assign DC_Filter_Mul_2Ux2U_4U_4_91_out1 = {2'b00, DC_Filter_Mul_2Ux2U_4U_4_91_in2}*4'd03;

         // resource: mux_2bx2i1c
         always @(DC_Filter_Add_2Ux1U_2U_4_114_out1 or gs_ctrl12)
          begin :drive_DC_Filter_Add_3Ux2U_4U_4_94_in1
            if (gs_ctrl12) begin
               DC_Filter_Add_3Ux2U_4U_4_94_in1 = DC_Filter_Add_2Ux1U_2U_4_114_out1;
            end
            else begin
               DC_Filter_Add_3Ux2U_4U_4_94_in1 = 2'd1;
            end
         end

         // resource: DC_Filter_Add_3Ux2U_4U_4  instance: DC_Filter_Add_3Ux2U_4U_4_94
         assign DC_Filter_Add_3Ux2U_4U_4_94_out1 = {2'b00, DC_Filter_Add_3Ux2U_4U_4_94_in1} + 4'd06;

         // resource: mux_1bx2i1c
         always @(DC_Filter_Add_1Ux1U_2U_4_107_out1 or gs_ctrl6)
          begin :drive_DC_Filter_Add_1Ux1U_2U_4_95_in2
            if (gs_ctrl6) begin
               DC_Filter_Add_1Ux1U_2U_4_95_in2 = 1'b0;
            end
            else begin
               case (DC_Filter_Add_1Ux1U_2U_4_107_out1) 

                  2'd2:                   begin
                     DC_Filter_Add_1Ux1U_2U_4_95_in2 = 1'b0;
                  end
                  
                  default:                   begin
                     DC_Filter_Add_1Ux1U_2U_4_95_in2 = DC_Filter_Add_1Ux1U_2U_4_107_out1[0];
                  end
                  
               endcase

            end
         end

         // resource: DC_Filter_Add_1Ux1U_2U_4  instance: DC_Filter_Add_1Ux1U_2U_4_95
         assign DC_Filter_Add_1Ux1U_2U_4_95_out1 = {1'b0, DC_Filter_Add_1Ux1U_2U_4_95_in2} + 2'd1;

         // resource: mux_4bx2i0c
         always @(s_reg_146[3:0] or DC_Filter_Mul_2Ux2U_4U_4_91_out1 or DC_Filter_Add_1Ux1U_2U_4_107_out1 or gs_ctrl6)
          begin :drive_DC_Filter_Add_4Ux2U_4U_4_96_in2
            if (gs_ctrl6) begin
               DC_Filter_Add_4Ux2U_4U_4_96_in2 = DC_Filter_Mul_2Ux2U_4U_4_91_out1;
            end
            else begin
               case (DC_Filter_Add_1Ux1U_2U_4_107_out1) 

                  2'd2:                   begin
                     DC_Filter_Add_4Ux2U_4U_4_96_in2 = DC_Filter_Mul_2Ux2U_4U_4_91_out1;
                  end
                  
                  default:                   begin
                     DC_Filter_Add_4Ux2U_4U_4_96_in2 = s_reg_146[3:0];
                  end
                  
               endcase

            end
         end

         // resource: DC_Filter_Add_4Ux2U_4U_4  instance: DC_Filter_Add_4Ux2U_4U_4_96
         assign DC_Filter_Add_4Ux2U_4U_4_96_out1 = DC_Filter_Add_4Ux2U_4U_4_96_in2 + {2'b00, DC_Filter_Add_1Ux1U_2U_4_95_out1};

         // resource: DC_Filter_Add_4Ux1U_4U_4  instance: DC_Filter_Add_4Ux1U_4U_4_98
         assign DC_Filter_Add_4Ux1U_4U_4_98_out1 = s_reg_146[3:0] + {3'b000, s_reg_139[0]};

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_105
         assign DC_Filter_Add_2Ux1U_2U_4_105_out1 = s_reg_140 + 2'd1;

         // resource: DC_Filter_LessThan_12Ux9U_1U_4  instance: DC_Filter_LessThan_12Ux9U_1U_4_106
         assign DC_Filter_LessThan_12Ux9U_1U_4_106_out1 = s_reg_142 < 12'd0257;

         // resource: DC_Filter_Add_1Ux1U_2U_4  instance: DC_Filter_Add_1Ux1U_2U_4_107
         assign DC_Filter_Add_1Ux1U_2U_4_107_out1 = {1'b0, s_reg_139[0]} + 2'd1;

         // resource: mux_12bx2i0c
         always @(s_reg_147 or DC_Filter_N_Mux_12_3_2_4_143_out1 or gs_ctrl15)
          begin :drive_DC_Filter_Add_12Ux12U_12U_4_110_in2
            if (gs_ctrl15) begin
               DC_Filter_Add_12Ux12U_12U_4_110_in2 = DC_Filter_N_Mux_12_3_2_4_143_out1;
            end
            else begin
               DC_Filter_Add_12Ux12U_12U_4_110_in2 = s_reg_147;
            end
         end

         // resource: mux_12bx2i0c
         always @(s_reg_141 or DC_Filter_Mul_8Ux4U_12U_4_146_out1 or gs_ctrl15)
          begin :drive_DC_Filter_Add_12Ux12U_12U_4_110_in1
            if (gs_ctrl15) begin
               DC_Filter_Add_12Ux12U_12U_4_110_in1 = DC_Filter_Mul_8Ux4U_12U_4_146_out1;
            end
            else begin
               DC_Filter_Add_12Ux12U_12U_4_110_in1 = {3'b000, s_reg_141};
            end
         end

         // resource: DC_Filter_Add_12Ux12U_12U_4  instance: DC_Filter_Add_12Ux12U_12U_4_110
         assign DC_Filter_Add_12Ux12U_12U_4_110_out1 = DC_Filter_Add_12Ux12U_12U_4_110_in2 + DC_Filter_Add_12Ux12U_12U_4_110_in1;

         // resource: DC_Filter_LessThan_12Ux9U_1U_4  instance: DC_Filter_LessThan_12Ux9U_1U_4_113
         assign DC_Filter_LessThan_12Ux9U_1U_4_113_out1 = s_reg_142 < 12'd0258;

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_114
         assign DC_Filter_Add_2Ux1U_2U_4_114_out1 = s_reg_140 + 2'd1;

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_119
         assign DC_Filter_Add_2Ux1U_2U_4_119_out1 = s_reg_140 + 2'd1;

         // resource: DC_Filter_Add_12Ux1U_12U_4  instance: DC_Filter_Add_12Ux1U_12U_4_126
         assign DC_Filter_Add_12Ux1U_12U_4_126_out1 = s_reg_142 + 12'd0001;

         // resource: mux_2bx2i1c
         always @(s_reg_148 or gs_ctrl17)
          begin :drive_DC_Filter_Add_2Ux1U_2U_4_127_in2
            if (gs_ctrl17) begin
               DC_Filter_Add_2Ux1U_2U_4_127_in2 = s_reg_148;
            end
            else begin
               DC_Filter_Add_2Ux1U_2U_4_127_in2 = 2'd0;
            end
         end

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_127
         assign DC_Filter_Add_2Ux1U_2U_4_127_out1 = DC_Filter_Add_2Ux1U_2U_4_127_in2 + 2'd1;

         // resource: mux_2bx2i1c
         always @(s_reg_148 or gs_ctrl18)
          begin :drive_DC_Filter_Equal_2Ux2U_1U_4_128_in2
            if (gs_ctrl18) begin
               DC_Filter_Equal_2Ux2U_1U_4_128_in2 = s_reg_148;
            end
            else begin
               DC_Filter_Equal_2Ux2U_1U_4_128_in2 = 2'd0;
            end
         end

         // resource: DC_Filter_Equal_2Ux2U_1U_4  instance: DC_Filter_Equal_2Ux2U_1U_4_128
         assign DC_Filter_Equal_2Ux2U_1U_4_128_out1 = DC_Filter_Equal_2Ux2U_1U_4_128_in2 == 2'd2;

         // resource: DC_Filter_Equal_2Ux1U_1U_4  instance: DC_Filter_Equal_2Ux1U_1U_4_129
         assign DC_Filter_Equal_2Ux1U_1U_4_129_out1 = DC_Filter_Add_2Ux1U_2U_4_127_in2 == 2'd1;

         // resource: DC_Filter_OrReduction_2U_1U_4  instance: DC_Filter_OrReduction_2U_1U_4_130
         assign DC_Filter_OrReduction_2U_1U_4_130_out1 = (|DC_Filter_Add_2Ux1U_2U_4_127_in2);

         // resource: DC_Filter_N_Mux_12_2_0_4
         always @(s_reg_136 or DC_Filter_Equal_2Ux2U_1U_4_128_out1)
          begin :DC_Filter_N_Mux_12_2_0_4_131
            if (DC_Filter_Equal_2Ux2U_1U_4_128_out1) begin
               DC_Filter_N_Mux_12_2_0_4_131_out1 = 12'd0000;
            end
            else begin
               DC_Filter_N_Mux_12_2_0_4_131_out1 = s_reg_136;
            end
         end

         // resource: DC_Filter_N_Mux_12_2_0_4
         always @(s_reg_137 or DC_Filter_Equal_2Ux1U_1U_4_129_out1)
          begin :DC_Filter_N_Mux_12_2_0_4_132
            if (DC_Filter_Equal_2Ux1U_1U_4_129_out1) begin
               DC_Filter_N_Mux_12_2_0_4_132_out1 = 12'd0000;
            end
            else begin
               DC_Filter_N_Mux_12_2_0_4_132_out1 = s_reg_137;
            end
         end

         // resource: DC_Filter_N_Mux_12_2_1_4
         always @(s_reg_138 or DC_Filter_OrReduction_2U_1U_4_130_out1)
          begin :DC_Filter_N_Mux_12_2_1_4_133
            if (DC_Filter_OrReduction_2U_1U_4_130_out1) begin
               DC_Filter_N_Mux_12_2_1_4_133_out1 = s_reg_138;
            end
            else begin
               DC_Filter_N_Mux_12_2_1_4_133_out1 = 12'd0000;
            end
         end

         // resource: mux_2bx3i1c
         always @(s_reg_140 or DC_Filter_Add_2Ux1U_2U_4_141_out1 or DC_Filter_Add_2Ux1U_2U_4_151_out1 or gs_ctrl15)
          begin :drive_DC_Filter_Mul_2Ux2U_4U_4_136_in2
            if (gs_ctrl15) begin
               case (DC_Filter_Add_2Ux1U_2U_4_141_out1) 

                  2'd3:                   begin
                     case (DC_Filter_Add_2Ux1U_2U_4_151_out1) 

                        2'd3:                         begin
                           DC_Filter_Mul_2Ux2U_4U_4_136_in2 = 2'd0;
                        end
                        
                        default:                         begin
                           DC_Filter_Mul_2Ux2U_4U_4_136_in2 = DC_Filter_Add_2Ux1U_2U_4_151_out1;
                        end
                        
                     endcase

                  end
                  
                  default:                   begin
                     DC_Filter_Mul_2Ux2U_4U_4_136_in2 = s_reg_140;
                  end
                  
               endcase

            end
            else begin
               DC_Filter_Mul_2Ux2U_4U_4_136_in2 = 2'd0;
            end
         end

         // resource: DC_Filter_Mul_2Ux2U_4U_4  instance: DC_Filter_Mul_2Ux2U_4U_4_136
         assign DC_Filter_Mul_2Ux2U_4U_4_136_out1 = {2'b00, DC_Filter_Mul_2Ux2U_4U_4_136_in2}*4'd03;

         // resource: mux_8bx3i1c
         always @(s_reg_141[7:0] or DC_Filter_Add_9Ux1U_9U_4_88_out1[7:0] or gs_ctrl22)
          begin :drive_DC_Filter_Add_8Ux2U_9U_4_137_in2
            case (gs_ctrl22) 

               2'd1:                begin
                  DC_Filter_Add_8Ux2U_9U_4_137_in2 = s_reg_141[7:0];
               end
               
               2'd2:                begin
                  DC_Filter_Add_8Ux2U_9U_4_137_in2 = DC_Filter_Add_9Ux1U_9U_4_88_out1[7:0];
               end
               
               default:                begin
                  DC_Filter_Add_8Ux2U_9U_4_137_in2 = 8'd000;
               end
               
            endcase

         end

         // resource: mux_2bx3i1c
         always @(s_reg_139 or DC_Filter_Add_2Ux1U_2U_4_141_out1 or DC_Filter_Add_2Ux1U_2U_4_151_out1 or DC_Filter_Add_2Ux1U_2U_4_152_out1 or gs_ctrl23)
          begin :drive_DC_Filter_Add_8Ux2U_9U_4_137_in1
            case (gs_ctrl23) 

               2'd1:                begin
                  DC_Filter_Add_8Ux2U_9U_4_137_in1 = s_reg_139;
               end
               
               2'd2:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_141_out1) 

                     2'd3:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_151_out1) 

                           2'd3:                            begin
                              DC_Filter_Add_8Ux2U_9U_4_137_in1 = DC_Filter_Add_2Ux1U_2U_4_152_out1;
                           end
                           
                           default:                            begin
                              DC_Filter_Add_8Ux2U_9U_4_137_in1 = s_reg_139;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        DC_Filter_Add_8Ux2U_9U_4_137_in1 = s_reg_139;
                     end
                     
                  endcase

               end
               
               default:                begin
                  DC_Filter_Add_8Ux2U_9U_4_137_in1 = 2'd0;
               end
               
            endcase

         end

         // resource: DC_Filter_Add_8Ux2U_9U_4  instance: DC_Filter_Add_8Ux2U_9U_4_137
         assign DC_Filter_Add_8Ux2U_9U_4_137_out1 = {1'b0, DC_Filter_Add_8Ux2U_9U_4_137_in2} + {7'b0000000, DC_Filter_Add_8Ux2U_9U_4_137_in1};

         // resource: DC_Filter_Add_4Ux2U_4U_4  instance: DC_Filter_Add_4Ux2U_4U_4_139
         assign DC_Filter_Add_4Ux2U_4U_4_139_out1 = DC_Filter_Mul_2Ux2U_4U_4_136_out1 + {2'b00, DC_Filter_Add_8Ux2U_9U_4_137_in1};

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_141
         assign DC_Filter_Add_2Ux1U_2U_4_141_out1 = s_reg_148 + 2'd1;

         // resource: DC_Filter_OrReduction_2U_1U_4  instance: DC_Filter_OrReduction_2U_1U_4_142
         assign DC_Filter_OrReduction_2U_1U_4_142_out1 = (|s_reg_148);

         // resource: DC_Filter_N_Mux_12_3_2_4
         always @(s_reg_136 or s_reg_137 or s_reg_138 or s_reg_148)
          begin :DC_Filter_N_Mux_12_3_2_4_143
            case (s_reg_148) 

               2'd0:                begin
                  DC_Filter_N_Mux_12_3_2_4_143_out1 = s_reg_138;
               end
               
               2'd1:                begin
                  DC_Filter_N_Mux_12_3_2_4_143_out1 = s_reg_137;
               end
               
               default:                begin
                  DC_Filter_N_Mux_12_3_2_4_143_out1 = s_reg_136;
               end
               
            endcase

         end

         // resource: DC_Filter_Equal_2Ux1U_1U_4  instance: DC_Filter_Equal_2Ux1U_1U_4_145
         assign DC_Filter_Equal_2Ux1U_1U_4_145_out1 = s_reg_148 == 2'd1;

         // instance: drive_mask2_in1
         assign mask2_in1 = DC_Filter_Add_4Ux2U_4U_4_139_out1;

         // resource: DC_Filter_Mul_8Ux4U_12U_4  instance: DC_Filter_Mul_8Ux4U_12U_4_146
         assign DC_Filter_Mul_8Ux4U_12U_4_146_out1 = {4'b0000, f2_array_rgb_out1}*{8'b00000000, mask2_out1};

         // resource: DC_Filter_N_Mux_12_2_3_4
         always @(s_reg_136 or DC_Filter_Add_12Ux12U_12U_4_110_out1 or DC_Filter_Equal_2Ux2U_1U_4_128_out1)
          begin :DC_Filter_N_Mux_12_2_3_4_148
            if (DC_Filter_Equal_2Ux2U_1U_4_128_out1) begin
               DC_Filter_N_Mux_12_2_3_4_148_out1 = DC_Filter_Add_12Ux12U_12U_4_110_out1;
            end
            else begin
               DC_Filter_N_Mux_12_2_3_4_148_out1 = s_reg_136;
            end
         end

         // resource: DC_Filter_N_Mux_12_2_3_4
         always @(s_reg_137 or DC_Filter_Add_12Ux12U_12U_4_110_out1 or DC_Filter_Equal_2Ux1U_1U_4_145_out1)
          begin :DC_Filter_N_Mux_12_2_3_4_149
            if (DC_Filter_Equal_2Ux1U_1U_4_145_out1) begin
               DC_Filter_N_Mux_12_2_3_4_149_out1 = DC_Filter_Add_12Ux12U_12U_4_110_out1;
            end
            else begin
               DC_Filter_N_Mux_12_2_3_4_149_out1 = s_reg_137;
            end
         end

         // resource: DC_Filter_N_Mux_12_2_3_4
         always @(s_reg_138 or DC_Filter_Add_12Ux12U_12U_4_110_out1 or DC_Filter_OrReduction_2U_1U_4_142_out1)
          begin :DC_Filter_N_Mux_12_2_3_4_150
            if (DC_Filter_OrReduction_2U_1U_4_142_out1) begin
               DC_Filter_N_Mux_12_2_3_4_150_out1 = s_reg_138;
            end
            else begin
               DC_Filter_N_Mux_12_2_3_4_150_out1 = DC_Filter_Add_12Ux12U_12U_4_110_out1;
            end
         end

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_151
         assign DC_Filter_Add_2Ux1U_2U_4_151_out1 = s_reg_140 + 2'd1;

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_152
         assign DC_Filter_Add_2Ux1U_2U_4_152_out1 = s_reg_139 + 2'd1;

         // resource: regr_en_sc_5
         always @(posedge i_clk)
          begin :drive_global_state
            if (i_rst == 1'b0) begin
               global_state <= 5'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     global_state <= global_state_next;
                  end
                  
               endcase

            end
         end

         // resource: mux_5bx8i7c
         always @(s_reg_142 or s_reg_146 or DC_Filter_Add_9Ux1U_9U_4_88_out1 or DC_Filter_Add_2Ux1U_2U_4_89_out1 or DC_Filter_Add_2Ux1U_2U_4_90_out1 or DC_Filter_Add_2Ux1U_2U_4_105_out1 or DC_Filter_LessThan_12Ux9U_1U_4_106_out1 or DC_Filter_Add_1Ux1U_2U_4_107_out1 or DC_Filter_LessThan_12Ux9U_1U_4_113_out1 or DC_Filter_Add_2Ux1U_2U_4_114_out1 or DC_Filter_Add_2Ux1U_2U_4_119_out1 or DC_Filter_Add_2Ux1U_2U_4_127_out1 or DC_Filter_Add_2Ux1U_2U_4_141_out1 or DC_Filter_Add_2Ux1U_2U_4_151_out1 or 
DC_Filter_Add_2Ux1U_2U_4_152_out1
          or global_state)
          begin :drive_global_state_next
            case (global_state) 

               5'd01:                begin
                  case (DC_Filter_Add_9Ux1U_9U_4_88_out1) 

                     9'd258:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_90_out1) 

                           2'd3:                            begin
                              /* state6 */
                              case (DC_Filter_Add_2Ux1U_2U_4_89_out1) 

                                 2'd3:                                  begin
                                    global_state_next = 5'd10;
                                 end
                                 
                                 default:                                  begin
                                    global_state_next = 5'd00;
                                 end
                                 
                              endcase

                           end
                           
                           default:                            begin
                              global_state_next = 5'd00;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state_next = 5'd00;
                     end
                     
                  endcase

               end
               
               5'd04:                begin
                  case (DC_Filter_Add_9Ux1U_9U_4_88_out1) 

                     9'd257:                      begin
                        case (DC_Filter_Add_1Ux1U_2U_4_107_out1) 

                           2'd2:                            begin
                              /* state17 */
                              case (DC_Filter_Add_2Ux1U_2U_4_105_out1) 

                                 2'd3:                                  begin
                                    if (DC_Filter_LessThan_12Ux9U_1U_4_106_out1) begin
                                       global_state_next = 5'd06;
                                    end
                                    else begin
                                       if (DC_Filter_LessThan_12Ux9U_1U_4_113_out1) begin
                                          global_state_next = global_state + 5'd01;
                                       end
                                       else begin
                                          case (DC_Filter_Add_2Ux1U_2U_4_127_out1) 

                                             2'd3:                                              begin
                                                global_state_next = 5'd15;
                                             end
                                             
                                             default:                                              begin
                                                global_state_next = 5'd14;
                                             end
                                             
                                          endcase

                                       end
                                    end
                                 end
                                 
                                 default:                                  begin
                                    global_state_next = 5'd02;
                                 end
                                 
                              endcase

                           end
                           
                           default:                            begin
                              global_state_next = 5'd02;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state_next = 5'd02;
                     end
                     
                  endcase

               end
               
               5'd05:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_119_out1) 

                     2'd3:                      begin
                        case (DC_Filter_Add_9Ux1U_9U_4_88_out1) 

                           9'd257:                            begin
                              case (DC_Filter_Add_2Ux1U_2U_4_127_out1) 

                                 2'd3:                                  begin
                                    global_state_next = 5'd15;
                                 end
                                 
                                 default:                                  begin
                                    global_state_next = 5'd14;
                                 end
                                 
                              endcase

                           end
                           
                           default:                            begin
                              global_state_next = 5'd05;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state_next = 5'd05;
                     end
                     
                  endcase

               end
               
               5'd09:                begin
                  case (s_reg_146) 

                     9'd257:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_127_out1) 

                           2'd3:                            begin
                              global_state_next = 5'd15;
                           end
                           
                           default:                            begin
                              global_state_next = 5'd14;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state_next = 5'd06;
                     end
                     
                  endcase

               end
               
               5'd13:                begin
                  case (s_reg_146) 

                     9'd257:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_114_out1) 

                           2'd3:                            begin
                              case (DC_Filter_Add_2Ux1U_2U_4_127_out1) 

                                 2'd3:                                  begin
                                    global_state_next = 5'd15;
                                 end
                                 
                                 default:                                  begin
                                    global_state_next = global_state + 5'd01;
                                 end
                                 
                              endcase

                           end
                           
                           default:                            begin
                              global_state_next = 5'd10;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state_next = 5'd10;
                     end
                     
                  endcase

               end
               
               5'd14:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_127_out1) 

                     2'd3:                      begin
                        global_state_next = global_state + 5'd01;
                     end
                     
                     default:                      begin
                        global_state_next = 5'd14;
                     end
                     
                  endcase

               end
               
               5'd15:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_141_out1) 

                     2'd3:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_151_out1) 

                           2'd3:                            begin
                              case (DC_Filter_Add_2Ux1U_2U_4_152_out1) 

                                 2'd3:                                  begin
                                    global_state_next = global_state + 5'd01;
                                 end
                                 
                                 default:                                  begin
                                    global_state_next = 5'd15;
                                 end
                                 
                              endcase

                           end
                           
                           default:                            begin
                              global_state_next = 5'd15;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state_next = 5'd15;
                     end
                     
                  endcase

               end
               
               5'd16:                begin
                  /* state70 */
                  case (DC_Filter_Add_9Ux1U_9U_4_88_out1) 

                     9'd256:                      begin
                        case (s_reg_142) 

                           12'd0000:                            begin
                              global_state_next = 5'd10;
                           end
                           
                           default:                            begin
                              global_state_next = 5'd02;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_127_out1) 

                           2'd3:                            begin
                              global_state_next = 5'd15;
                           end
                           
                           default:                            begin
                              global_state_next = 5'd14;
                           end
                           
                        endcase

                     end
                     
                  endcase

               end
               
               default:                begin
                  global_state_next = global_state + 5'd01;
               end
               
            endcase

         end

         // resource: mux_2bx4i4c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl0
            if (i_rst == 1'b0) begin
               gs_ctrl0 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd04, 5'd09, 5'd13, 5'd14, 5'd16:                         begin
                           gs_ctrl0 <= 2'd1;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl0 <= 2'd2;
                        end
                        
                        5'd15:                         begin
                           gs_ctrl0 <= 2'd3;
                        end
                        
                        default:                         begin
                           gs_ctrl0 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl1
            if (i_rst == 1'b0) begin
               gs_ctrl1 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd10:                         begin
                           gs_ctrl1 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl1 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx6i6c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl2
            if (i_rst == 1'b0) begin
               gs_ctrl2 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd04:                         begin
                           gs_ctrl2 <= 3'd1;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl2 <= 3'd2;
                        end
                        
                        5'd09, 5'd13, 5'd14, 5'd16:                         begin
                           gs_ctrl2 <= 3'd3;
                        end
                        
                        5'd10:                         begin
                           gs_ctrl2 <= 3'd4;
                        end
                        
                        5'd15:                         begin
                           gs_ctrl2 <= 3'd5;
                        end
                        
                        default:                         begin
                           gs_ctrl2 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx7i7c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl3
            if (i_rst == 1'b0) begin
               gs_ctrl3 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd01:                         begin
                           gs_ctrl3 <= 3'd1;
                        end
                        
                        5'd02, 5'd11:                         begin
                           gs_ctrl3 <= 3'd2;
                        end
                        
                        5'd03:                         begin
                           gs_ctrl3 <= 3'd3;
                        end
                        
                        5'd10:                         begin
                           gs_ctrl3 <= 3'd4;
                        end
                        
                        5'd13:                         begin
                           gs_ctrl3 <= 3'd5;
                        end
                        
                        5'd16:                         begin
                           gs_ctrl3 <= 3'd6;
                        end
                        
                        default:                         begin
                           gs_ctrl3 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl4
            if (i_rst == 1'b0) begin
               gs_ctrl4 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd06:                         begin
                           gs_ctrl4 <= 3'd1;
                        end
                        
                        5'd07:                         begin
                           gs_ctrl4 <= 3'd2;
                        end
                        
                        5'd08:                         begin
                           gs_ctrl4 <= 3'd3;
                        end
                        
                        5'd10:                         begin
                           gs_ctrl4 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl4 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i4c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl5
            if (i_rst == 1'b0) begin
               gs_ctrl5 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd04:                         begin
                           gs_ctrl5 <= 2'd1;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl5 <= 2'd2;
                        end
                        
                        5'd09, 5'd13, 5'd14, 5'd15, 5'd16:                         begin
                           gs_ctrl5 <= 2'd3;
                        end
                        
                        default:                         begin
                           gs_ctrl5 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl6
            if (i_rst == 1'b0) begin
               gs_ctrl6 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd16:                         begin
                           gs_ctrl6 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl6 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i4c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl7
            if (i_rst == 1'b0) begin
               gs_ctrl7 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd06:                         begin
                           gs_ctrl7 <= 2'd1;
                        end
                        
                        5'd11:                         begin
                           gs_ctrl7 <= 2'd2;
                        end
                        
                        5'd12:                         begin
                           gs_ctrl7 <= 2'd3;
                        end
                        
                        default:                         begin
                           gs_ctrl7 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl8
            if (i_rst == 1'b0) begin
               gs_ctrl8 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd03:                         begin
                           gs_ctrl8 <= 3'd1;
                        end
                        
                        5'd06, 5'd10:                         begin
                           gs_ctrl8 <= 3'd2;
                        end
                        
                        5'd07, 5'd11:                         begin
                           gs_ctrl8 <= 3'd3;
                        end
                        
                        5'd08, 5'd12:                         begin
                           gs_ctrl8 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl8 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_4bx9i9c
         // resource: regr_en_ss_sc_4
         always @(posedge i_clk)
          begin :drive_gs_ctrl9
            if (i_rst == 1'b0) begin
               gs_ctrl9 <= 4'd01;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd00, 5'd02, 5'd03, 5'd06, 5'd07, 5'd08, 5'd10, 5'd11, 5'd12:                         begin
                           gs_ctrl9 <= 4'd01;
                        end
                        
                        5'd04:                         begin
                           gs_ctrl9 <= 4'd02;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl9 <= 4'd03;
                        end
                        
                        5'd09:                         begin
                           gs_ctrl9 <= 4'd04;
                        end
                        
                        5'd13:                         begin
                           gs_ctrl9 <= 4'd05;
                        end
                        
                        5'd14:                         begin
                           gs_ctrl9 <= 4'd06;
                        end
                        
                        5'd15:                         begin
                           gs_ctrl9 <= 4'd07;
                        end
                        
                        5'd16:                         begin
                           gs_ctrl9 <= 4'd08;
                        end
                        
                        default:                         begin
                           gs_ctrl9 <= 4'd00;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i4c
         // resource: regr_en_ss_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl10
            if (i_rst == 1'b0) begin
               gs_ctrl10 <= 2'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd00, 5'd03, 5'd06, 5'd07, 5'd08, 5'd10, 5'd11, 5'd12:                         begin
                           gs_ctrl10 <= 2'd1;
                        end
                        
                        5'd04:                         begin
                           gs_ctrl10 <= 2'd2;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl10 <= 2'd3;
                        end
                        
                        default:                         begin
                           gs_ctrl10 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl12
            if (i_rst == 1'b0) begin
               gs_ctrl12 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd13:                         begin
                           gs_ctrl12 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl12 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl15
            if (i_rst == 1'b0) begin
               gs_ctrl15 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd15:                         begin
                           gs_ctrl15 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl15 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl17
            if (i_rst == 1'b0) begin
               gs_ctrl17 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd14:                         begin
                           gs_ctrl17 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl17 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl18
            if (i_rst == 1'b0) begin
               gs_ctrl18 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd14, 5'd15:                         begin
                           gs_ctrl18 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl18 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl22
            if (i_rst == 1'b0) begin
               gs_ctrl22 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd14, 5'd15:                         begin
                           gs_ctrl22 <= 2'd1;
                        end
                        
                        5'd16:                         begin
                           gs_ctrl22 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl22 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl23
            if (i_rst == 1'b0) begin
               gs_ctrl23 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd14:                         begin
                           gs_ctrl23 <= 2'd1;
                        end
                        
                        5'd15:                         begin
                           gs_ctrl23 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl23 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_24bx2i0c
         // resource: regr_en_24
         always @(posedge i_clk)
          begin :drive_o_rgb_inside_data
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     5'd06, 5'd10:                      begin
                        o_rgb_inside_data <= i_rgb_data;
                     end
                     
                     5'd15:                      begin
                        if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_66_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_76_out1 && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_77_out1)) begin
                           o_rgb_inside_data <= {DC_Filter_N_Mux_12_2_3_4_73_out1[11:4], {DC_Filter_N_Mux_12_2_3_4_74_out1[11:4], DC_Filter_N_Mux_12_2_3_4_75_out1[11:4]}};
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_m_busy_req_0
            if (i_rst == 1'b0) begin
               i_rgb_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        5'd01:                         begin
                           if (9'd258 == DC_Filter_Add_9Ux1U_9U_4_13_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_15_out1 && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_14_out1)) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        5'd04:                         begin
                           if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1 && (2'd2 == DC_Filter_Add_1Ux1U_2U_4_32_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_30_out1 && DC_Filter_LessThan_12Ux9U_1U_4_31_out1))) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        5'd06, 5'd10:                         begin
                           i_rgb_m_busy_req_0 <= 1'd1;
                        end
                        
                        5'd09:                         begin
                           if (9'd257 != s_reg_71[8:0]) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        5'd13:                         begin
                           case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                              9'd257:                               begin
                                 if (2'd3 != DC_Filter_Add_2Ux1U_2U_4_39_out1) begin
                                    i_rgb_m_busy_req_0 <= 1'd0;
                                 end
                              end
                              
                              default:                               begin
                                 i_rgb_m_busy_req_0 <= 1'd0;
                              end
                              
                           endcase

                        end
                        
                        5'd16:                         begin
                           if (9'd256 == DC_Filter_Add_9Ux1U_9U_4_13_out1 && 12'd0000 == s_reg_69) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_rgb_inside_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_rgb_inside_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        5'd15:                         begin
                           if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_66_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_76_out1 && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_77_out1)) begin
                              o_rgb_inside_m_req_m_trig_req <= DC_Filter_Not_1U_1U_1_6_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx3i1c
         always @(DC_Filter_And_1Ux1U_1U_4_79_out1 or DC_Filter_gen_busy_r_4_155_out1[0] or global_state1)
          begin :drive_stall1
            case (global_state1) 

               5'd06, 5'd10:                begin
                  stall1 = DC_Filter_gen_busy_r_4_155_out1[0];
               end
               
               5'd16:                begin
                  stall1 = DC_Filter_And_1Ux1U_1U_4_79_out1;
               end
               
               default:                begin
                  stall1 = 1'b0;
               end
               
            endcase

         end

         // resource: mux_12bx2i0c
         // resource: regr_en_sc_12
         always @(posedge i_clk)
          begin :drive_s_reg_63
            if (i_rst == 1'b0) begin
               s_reg_63 <= 12'd0000;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        5'd04:                         begin
                           if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1 && (2'd2 == DC_Filter_Add_1Ux1U_2U_4_32_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_30_out1 && (!DC_Filter_LessThan_12Ux9U_1U_4_31_out1 && !DC_Filter_LessThan_12Ux9U_1U_4_36_out1)))) begin
                              /* state49 */
                              s_reg_63 <= DC_Filter_N_Mux_12_2_0_4_56_out1;
                           end
                        end
                        
                        5'd05:                         begin
                           if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_44_out1 && 9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1) begin
                              /* state53 */
                              s_reg_63 <= DC_Filter_N_Mux_12_2_0_4_56_out1;
                           end
                        end
                        
                        5'd09:                         begin
                           if (9'd257 == s_reg_71[8:0]) begin
                              /* state52 */
                              s_reg_63 <= DC_Filter_N_Mux_12_2_0_4_56_out1;
                           end
                        end
                        
                        5'd13:                         begin
                           if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1 && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_39_out1) begin
                              /* state50 */
                              s_reg_63 <= DC_Filter_N_Mux_12_2_0_4_56_out1;
                           end
                        end
                        
                        5'd14:                         begin
                           /* state54 */
                           s_reg_63 <= DC_Filter_N_Mux_12_2_0_4_56_out1;
                        end
                        
                        5'd15:                         begin
                           s_reg_63 <= DC_Filter_N_Mux_12_2_3_4_73_out1;
                        end
                        
                        5'd16:                         begin
                           if (9'd256 != DC_Filter_Add_9Ux1U_9U_4_13_out1) begin
                              /* state51 */
                              s_reg_63 <= DC_Filter_N_Mux_12_2_0_4_56_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_12bx2i0c
         // resource: regr_en_sc_12
         always @(posedge i_clk)
          begin :drive_s_reg_64
            if (i_rst == 1'b0) begin
               s_reg_64 <= 12'd0000;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        5'd04:                         begin
                           if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1 && (2'd2 == DC_Filter_Add_1Ux1U_2U_4_32_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_30_out1 && (!DC_Filter_LessThan_12Ux9U_1U_4_31_out1 && !DC_Filter_LessThan_12Ux9U_1U_4_36_out1)))) begin
                              s_reg_64 <= DC_Filter_N_Mux_12_2_0_4_57_out1;
                           end
                        end
                        
                        5'd05:                         begin
                           if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_44_out1 && 9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1) begin
                              s_reg_64 <= DC_Filter_N_Mux_12_2_0_4_57_out1;
                           end
                        end
                        
                        5'd09:                         begin
                           if (9'd257 == s_reg_71[8:0]) begin
                              s_reg_64 <= DC_Filter_N_Mux_12_2_0_4_57_out1;
                           end
                        end
                        
                        5'd13:                         begin
                           if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1 && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_39_out1) begin
                              s_reg_64 <= DC_Filter_N_Mux_12_2_0_4_57_out1;
                           end
                        end
                        
                        5'd14:                         begin
                           s_reg_64 <= DC_Filter_N_Mux_12_2_0_4_57_out1;
                        end
                        
                        5'd15:                         begin
                           s_reg_64 <= DC_Filter_N_Mux_12_2_3_4_74_out1;
                        end
                        
                        5'd16:                         begin
                           if (9'd256 != DC_Filter_Add_9Ux1U_9U_4_13_out1) begin
                              s_reg_64 <= DC_Filter_N_Mux_12_2_0_4_57_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_12bx2i0c
         // resource: regr_en_sc_12
         always @(posedge i_clk)
          begin :drive_s_reg_65
            if (i_rst == 1'b0) begin
               s_reg_65 <= 12'd0000;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        5'd04:                         begin
                           if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1 && (2'd2 == DC_Filter_Add_1Ux1U_2U_4_32_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_30_out1 && (!DC_Filter_LessThan_12Ux9U_1U_4_31_out1 && !DC_Filter_LessThan_12Ux9U_1U_4_36_out1)))) begin
                              s_reg_65 <= DC_Filter_N_Mux_12_2_1_4_58_out1;
                           end
                        end
                        
                        5'd05:                         begin
                           if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_44_out1 && 9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1) begin
                              s_reg_65 <= DC_Filter_N_Mux_12_2_1_4_58_out1;
                           end
                        end
                        
                        5'd09:                         begin
                           if (9'd257 == s_reg_71[8:0]) begin
                              s_reg_65 <= DC_Filter_N_Mux_12_2_1_4_58_out1;
                           end
                        end
                        
                        5'd13:                         begin
                           if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1 && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_39_out1) begin
                              s_reg_65 <= DC_Filter_N_Mux_12_2_1_4_58_out1;
                           end
                        end
                        
                        5'd14:                         begin
                           s_reg_65 <= DC_Filter_N_Mux_12_2_1_4_58_out1;
                        end
                        
                        5'd15:                         begin
                           s_reg_65 <= DC_Filter_N_Mux_12_2_3_4_75_out1;
                        end
                        
                        5'd16:                         begin
                           if (9'd256 != DC_Filter_Add_9Ux1U_9U_4_13_out1) begin
                              s_reg_65 <= DC_Filter_N_Mux_12_2_1_4_58_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i1c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_s_reg_66
            if (i_rst == 1'b0) begin
               s_reg_66 <= 2'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        5'd01:                         begin
                           if (9'd258 == DC_Filter_Add_9Ux1U_9U_4_13_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_15_out1 && 2'd3 != DC_Filter_Add_2Ux1U_2U_4_14_out1)) begin
                              s_reg_66 <= DC_Filter_Add_2Ux1U_2U_4_14_out1;
                           end
                        end
                        
                        5'd04:                         begin
                           if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1 && 2'd2 == DC_Filter_Add_1Ux1U_2U_4_32_out1) begin
                              /* state17 */
                              case (DC_Filter_Add_2Ux1U_2U_4_30_out1) 

                                 2'd3:                                  begin
                                    s_reg_66 <= 2'd0;
                                 end
                                 
                                 default:                                  begin
                                    s_reg_66 <= DC_Filter_Add_2Ux1U_2U_4_30_out1;
                                 end
                                 
                              endcase

                           end
                        end
                        
                        5'd05, 5'd09, 5'd13:                         begin
                           s_reg_66 <= 2'd0;
                        end
                        
                        5'd15:                         begin
                           if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_66_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_76_out1 && 2'd3 != DC_Filter_Add_2Ux1U_2U_4_77_out1)) begin
                              s_reg_66 <= DC_Filter_Add_2Ux1U_2U_4_77_out1;
                           end
                        end
                        
                        5'd16:                         begin
                           /* state70 */
                           case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                              9'd256:                               begin
                                 if (12'd0000 != s_reg_69) begin
                                    s_reg_66 <= 2'd0;
                                 end
                              end
                              
                              default:                               begin
                                 s_reg_66 <= 2'd0;
                              end
                              
                           endcase

                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx7i2c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_s_reg_67
            if (i_rst == 1'b0) begin
               s_reg_67 <= 2'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        5'd01:                         begin
                           if (9'd258 == DC_Filter_Add_9Ux1U_9U_4_13_out1) begin
                              case (DC_Filter_Add_2Ux1U_2U_4_15_out1) 

                                 2'd3:                                  begin
                                    /* state6 */
                                    case (DC_Filter_Add_2Ux1U_2U_4_14_out1) 

                                       2'd3:                                        begin
                                          s_reg_67 <= 2'd1;
                                       end
                                       
                                       default:                                        begin
                                          s_reg_67 <= 2'd0;
                                       end
                                       
                                    endcase

                                 end
                                 
                                 default:                                  begin
                                    s_reg_67 <= DC_Filter_Add_2Ux1U_2U_4_15_out1;
                                 end
                                 
                              endcase

                           end
                        end
                        
                        5'd04:                         begin
                           if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1) begin
                              case (DC_Filter_Add_1Ux1U_2U_4_32_out1) 

                                 2'd2:                                  begin
                                    s_reg_67 <= 2'd0;
                                 end
                                 
                                 default:                                  begin
                                    s_reg_67 <= DC_Filter_Add_1Ux1U_2U_4_32_out1;
                                 end
                                 
                              endcase

                           end
                        end
                        
                        5'd05:                         begin
                           case (DC_Filter_Add_2Ux1U_2U_4_44_out1) 

                              2'd3:                               begin
                                 s_reg_67 <= 2'd0;
                              end
                              
                              default:                               begin
                                 s_reg_67 <= DC_Filter_Add_2Ux1U_2U_4_44_out1;
                              end
                              
                           endcase

                        end
                        
                        5'd09, 5'd14:                         begin
                           s_reg_67 <= 2'd0;
                        end
                        
                        5'd13:                         begin
                           if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1) begin
                              case (DC_Filter_Add_2Ux1U_2U_4_39_out1) 

                                 2'd3:                                  begin
                                    s_reg_67 <= 2'd0;
                                 end
                                 
                                 default:                                  begin
                                    s_reg_67 <= DC_Filter_Add_2Ux1U_2U_4_39_out1;
                                 end
                                 
                              endcase

                           end
                        end
                        
                        5'd15:                         begin
                           if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_66_out1) begin
                              case (DC_Filter_Add_2Ux1U_2U_4_76_out1) 

                                 2'd3:                                  begin
                                    if (2'd3 != DC_Filter_Add_2Ux1U_2U_4_77_out1) begin
                                       s_reg_67 <= 2'd0;
                                    end
                                 end
                                 
                                 default:                                  begin
                                    s_reg_67 <= DC_Filter_Add_2Ux1U_2U_4_76_out1;
                                 end
                                 
                              endcase

                           end
                        end
                        
                        5'd16:                         begin
                           /* state70 */
                           case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                              9'd256:                               begin
                                 case (s_reg_69) 

                                    12'd0000:                                     begin
                                       s_reg_67 <= 2'd1;
                                    end
                                    
                                    default:                                     begin
                                       s_reg_67 <= 2'd0;
                                    end
                                    
                                 endcase

                              end
                              
                              default:                               begin
                                 s_reg_67 <= 2'd0;
                              end
                              
                           endcase

                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_9bx5i2c
         // resource: regr_en_sc_9
         always @(posedge i_clk)
          begin :drive_s_reg_68
            if (i_rst == 1'b0) begin
               s_reg_68 <= 9'd000;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        5'd01:                         begin
                           case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                              9'd258:                               begin
                                 case (DC_Filter_Add_2Ux1U_2U_4_15_out1) 

                                    2'd3:                                     begin
                                       /* state6 */
                                       case (DC_Filter_Add_2Ux1U_2U_4_14_out1) 

                                          2'd3:                                           begin
                                             s_reg_68 <= 9'd001;
                                          end
                                          
                                          default:                                           begin
                                             s_reg_68 <= 9'd000;
                                          end
                                          
                                       endcase

                                    end
                                    
                                    default:                                     begin
                                       s_reg_68 <= 9'd000;
                                    end
                                    
                                 endcase

                              end
                              
                              default:                               begin
                                 s_reg_68 <= DC_Filter_Add_9Ux1U_9U_4_13_out1;
                              end
                              
                           endcase

                        end
                        
                        5'd04:                         begin
                           case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                              9'd257:                               begin
                                 case (DC_Filter_Add_1Ux1U_2U_4_32_out1) 

                                    2'd2:                                     begin
                                       /* state17 */
                                       case (DC_Filter_Add_2Ux1U_2U_4_30_out1) 

                                          2'd3:                                           begin
                                             if (DC_Filter_LessThan_12Ux9U_1U_4_31_out1) begin
                                                s_reg_68 <= 9'd001;
                                             end
                                             else begin
                                                s_reg_68 <= {8'b00000000, DC_Filter_LessThan_12Ux9U_1U_4_36_out1};
                                             end
                                          end
                                          
                                          default:                                           begin
                                             s_reg_68 <= 9'd001;
                                          end
                                          
                                       endcase

                                    end
                                    
                                    default:                                     begin
                                       s_reg_68 <= 9'd001;
                                    end
                                    
                                 endcase

                              end
                              
                              default:                               begin
                                 s_reg_68 <= DC_Filter_Add_9Ux1U_9U_4_13_out1;
                              end
                              
                           endcase

                        end
                        
                        5'd05:                         begin
                           if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_44_out1) begin
                              case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                                 9'd257:                                  begin
                                    s_reg_68 <= 9'd000;
                                 end
                                 
                                 default:                                  begin
                                    s_reg_68 <= DC_Filter_Add_9Ux1U_9U_4_13_out1;
                                 end
                                 
                              endcase

                           end
                        end
                        
                        5'd09:                         begin
                           case (s_reg_71[8:0]) 

                              9'd257:                               begin
                                 s_reg_68 <= 9'd000;
                              end
                              
                              default:                               begin
                                 s_reg_68 <= s_reg_71[8:0];
                              end
                              
                           endcase

                        end
                        
                        5'd13:                         begin
                           case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                              9'd257:                               begin
                                 case (DC_Filter_Add_2Ux1U_2U_4_39_out1) 

                                    2'd3:                                     begin
                                       s_reg_68 <= 9'd000;
                                    end
                                    
                                    default:                                     begin
                                       s_reg_68 <= 9'd001;
                                    end
                                    
                                 endcase

                              end
                              
                              default:                               begin
                                 s_reg_68 <= DC_Filter_Add_9Ux1U_9U_4_13_out1;
                              end
                              
                           endcase

                        end
                        
                        5'd16:                         begin
                           /* state70 */
                           case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                              9'd256:                               begin
                                 s_reg_68 <= 9'd001;
                              end
                              
                              default:                               begin
                                 s_reg_68 <= DC_Filter_Add_9Ux1U_9U_4_13_out1;
                              end
                              
                           endcase

                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_12bx2i1c
         // resource: regr_en_12
         always @(posedge i_clk)
          begin :drive_s_reg_69
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     5'd05:                      begin
                        if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_44_out1 && 9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1) begin
                           s_reg_69 <= DC_Filter_Add_12Ux1U_12U_4_51_out1;
                        end
                     end
                     
                     5'd09:                      begin
                        if (9'd257 == s_reg_71[8:0]) begin
                           s_reg_69 <= DC_Filter_Add_12Ux1U_12U_4_51_out1;
                        end
                     end
                     
                     5'd13:                      begin
                        s_reg_69 <= 12'd0003;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_4bx2i0c
         // resource: regr_en_4
         always @(posedge i_clk)
          begin :drive_s_reg_70
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     5'd01:                      begin
                        s_reg_70 <= DC_Filter_Add_3Ux2U_4U_4_19_out1;
                     end
                     
                     5'd04:                      begin
                        if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1 && (2'd2 == DC_Filter_Add_1Ux1U_2U_4_32_out1 && 2'd3 != DC_Filter_Add_2Ux1U_2U_4_30_out1)) begin
                           s_reg_70 <= DC_Filter_Mul_2Ux2U_4U_4_16_out1;
                        end
                     end
                     
                     5'd13:                      begin
                        if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1 && 2'd3 != DC_Filter_Add_2Ux1U_2U_4_39_out1) begin
                           s_reg_70 <= DC_Filter_Add_3Ux2U_4U_4_19_out1;
                        end
                     end
                     
                     5'd16:                      begin
                        case (s_reg_69) 

                           12'd0000:                            begin
                              s_reg_70 <= DC_Filter_Add_3Ux2U_4U_4_19_out1;
                           end
                           
                           default:                            begin
                              s_reg_70 <= DC_Filter_Mul_2Ux2U_4U_4_16_out1;
                           end
                           
                        endcase

                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_12bx3i0c
         // resource: regr_en_12
         always @(posedge i_clk)
          begin :drive_s_reg_71
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     5'd01, 5'd16:                      begin
                        s_reg_71 <= {1'b0, DC_Filter_Mul_9Ux4U_12U_4_11_out1[10:0]};
                     end
                     
                     5'd02:                      begin
                        s_reg_71 <= DC_Filter_Mul_9Ux4U_12U_4_11_out1;
                     end
                     
                     5'd06:                      begin
                        s_reg_71 <= {3'b000, DC_Filter_Add_9Ux1U_9U_4_13_out1};
                     end
                     
                     5'd13:                      begin
                        if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1 && 2'd3 != DC_Filter_Add_2Ux1U_2U_4_39_out1) begin
                           s_reg_71 <= {1'b0, DC_Filter_Mul_9Ux4U_12U_4_11_out1[10:0]};
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_12
         always @(posedge i_clk)
          begin :drive_s_reg_72
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     5'd04:                      begin
                        if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1) begin
                           case (DC_Filter_Add_1Ux1U_2U_4_32_out1) 

                              2'd2:                               begin
                                 if (2'd3 != DC_Filter_Add_2Ux1U_2U_4_30_out1) begin
                                    s_reg_72 <= DC_Filter_Mul_9Ux4U_12U_4_11_out1;
                                 end
                              end
                              
                              default:                               begin
                                 s_reg_72 <= DC_Filter_Mul_9Ux4U_12U_4_11_out1;
                              end
                              
                           endcase

                        end
                     end
                     
                     5'd10, 5'd11:                      begin
                        s_reg_72 <= DC_Filter_Mul_9Ux4U_12U_4_11_out1;
                     end
                     
                     5'd16:                      begin
                        if (12'd0000 != s_reg_69) begin
                           s_reg_72 <= DC_Filter_Mul_9Ux4U_12U_4_11_out1;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_2bx3i1c
         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_73
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     5'd04, 5'd05, 5'd09, 5'd13, 5'd14:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_52_out1) 

                           2'd3:                            begin
                              s_reg_73 <= 2'd0;
                           end
                           
                           default:                            begin
                              s_reg_73 <= DC_Filter_Add_2Ux1U_2U_4_52_out1;
                           end
                           
                        endcase

                     end
                     
                     5'd15:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_66_out1) 

                           2'd3:                            begin
                              case (DC_Filter_Add_2Ux1U_2U_4_76_out1) 

                                 2'd3:                                  begin
                                    if (2'd3 != DC_Filter_Add_2Ux1U_2U_4_77_out1) begin
                                       s_reg_73 <= 2'd0;
                                    end
                                 end
                                 
                                 default:                                  begin
                                    s_reg_73 <= 2'd0;
                                 end
                                 
                              endcase

                           end
                           
                           default:                            begin
                              s_reg_73 <= DC_Filter_Add_2Ux1U_2U_4_66_out1;
                           end
                           
                        endcase

                     end
                     
                     5'd16:                      begin
                        if (9'd256 != DC_Filter_Add_9Ux1U_9U_4_13_out1) begin
                           case (DC_Filter_Add_2Ux1U_2U_4_52_out1) 

                              2'd3:                               begin
                                 s_reg_73 <= 2'd0;
                              end
                              
                              default:                               begin
                                 s_reg_73 <= DC_Filter_Add_2Ux1U_2U_4_52_out1;
                              end
                              
                           endcase

                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_2bx4i1c
         always @(s_reg_66 or DC_Filter_Add_2Ux1U_2U_4_44_out1 or DC_Filter_Add_2Ux1U_2U_4_66_out1 or gs_ctrl25)
          begin :drive_DC_Filter_Mul_2Ux2U_4U_4_9_in2
            case (gs_ctrl25) 

               2'd1:                begin
                  DC_Filter_Mul_2Ux2U_4U_4_9_in2 = 2'd0;
               end
               
               2'd2:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_44_out1) 

                     2'd3:                      begin
                        DC_Filter_Mul_2Ux2U_4U_4_9_in2 = 2'd0;
                     end
                     
                     default:                      begin
                        DC_Filter_Mul_2Ux2U_4U_4_9_in2 = DC_Filter_Add_2Ux1U_2U_4_44_out1;
                     end
                     
                  endcase

               end
               
               2'd3:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_66_out1) 

                     2'd3:                      begin
                        DC_Filter_Mul_2Ux2U_4U_4_9_in2 = 2'd0;
                     end
                     
                     default:                      begin
                        DC_Filter_Mul_2Ux2U_4U_4_9_in2 = DC_Filter_Add_2Ux1U_2U_4_66_out1;
                     end
                     
                  endcase

               end
               
               default:                begin
                  DC_Filter_Mul_2Ux2U_4U_4_9_in2 = s_reg_66;
               end
               
            endcase

         end

         // resource: DC_Filter_Mul_2Ux2U_4U_4  instance: DC_Filter_Mul_2Ux2U_4U_4_9
         assign DC_Filter_Mul_2Ux2U_4U_4_9_out1 = {2'b00, DC_Filter_Mul_2Ux2U_4U_4_9_in2}*4'd03;

         // resource: mux_4bx4i0c
         always @(s_reg_67 or s_reg_70 or DC_Filter_Mul_2Ux2U_4U_4_9_out1 or DC_Filter_Add_9Ux1U_9U_4_13_out1 or DC_Filter_Mul_2Ux2U_4U_4_16_out1 or DC_Filter_Add_2Ux1U_2U_4_30_out1 or DC_Filter_Add_1Ux1U_2U_4_32_out1 or gs_ctrl26)
          begin :drive_DC_Filter_Add_4Ux2U_4U_4_10_in2
            case (gs_ctrl26) 

               3'd1:                begin
                  DC_Filter_Add_4Ux2U_4U_4_10_in2 = s_reg_70;
               end
               
               3'd2:                begin
                  case (DC_Filter_Add_1Ux1U_2U_4_32_out1) 

                     2'd2:                      begin
                        /* state17 */
                        case (DC_Filter_Add_2Ux1U_2U_4_30_out1) 

                           2'd3:                            begin
                              DC_Filter_Add_4Ux2U_4U_4_10_in2 = DC_Filter_Mul_2Ux2U_4U_4_9_out1;
                           end
                           
                           default:                            begin
                              DC_Filter_Add_4Ux2U_4U_4_10_in2 = DC_Filter_Mul_2Ux2U_4U_4_16_out1;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        DC_Filter_Add_4Ux2U_4U_4_10_in2 = s_reg_70;
                     end
                     
                  endcase

               end
               
               3'd3:                begin
                  DC_Filter_Add_4Ux2U_4U_4_10_in2 = {2'b00, s_reg_67};
               end
               
               3'd4:                begin
                  /* state70 */
                  case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                     9'd256:                      begin
                        DC_Filter_Add_4Ux2U_4U_4_10_in2 = DC_Filter_Mul_2Ux2U_4U_4_16_out1;
                     end
                     
                     default:                      begin
                        DC_Filter_Add_4Ux2U_4U_4_10_in2 = DC_Filter_Mul_2Ux2U_4U_4_9_out1;
                     end
                     
                  endcase

               end
               
               default:                begin
                  DC_Filter_Add_4Ux2U_4U_4_10_in2 = DC_Filter_Mul_2Ux2U_4U_4_9_out1;
               end
               
            endcase

         end

         // resource: mux_2bx7i3c
         always @(s_reg_67 or DC_Filter_Add_9Ux1U_9U_4_13_out1 or DC_Filter_Add_1Ux1U_2U_4_20_out1 or DC_Filter_Add_2Ux1U_2U_4_30_out1 or DC_Filter_Add_1Ux1U_2U_4_32_out1 or DC_Filter_LessThan_12Ux9U_1U_4_36_out1 or DC_Filter_Add_2Ux1U_2U_4_44_out1 or DC_Filter_Add_2Ux1U_2U_4_66_out1 or DC_Filter_Add_2Ux1U_2U_4_76_out1 or gs_ctrl27)
          begin :drive_DC_Filter_Add_4Ux2U_4U_4_10_in1
            case (gs_ctrl27) 

               3'd1:                begin
                  DC_Filter_Add_4Ux2U_4U_4_10_in1 = {1'b0, s_reg_67[0]};
               end
               
               3'd2:                begin
                  case (DC_Filter_Add_1Ux1U_2U_4_32_out1) 

                     2'd2:                      begin
                        /* state17 */
                        case (DC_Filter_Add_2Ux1U_2U_4_30_out1) 

                           2'd3:                            begin
                              if (DC_Filter_LessThan_12Ux9U_1U_4_36_out1) begin
                                 DC_Filter_Add_4Ux2U_4U_4_10_in1 = 2'd2;
                              end
                              else begin
                                 DC_Filter_Add_4Ux2U_4U_4_10_in1 = 2'd0;
                              end
                           end
                           
                           default:                            begin
                              DC_Filter_Add_4Ux2U_4U_4_10_in1 = DC_Filter_Add_1Ux1U_2U_4_20_out1;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        DC_Filter_Add_4Ux2U_4U_4_10_in1 = DC_Filter_Add_1Ux1U_2U_4_20_out1;
                     end
                     
                  endcase

               end
               
               3'd3:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_44_out1) 

                     2'd3:                      begin
                        case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                           9'd257:                            begin
                              DC_Filter_Add_4Ux2U_4U_4_10_in1 = 2'd0;
                           end
                           
                           default:                            begin
                              DC_Filter_Add_4Ux2U_4U_4_10_in1 = 2'd2;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        DC_Filter_Add_4Ux2U_4U_4_10_in1 = 2'd2;
                     end
                     
                  endcase

               end
               
               3'd4:                begin
                  DC_Filter_Add_4Ux2U_4U_4_10_in1 = 2'd0;
               end
               
               3'd5:                begin
                  DC_Filter_Add_4Ux2U_4U_4_10_in1 = 2'd3;
               end
               
               3'd6:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_66_out1) 

                     2'd3:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_76_out1) 

                           2'd3:                            begin
                              DC_Filter_Add_4Ux2U_4U_4_10_in1 = 2'd0;
                           end
                           
                           default:                            begin
                              DC_Filter_Add_4Ux2U_4U_4_10_in1 = DC_Filter_Add_2Ux1U_2U_4_76_out1;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        DC_Filter_Add_4Ux2U_4U_4_10_in1 = s_reg_67;
                     end
                     
                  endcase

               end
               
               3'd7:                begin
                  /* state70 */
                  case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                     9'd256:                      begin
                        DC_Filter_Add_4Ux2U_4U_4_10_in1 = DC_Filter_Add_1Ux1U_2U_4_20_out1;
                     end
                     
                     default:                      begin
                        DC_Filter_Add_4Ux2U_4U_4_10_in1 = 2'd0;
                     end
                     
                  endcase

               end
               
               default:                begin
                  DC_Filter_Add_4Ux2U_4U_4_10_in1 = s_reg_67;
               end
               
            endcase

         end

         // resource: DC_Filter_Add_4Ux2U_4U_4  instance: DC_Filter_Add_4Ux2U_4U_4_10
         assign DC_Filter_Add_4Ux2U_4U_4_10_out1 = DC_Filter_Add_4Ux2U_4U_4_10_in2 + {2'b00, DC_Filter_Add_4Ux2U_4U_4_10_in1};

         // resource: mux_4bx5i1c
         always @(s_reg_69 or s_reg_70 or DC_Filter_Add_4Ux2U_4U_4_10_out1 or DC_Filter_Add_9Ux1U_9U_4_13_out1 or DC_Filter_Add_2Ux1U_2U_4_39_out1 or gs_ctrl28)
          begin :drive_DC_Filter_Mul_9Ux4U_12U_4_11_in1
            case (gs_ctrl28) 

               3'd1:                begin
                  DC_Filter_Mul_9Ux4U_12U_4_11_in1 = 4'd01;
               end
               
               3'd2:                begin
                  DC_Filter_Mul_9Ux4U_12U_4_11_in1 = {1'b0, DC_Filter_Add_4Ux2U_4U_4_10_out1[2:0]};
               end
               
               3'd3:                begin
                  DC_Filter_Mul_9Ux4U_12U_4_11_in1 = s_reg_70;
               end
               
               3'd4:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_39_out1) 

                     2'd3:                      begin
                        DC_Filter_Mul_9Ux4U_12U_4_11_in1 = DC_Filter_Add_4Ux2U_4U_4_10_out1;
                     end
                     
                     default:                      begin
                        DC_Filter_Mul_9Ux4U_12U_4_11_in1 = {2'b00, DC_Filter_Add_2Ux1U_2U_4_39_out1};
                     end
                     
                  endcase

               end
               
               3'd5:                begin
                  /* state70 */
                  case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                     9'd256:                      begin
                        case (s_reg_69) 

                           12'd0000:                            begin
                              DC_Filter_Mul_9Ux4U_12U_4_11_in1 = 4'd01;
                           end
                           
                           default:                            begin
                              DC_Filter_Mul_9Ux4U_12U_4_11_in1 = DC_Filter_Add_4Ux2U_4U_4_10_out1;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        DC_Filter_Mul_9Ux4U_12U_4_11_in1 = DC_Filter_Add_4Ux2U_4U_4_10_out1;
                     end
                     
                  endcase

               end
               
               default:                begin
                  DC_Filter_Mul_9Ux4U_12U_4_11_in1 = DC_Filter_Add_4Ux2U_4U_4_10_out1;
               end
               
            endcase

         end

         // resource: DC_Filter_Mul_9Ux4U_12U_4  instance: DC_Filter_Mul_9Ux4U_12U_4_11
         assign DC_Filter_Mul_9Ux4U_12U_4_11_out1 = {8'b00000000, DC_Filter_Mul_9Ux4U_12U_4_11_in1}*12'd0258;

         // resource: mux_12bx6i3c
         always @(s_reg_71 or s_reg_72 or DC_Filter_Mul_9Ux4U_12U_4_11_out1 or gs_ctrl29)
          begin :drive_DC_Filter_Add_12Ux9U_12U_4_12_in2
            case (gs_ctrl29) 

               3'd1:                begin
                  DC_Filter_Add_12Ux9U_12U_4_12_in2 = s_reg_72;
               end
               
               3'd2:                begin
                  DC_Filter_Add_12Ux9U_12U_4_12_in2 = s_reg_71;
               end
               
               3'd3:                begin
                  DC_Filter_Add_12Ux9U_12U_4_12_in2 = 12'd0516;
               end
               
               3'd4:                begin
                  DC_Filter_Add_12Ux9U_12U_4_12_in2 = 12'd1290;
               end
               
               3'd5:                begin
                  DC_Filter_Add_12Ux9U_12U_4_12_in2 = 12'd2064;
               end
               
               default:                begin
                  DC_Filter_Add_12Ux9U_12U_4_12_in2 = DC_Filter_Mul_9Ux4U_12U_4_11_out1;
               end
               
            endcase

         end

         // resource: mux_9bx4i1c
         always @(s_reg_68 or DC_Filter_Add_9Ux1U_9U_4_13_out1 or DC_Filter_LessThan_12Ux9U_1U_4_36_out1 or DC_Filter_Add_2Ux1U_2U_4_44_out1 or DC_Filter_Add_8Ux2U_9U_4_62_out1 or gs_ctrl30)
          begin :drive_DC_Filter_Add_12Ux9U_12U_4_12_in1
            case (gs_ctrl30) 

               2'd1:                begin
                  if (DC_Filter_LessThan_12Ux9U_1U_4_36_out1) begin
                     DC_Filter_Add_12Ux9U_12U_4_12_in1 = 9'd001;
                  end
                  else begin
                     DC_Filter_Add_12Ux9U_12U_4_12_in1 = DC_Filter_Add_8Ux2U_9U_4_62_out1;
                  end
               end
               
               2'd2:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_44_out1) 

                     2'd3:                      begin
                        case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                           9'd257:                            begin
                              DC_Filter_Add_12Ux9U_12U_4_12_in1 = DC_Filter_Add_8Ux2U_9U_4_62_out1;
                           end
                           
                           default:                            begin
                              DC_Filter_Add_12Ux9U_12U_4_12_in1 = DC_Filter_Add_9Ux1U_9U_4_13_out1;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        DC_Filter_Add_12Ux9U_12U_4_12_in1 = s_reg_68;
                     end
                     
                  endcase

               end
               
               2'd3:                begin
                  DC_Filter_Add_12Ux9U_12U_4_12_in1 = DC_Filter_Add_8Ux2U_9U_4_62_out1;
               end
               
               default:                begin
                  DC_Filter_Add_12Ux9U_12U_4_12_in1 = s_reg_68;
               end
               
            endcase

         end

         // resource: DC_Filter_Add_12Ux9U_12U_4  instance: DC_Filter_Add_12Ux9U_12U_4_12
         assign DC_Filter_Add_12Ux9U_12U_4_12_out1 = DC_Filter_Add_12Ux9U_12U_4_12_in2 + {3'b000, DC_Filter_Add_12Ux9U_12U_4_12_in1};

         // resource: mux_9bx2i0c
         always @(s_reg_68 or gs_ctrl31)
          begin :drive_DC_Filter_Add_9Ux1U_9U_4_13_in2
            if (gs_ctrl31) begin
               DC_Filter_Add_9Ux1U_9U_4_13_in2 = {1'b0, s_reg_68[7:0]};
            end
            else begin
               DC_Filter_Add_9Ux1U_9U_4_13_in2 = s_reg_68;
            end
         end

         // resource: DC_Filter_Add_9Ux1U_9U_4  instance: DC_Filter_Add_9Ux1U_9U_4_13
         assign DC_Filter_Add_9Ux1U_9U_4_13_out1 = DC_Filter_Add_9Ux1U_9U_4_13_in2 + 9'd001;

         // resource: mux_12bx2i0c
         always @(DC_Filter_Add_12Ux9U_12U_4_12_out1 or gs_ctrl32)
          begin :drive_f1_array_rgb_in1
            if (gs_ctrl32) begin
               f1_array_rgb_in1 = {1'b0, DC_Filter_Add_12Ux9U_12U_4_12_out1[10:0]};
            end
            else begin
               f1_array_rgb_in1 = DC_Filter_Add_12Ux9U_12U_4_12_out1;
            end
         end

         // resource: mux_8bx5i1c
         always @(o_rgb_inside_data[23:8] or i_rgb_data[7:0] or f1_array_rgb_out1 or gs_ctrl33)
          begin :drive_f1_array_rgb_DIN
            case (gs_ctrl33) 

               3'd1:                begin
                  f1_array_rgb_DIN = f1_array_rgb_out1;
               end
               
               3'd2:                begin
                  f1_array_rgb_DIN = i_rgb_data[7:0];
               end
               
               3'd3:                begin
                  f1_array_rgb_DIN = o_rgb_inside_data[15:8];
               end
               
               3'd4:                begin
                  f1_array_rgb_DIN = o_rgb_inside_data[23:16];
               end
               
               default:                begin
                  f1_array_rgb_DIN = 8'd000;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         always @(stall1 or s_reg_71[8:0] or DC_Filter_Add_9Ux1U_9U_4_13_out1 or DC_Filter_Add_2Ux1U_2U_4_30_out1 or DC_Filter_LessThan_12Ux9U_1U_4_31_out1 or DC_Filter_Add_1Ux1U_2U_4_32_out1 or DC_Filter_LessThan_12Ux9U_1U_4_36_out1 or DC_Filter_Add_2Ux1U_2U_4_39_out1 or DC_Filter_Add_2Ux1U_2U_4_44_out1 or DC_Filter_Add_2Ux1U_2U_4_52_out1 or DC_Filter_Add_2Ux1U_2U_4_66_out1 or DC_Filter_Add_2Ux1U_2U_4_76_out1 or DC_Filter_Add_2Ux1U_2U_4_77_out1 or gs_ctrl34)
          begin :drive_f1_array_rgb_CE
            if (stall1) begin
               f1_array_rgb_CE = 1'b0;
            end
            else begin
               case (gs_ctrl34) 

                  4'd01:                   begin
                     f1_array_rgb_CE = 1'b1;
                  end
                  
                  4'd02:                   begin
                     if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1 && (2'd2 == DC_Filter_Add_1Ux1U_2U_4_32_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_30_out1 && !DC_Filter_LessThan_12Ux9U_1U_4_31_out1))) begin
                        if (DC_Filter_LessThan_12Ux9U_1U_4_36_out1) begin
                           f1_array_rgb_CE = 1'b1;
                        end
                        else begin
                           if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_52_out1) begin
                              f1_array_rgb_CE = 1'b1;
                           end
                           else begin
                              f1_array_rgb_CE = 1'b0;
                           end
                        end
                     end
                     else begin
                        f1_array_rgb_CE = 1'b0;
                     end
                  end
                  
                  4'd03:                   begin
                     case (DC_Filter_Add_2Ux1U_2U_4_44_out1) 

                        2'd3:                         begin
                           case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                              9'd257:                               begin
                                 if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_52_out1) begin
                                    f1_array_rgb_CE = 1'b1;
                                 end
                                 else begin
                                    f1_array_rgb_CE = 1'b0;
                                 end
                              end
                              
                              default:                               begin
                                 f1_array_rgb_CE = 1'b1;
                              end
                              
                           endcase

                        end
                        
                        default:                         begin
                           f1_array_rgb_CE = 1'b1;
                        end
                        
                     endcase

                  end
                  
                  4'd04:                   begin
                     if (9'd257 == s_reg_71[8:0] && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_52_out1) begin
                        f1_array_rgb_CE = 1'b1;
                     end
                     else begin
                        f1_array_rgb_CE = 1'b0;
                     end
                  end
                  
                  4'd05:                   begin
                     if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_39_out1 && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_52_out1)) begin
                        f1_array_rgb_CE = 1'b1;
                     end
                     else begin
                        f1_array_rgb_CE = 1'b0;
                     end
                  end
                  
                  4'd06:                   begin
                     if (2'd3 == DC_Filter_Add_2Ux1U_2U_4_52_out1) begin
                        f1_array_rgb_CE = 1'b1;
                     end
                     else begin
                        f1_array_rgb_CE = 1'b0;
                     end
                  end
                  
                  4'd07:                   begin
                     case (DC_Filter_Add_2Ux1U_2U_4_66_out1) 

                        2'd3:                         begin
                           case (DC_Filter_Add_2Ux1U_2U_4_76_out1) 

                              2'd3:                               begin
                                 if (2'd3 != DC_Filter_Add_2Ux1U_2U_4_77_out1) begin
                                    f1_array_rgb_CE = 1'b1;
                                 end
                                 else begin
                                    f1_array_rgb_CE = 1'b0;
                                 end
                              end
                              
                              default:                               begin
                                 f1_array_rgb_CE = 1'b1;
                              end
                              
                           endcase

                        end
                        
                        default:                         begin
                           f1_array_rgb_CE = 1'b1;
                        end
                        
                     endcase

                  end
                  
                  4'd08:                   begin
                     if (9'd256 != DC_Filter_Add_9Ux1U_9U_4_13_out1 && 2'd3 == DC_Filter_Add_2Ux1U_2U_4_52_out1) begin
                        f1_array_rgb_CE = 1'b1;
                     end
                     else begin
                        f1_array_rgb_CE = 1'b0;
                     end
                  end
                  
                  default:                   begin
                     f1_array_rgb_CE = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         always @(stall1 or DC_Filter_Add_9Ux1U_9U_4_13_out1 or DC_Filter_Add_2Ux1U_2U_4_30_out1 or DC_Filter_LessThan_12Ux9U_1U_4_31_out1 or DC_Filter_Add_1Ux1U_2U_4_32_out1 or DC_Filter_LessThan_12Ux9U_1U_4_36_out1 or DC_Filter_Add_2Ux1U_2U_4_44_out1 or gs_ctrl35)
          begin :drive_f1_array_rgb_RW
            if (stall1) begin
               f1_array_rgb_RW = 1'b0;
            end
            else begin
               case (gs_ctrl35) 

                  2'd1:                   begin
                     f1_array_rgb_RW = 1'b1;
                  end
                  
                  2'd2:                   begin
                     if (9'd257 == DC_Filter_Add_9Ux1U_9U_4_13_out1 && (2'd2 == DC_Filter_Add_1Ux1U_2U_4_32_out1 && (2'd3 == DC_Filter_Add_2Ux1U_2U_4_30_out1 && !DC_Filter_LessThan_12Ux9U_1U_4_31_out1))) begin
                        if (DC_Filter_LessThan_12Ux9U_1U_4_36_out1) begin
                           f1_array_rgb_RW = 1'b1;
                        end
                        else begin
                           f1_array_rgb_RW = 1'b0;
                        end
                     end
                     else begin
                        f1_array_rgb_RW = 1'b0;
                     end
                  end
                  
                  2'd3:                   begin
                     case (DC_Filter_Add_2Ux1U_2U_4_44_out1) 

                        2'd3:                         begin
                           case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                              9'd257:                               begin
                                 f1_array_rgb_RW = 1'b0;
                              end
                              
                              default:                               begin
                                 f1_array_rgb_RW = 1'b1;
                              end
                              
                           endcase

                        end
                        
                        default:                         begin
                           f1_array_rgb_RW = 1'b1;
                        end
                        
                     endcase

                  end
                  
                  default:                   begin
                     f1_array_rgb_RW = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_14
         assign DC_Filter_Add_2Ux1U_2U_4_14_out1 = s_reg_66 + 2'd1;

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_15
         assign DC_Filter_Add_2Ux1U_2U_4_15_out1 = s_reg_67 + 2'd1;

         // resource: mux_2bx2i1c
         always @(DC_Filter_Add_2Ux1U_2U_4_30_out1 or gs_ctrl31)
          begin :drive_DC_Filter_Mul_2Ux2U_4U_4_16_in2
            if (gs_ctrl31) begin
               DC_Filter_Mul_2Ux2U_4U_4_16_in2 = 2'd0;
            end
            else begin
               DC_Filter_Mul_2Ux2U_4U_4_16_in2 = DC_Filter_Add_2Ux1U_2U_4_30_out1;
            end
         end

         // resource: DC_Filter_Mul_2Ux2U_4U_4  instance: DC_Filter_Mul_2Ux2U_4U_4_16
         assign DC_Filter_Mul_2Ux2U_4U_4_16_out1 = {2'b00, DC_Filter_Mul_2Ux2U_4U_4_16_in2}*4'd03;

         // resource: mux_2bx2i1c
         always @(DC_Filter_Add_2Ux1U_2U_4_39_out1 or gs_ctrl37)
          begin :drive_DC_Filter_Add_3Ux2U_4U_4_19_in1
            if (gs_ctrl37) begin
               DC_Filter_Add_3Ux2U_4U_4_19_in1 = DC_Filter_Add_2Ux1U_2U_4_39_out1;
            end
            else begin
               DC_Filter_Add_3Ux2U_4U_4_19_in1 = 2'd1;
            end
         end

         // resource: DC_Filter_Add_3Ux2U_4U_4  instance: DC_Filter_Add_3Ux2U_4U_4_19
         assign DC_Filter_Add_3Ux2U_4U_4_19_out1 = {2'b00, DC_Filter_Add_3Ux2U_4U_4_19_in1} + 4'd06;

         // resource: mux_1bx2i1c
         always @(DC_Filter_Add_1Ux1U_2U_4_32_out1 or gs_ctrl31)
          begin :drive_DC_Filter_Add_1Ux1U_2U_4_20_in2
            if (gs_ctrl31) begin
               DC_Filter_Add_1Ux1U_2U_4_20_in2 = 1'b0;
            end
            else begin
               case (DC_Filter_Add_1Ux1U_2U_4_32_out1) 

                  2'd2:                   begin
                     DC_Filter_Add_1Ux1U_2U_4_20_in2 = 1'b0;
                  end
                  
                  default:                   begin
                     DC_Filter_Add_1Ux1U_2U_4_20_in2 = DC_Filter_Add_1Ux1U_2U_4_32_out1[0];
                  end
                  
               endcase

            end
         end

         // resource: DC_Filter_Add_1Ux1U_2U_4  instance: DC_Filter_Add_1Ux1U_2U_4_20
         assign DC_Filter_Add_1Ux1U_2U_4_20_out1 = {1'b0, DC_Filter_Add_1Ux1U_2U_4_20_in2} + 2'd1;

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_30
         assign DC_Filter_Add_2Ux1U_2U_4_30_out1 = s_reg_66 + 2'd1;

         // resource: DC_Filter_LessThan_12Ux9U_1U_4  instance: DC_Filter_LessThan_12Ux9U_1U_4_31
         assign DC_Filter_LessThan_12Ux9U_1U_4_31_out1 = s_reg_69 < 12'd0257;

         // resource: DC_Filter_Add_1Ux1U_2U_4  instance: DC_Filter_Add_1Ux1U_2U_4_32
         assign DC_Filter_Add_1Ux1U_2U_4_32_out1 = {1'b0, s_reg_67[0]} + 2'd1;

         // resource: DC_Filter_LessThan_12Ux9U_1U_4  instance: DC_Filter_LessThan_12Ux9U_1U_4_36
         assign DC_Filter_LessThan_12Ux9U_1U_4_36_out1 = s_reg_69 < 12'd0258;

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_39
         assign DC_Filter_Add_2Ux1U_2U_4_39_out1 = s_reg_67 + 2'd1;

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_44
         assign DC_Filter_Add_2Ux1U_2U_4_44_out1 = s_reg_67 + 2'd1;

         // resource: DC_Filter_Add_12Ux1U_12U_4  instance: DC_Filter_Add_12Ux1U_12U_4_51
         assign DC_Filter_Add_12Ux1U_12U_4_51_out1 = s_reg_69 + 12'd0001;

         // resource: mux_2bx2i1c
         always @(s_reg_73 or gs_ctrl39)
          begin :drive_DC_Filter_Add_2Ux1U_2U_4_52_in2
            if (gs_ctrl39) begin
               DC_Filter_Add_2Ux1U_2U_4_52_in2 = s_reg_73;
            end
            else begin
               DC_Filter_Add_2Ux1U_2U_4_52_in2 = 2'd0;
            end
         end

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_52
         assign DC_Filter_Add_2Ux1U_2U_4_52_out1 = DC_Filter_Add_2Ux1U_2U_4_52_in2 + 2'd1;

         // resource: mux_2bx2i1c
         always @(s_reg_73 or gs_ctrl40)
          begin :drive_DC_Filter_Equal_2Ux2U_1U_4_53_in2
            if (gs_ctrl40) begin
               DC_Filter_Equal_2Ux2U_1U_4_53_in2 = s_reg_73;
            end
            else begin
               DC_Filter_Equal_2Ux2U_1U_4_53_in2 = 2'd0;
            end
         end

         // resource: DC_Filter_Equal_2Ux2U_1U_4  instance: DC_Filter_Equal_2Ux2U_1U_4_53
         assign DC_Filter_Equal_2Ux2U_1U_4_53_out1 = DC_Filter_Equal_2Ux2U_1U_4_53_in2 == 2'd2;

         // resource: DC_Filter_Equal_2Ux1U_1U_4  instance: DC_Filter_Equal_2Ux1U_1U_4_54
         assign DC_Filter_Equal_2Ux1U_1U_4_54_out1 = DC_Filter_Add_2Ux1U_2U_4_52_in2 == 2'd1;

         // resource: DC_Filter_OrReduction_2U_1U_4  instance: DC_Filter_OrReduction_2U_1U_4_55
         assign DC_Filter_OrReduction_2U_1U_4_55_out1 = (|DC_Filter_Add_2Ux1U_2U_4_52_in2);

         // resource: DC_Filter_N_Mux_12_2_0_4
         always @(s_reg_63 or DC_Filter_Equal_2Ux2U_1U_4_53_out1)
          begin :DC_Filter_N_Mux_12_2_0_4_56
            if (DC_Filter_Equal_2Ux2U_1U_4_53_out1) begin
               DC_Filter_N_Mux_12_2_0_4_56_out1 = 12'd0000;
            end
            else begin
               DC_Filter_N_Mux_12_2_0_4_56_out1 = s_reg_63;
            end
         end

         // resource: DC_Filter_N_Mux_12_2_0_4
         always @(s_reg_64 or DC_Filter_Equal_2Ux1U_1U_4_54_out1)
          begin :DC_Filter_N_Mux_12_2_0_4_57
            if (DC_Filter_Equal_2Ux1U_1U_4_54_out1) begin
               DC_Filter_N_Mux_12_2_0_4_57_out1 = 12'd0000;
            end
            else begin
               DC_Filter_N_Mux_12_2_0_4_57_out1 = s_reg_64;
            end
         end

         // resource: DC_Filter_N_Mux_12_2_1_4
         always @(s_reg_65 or DC_Filter_OrReduction_2U_1U_4_55_out1)
          begin :DC_Filter_N_Mux_12_2_1_4_58
            if (DC_Filter_OrReduction_2U_1U_4_55_out1) begin
               DC_Filter_N_Mux_12_2_1_4_58_out1 = s_reg_65;
            end
            else begin
               DC_Filter_N_Mux_12_2_1_4_58_out1 = 12'd0000;
            end
         end

         // resource: mux_2bx3i1c
         always @(s_reg_67 or DC_Filter_Add_2Ux1U_2U_4_66_out1 or DC_Filter_Add_2Ux1U_2U_4_76_out1 or gs_ctrl43)
          begin :drive_DC_Filter_Mul_2Ux2U_4U_4_61_in2
            if (gs_ctrl43) begin
               case (DC_Filter_Add_2Ux1U_2U_4_66_out1) 

                  2'd3:                   begin
                     case (DC_Filter_Add_2Ux1U_2U_4_76_out1) 

                        2'd3:                         begin
                           DC_Filter_Mul_2Ux2U_4U_4_61_in2 = 2'd0;
                        end
                        
                        default:                         begin
                           DC_Filter_Mul_2Ux2U_4U_4_61_in2 = DC_Filter_Add_2Ux1U_2U_4_76_out1;
                        end
                        
                     endcase

                  end
                  
                  default:                   begin
                     DC_Filter_Mul_2Ux2U_4U_4_61_in2 = s_reg_67;
                  end
                  
               endcase

            end
            else begin
               DC_Filter_Mul_2Ux2U_4U_4_61_in2 = 2'd0;
            end
         end

         // resource: DC_Filter_Mul_2Ux2U_4U_4  instance: DC_Filter_Mul_2Ux2U_4U_4_61
         assign DC_Filter_Mul_2Ux2U_4U_4_61_out1 = {2'b00, DC_Filter_Mul_2Ux2U_4U_4_61_in2}*4'd03;

         // resource: mux_8bx3i1c
         always @(s_reg_68[7:0] or DC_Filter_Add_9Ux1U_9U_4_13_out1[7:0] or gs_ctrl44)
          begin :drive_DC_Filter_Add_8Ux2U_9U_4_62_in2
            case (gs_ctrl44) 

               2'd1:                begin
                  DC_Filter_Add_8Ux2U_9U_4_62_in2 = s_reg_68[7:0];
               end
               
               2'd2:                begin
                  DC_Filter_Add_8Ux2U_9U_4_62_in2 = DC_Filter_Add_9Ux1U_9U_4_13_out1[7:0];
               end
               
               default:                begin
                  DC_Filter_Add_8Ux2U_9U_4_62_in2 = 8'd000;
               end
               
            endcase

         end

         // resource: mux_2bx3i1c
         always @(s_reg_66 or DC_Filter_Add_2Ux1U_2U_4_66_out1 or DC_Filter_Add_2Ux1U_2U_4_76_out1 or DC_Filter_Add_2Ux1U_2U_4_77_out1 or gs_ctrl45)
          begin :drive_DC_Filter_Add_8Ux2U_9U_4_62_in1
            case (gs_ctrl45) 

               2'd1:                begin
                  DC_Filter_Add_8Ux2U_9U_4_62_in1 = s_reg_66;
               end
               
               2'd2:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_66_out1) 

                     2'd3:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_76_out1) 

                           2'd3:                            begin
                              DC_Filter_Add_8Ux2U_9U_4_62_in1 = DC_Filter_Add_2Ux1U_2U_4_77_out1;
                           end
                           
                           default:                            begin
                              DC_Filter_Add_8Ux2U_9U_4_62_in1 = s_reg_66;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        DC_Filter_Add_8Ux2U_9U_4_62_in1 = s_reg_66;
                     end
                     
                  endcase

               end
               
               default:                begin
                  DC_Filter_Add_8Ux2U_9U_4_62_in1 = 2'd0;
               end
               
            endcase

         end

         // resource: DC_Filter_Add_8Ux2U_9U_4  instance: DC_Filter_Add_8Ux2U_9U_4_62
         assign DC_Filter_Add_8Ux2U_9U_4_62_out1 = {1'b0, DC_Filter_Add_8Ux2U_9U_4_62_in2} + {7'b0000000, DC_Filter_Add_8Ux2U_9U_4_62_in1};

         // resource: DC_Filter_Add_4Ux2U_4U_4  instance: DC_Filter_Add_4Ux2U_4U_4_64
         assign DC_Filter_Add_4Ux2U_4U_4_64_out1 = DC_Filter_Mul_2Ux2U_4U_4_61_out1 + {2'b00, DC_Filter_Add_8Ux2U_9U_4_62_in1};

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_66
         assign DC_Filter_Add_2Ux1U_2U_4_66_out1 = s_reg_73 + 2'd1;

         // resource: DC_Filter_OrReduction_2U_1U_4  instance: DC_Filter_OrReduction_2U_1U_4_67
         assign DC_Filter_OrReduction_2U_1U_4_67_out1 = (|s_reg_73);

         // resource: DC_Filter_N_Mux_12_3_2_4
         always @(s_reg_63 or s_reg_64 or s_reg_65 or s_reg_73)
          begin :DC_Filter_N_Mux_12_3_2_4_68
            case (s_reg_73) 

               2'd0:                begin
                  DC_Filter_N_Mux_12_3_2_4_68_out1 = s_reg_65;
               end
               
               2'd1:                begin
                  DC_Filter_N_Mux_12_3_2_4_68_out1 = s_reg_64;
               end
               
               default:                begin
                  DC_Filter_N_Mux_12_3_2_4_68_out1 = s_reg_63;
               end
               
            endcase

         end

         // resource: DC_Filter_Equal_2Ux1U_1U_4  instance: DC_Filter_Equal_2Ux1U_1U_4_70
         assign DC_Filter_Equal_2Ux1U_1U_4_70_out1 = s_reg_73 == 2'd1;

         // instance: drive_mask1_in1
         assign mask1_in1 = DC_Filter_Add_4Ux2U_4U_4_64_out1;

         // resource: DC_Filter_Mul_8Ux4U_12U_4  instance: DC_Filter_Mul_8Ux4U_12U_4_71
         assign DC_Filter_Mul_8Ux4U_12U_4_71_out1 = {4'b0000, f1_array_rgb_out1}*{8'b00000000, mask1_out1};

         // resource: DC_Filter_Add_12Ux12U_12U_4  instance: DC_Filter_Add_12Ux12U_12U_4_72
         assign DC_Filter_Add_12Ux12U_12U_4_72_out1 = DC_Filter_N_Mux_12_3_2_4_68_out1 + DC_Filter_Mul_8Ux4U_12U_4_71_out1;

         // resource: DC_Filter_N_Mux_12_2_3_4
         always @(s_reg_63 or DC_Filter_Equal_2Ux2U_1U_4_53_out1 or DC_Filter_Add_12Ux12U_12U_4_72_out1)
          begin :DC_Filter_N_Mux_12_2_3_4_73
            if (DC_Filter_Equal_2Ux2U_1U_4_53_out1) begin
               DC_Filter_N_Mux_12_2_3_4_73_out1 = DC_Filter_Add_12Ux12U_12U_4_72_out1;
            end
            else begin
               DC_Filter_N_Mux_12_2_3_4_73_out1 = s_reg_63;
            end
         end

         // resource: DC_Filter_N_Mux_12_2_3_4
         always @(s_reg_64 or DC_Filter_Equal_2Ux1U_1U_4_70_out1 or DC_Filter_Add_12Ux12U_12U_4_72_out1)
          begin :DC_Filter_N_Mux_12_2_3_4_74
            if (DC_Filter_Equal_2Ux1U_1U_4_70_out1) begin
               DC_Filter_N_Mux_12_2_3_4_74_out1 = DC_Filter_Add_12Ux12U_12U_4_72_out1;
            end
            else begin
               DC_Filter_N_Mux_12_2_3_4_74_out1 = s_reg_64;
            end
         end

         // resource: DC_Filter_N_Mux_12_2_3_4
         always @(s_reg_65 or DC_Filter_OrReduction_2U_1U_4_67_out1 or DC_Filter_Add_12Ux12U_12U_4_72_out1)
          begin :DC_Filter_N_Mux_12_2_3_4_75
            if (DC_Filter_OrReduction_2U_1U_4_67_out1) begin
               DC_Filter_N_Mux_12_2_3_4_75_out1 = s_reg_65;
            end
            else begin
               DC_Filter_N_Mux_12_2_3_4_75_out1 = DC_Filter_Add_12Ux12U_12U_4_72_out1;
            end
         end

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_76
         assign DC_Filter_Add_2Ux1U_2U_4_76_out1 = s_reg_67 + 2'd1;

         // resource: DC_Filter_Add_2Ux1U_2U_4  instance: DC_Filter_Add_2Ux1U_2U_4_77
         assign DC_Filter_Add_2Ux1U_2U_4_77_out1 = s_reg_66 + 2'd1;

         // resource: regr_en_sc_5
         always @(posedge i_clk)
          begin :drive_global_state1
            if (i_rst == 1'b0) begin
               global_state1 <= 5'd00;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     global_state1 <= global_state1_next;
                  end
                  
               endcase

            end
         end

         // resource: mux_5bx8i7c
         always @(s_reg_69 or s_reg_71[8:0] or DC_Filter_Add_9Ux1U_9U_4_13_out1 or DC_Filter_Add_2Ux1U_2U_4_14_out1 or DC_Filter_Add_2Ux1U_2U_4_15_out1 or DC_Filter_Add_2Ux1U_2U_4_30_out1 or DC_Filter_LessThan_12Ux9U_1U_4_31_out1 or DC_Filter_Add_1Ux1U_2U_4_32_out1 or DC_Filter_LessThan_12Ux9U_1U_4_36_out1 or DC_Filter_Add_2Ux1U_2U_4_39_out1 or DC_Filter_Add_2Ux1U_2U_4_44_out1 or DC_Filter_Add_2Ux1U_2U_4_52_out1 or DC_Filter_Add_2Ux1U_2U_4_66_out1 or DC_Filter_Add_2Ux1U_2U_4_76_out1 or 
DC_Filter_Add_2Ux1U_2U_4_77_out1
          or global_state1)
          begin :drive_global_state1_next
            case (global_state1) 

               5'd01:                begin
                  case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                     9'd258:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_15_out1) 

                           2'd3:                            begin
                              /* state6 */
                              case (DC_Filter_Add_2Ux1U_2U_4_14_out1) 

                                 2'd3:                                  begin
                                    global_state1_next = 5'd10;
                                 end
                                 
                                 default:                                  begin
                                    global_state1_next = 5'd00;
                                 end
                                 
                              endcase

                           end
                           
                           default:                            begin
                              global_state1_next = 5'd00;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state1_next = 5'd00;
                     end
                     
                  endcase

               end
               
               5'd04:                begin
                  case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                     9'd257:                      begin
                        case (DC_Filter_Add_1Ux1U_2U_4_32_out1) 

                           2'd2:                            begin
                              /* state17 */
                              case (DC_Filter_Add_2Ux1U_2U_4_30_out1) 

                                 2'd3:                                  begin
                                    if (DC_Filter_LessThan_12Ux9U_1U_4_31_out1) begin
                                       global_state1_next = 5'd06;
                                    end
                                    else begin
                                       if (DC_Filter_LessThan_12Ux9U_1U_4_36_out1) begin
                                          global_state1_next = global_state1 + 5'd01;
                                       end
                                       else begin
                                          case (DC_Filter_Add_2Ux1U_2U_4_52_out1) 

                                             2'd3:                                              begin
                                                global_state1_next = 5'd15;
                                             end
                                             
                                             default:                                              begin
                                                global_state1_next = 5'd14;
                                             end
                                             
                                          endcase

                                       end
                                    end
                                 end
                                 
                                 default:                                  begin
                                    global_state1_next = 5'd02;
                                 end
                                 
                              endcase

                           end
                           
                           default:                            begin
                              global_state1_next = 5'd02;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state1_next = 5'd02;
                     end
                     
                  endcase

               end
               
               5'd05:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_44_out1) 

                     2'd3:                      begin
                        case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                           9'd257:                            begin
                              case (DC_Filter_Add_2Ux1U_2U_4_52_out1) 

                                 2'd3:                                  begin
                                    global_state1_next = 5'd15;
                                 end
                                 
                                 default:                                  begin
                                    global_state1_next = 5'd14;
                                 end
                                 
                              endcase

                           end
                           
                           default:                            begin
                              global_state1_next = 5'd05;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state1_next = 5'd05;
                     end
                     
                  endcase

               end
               
               5'd09:                begin
                  case (s_reg_71[8:0]) 

                     9'd257:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_52_out1) 

                           2'd3:                            begin
                              global_state1_next = 5'd15;
                           end
                           
                           default:                            begin
                              global_state1_next = 5'd14;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state1_next = 5'd06;
                     end
                     
                  endcase

               end
               
               5'd13:                begin
                  case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                     9'd257:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_39_out1) 

                           2'd3:                            begin
                              case (DC_Filter_Add_2Ux1U_2U_4_52_out1) 

                                 2'd3:                                  begin
                                    global_state1_next = 5'd15;
                                 end
                                 
                                 default:                                  begin
                                    global_state1_next = global_state1 + 5'd01;
                                 end
                                 
                              endcase

                           end
                           
                           default:                            begin
                              global_state1_next = 5'd10;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state1_next = 5'd10;
                     end
                     
                  endcase

               end
               
               5'd14:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_52_out1) 

                     2'd3:                      begin
                        global_state1_next = global_state1 + 5'd01;
                     end
                     
                     default:                      begin
                        global_state1_next = 5'd14;
                     end
                     
                  endcase

               end
               
               5'd15:                begin
                  case (DC_Filter_Add_2Ux1U_2U_4_66_out1) 

                     2'd3:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_76_out1) 

                           2'd3:                            begin
                              case (DC_Filter_Add_2Ux1U_2U_4_77_out1) 

                                 2'd3:                                  begin
                                    global_state1_next = global_state1 + 5'd01;
                                 end
                                 
                                 default:                                  begin
                                    global_state1_next = 5'd15;
                                 end
                                 
                              endcase

                           end
                           
                           default:                            begin
                              global_state1_next = 5'd15;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state1_next = 5'd15;
                     end
                     
                  endcase

               end
               
               5'd16:                begin
                  /* state70 */
                  case (DC_Filter_Add_9Ux1U_9U_4_13_out1) 

                     9'd256:                      begin
                        case (s_reg_69) 

                           12'd0000:                            begin
                              global_state1_next = 5'd10;
                           end
                           
                           default:                            begin
                              global_state1_next = 5'd02;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        case (DC_Filter_Add_2Ux1U_2U_4_52_out1) 

                           2'd3:                            begin
                              global_state1_next = 5'd15;
                           end
                           
                           default:                            begin
                              global_state1_next = 5'd14;
                           end
                           
                        endcase

                     end
                     
                  endcase

               end
               
               default:                begin
                  global_state1_next = global_state1 + 5'd01;
               end
               
            endcase

         end

         // resource: mux_2bx4i4c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl25
            if (i_rst == 1'b0) begin
               gs_ctrl25 <= 2'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd04, 5'd09, 5'd13, 5'd14, 5'd16:                         begin
                           gs_ctrl25 <= 2'd1;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl25 <= 2'd2;
                        end
                        
                        5'd15:                         begin
                           gs_ctrl25 <= 2'd3;
                        end
                        
                        default:                         begin
                           gs_ctrl25 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl26
            if (i_rst == 1'b0) begin
               gs_ctrl26 <= 3'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd02:                         begin
                           gs_ctrl26 <= 3'd1;
                        end
                        
                        5'd04:                         begin
                           gs_ctrl26 <= 3'd2;
                        end
                        
                        5'd10:                         begin
                           gs_ctrl26 <= 3'd3;
                        end
                        
                        5'd16:                         begin
                           gs_ctrl26 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl26 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx8i8c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl27
            if (i_rst == 1'b0) begin
               gs_ctrl27 <= 3'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd02:                         begin
                           gs_ctrl27 <= 3'd1;
                        end
                        
                        5'd04:                         begin
                           gs_ctrl27 <= 3'd2;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl27 <= 3'd3;
                        end
                        
                        5'd09, 5'd13, 5'd14:                         begin
                           gs_ctrl27 <= 3'd4;
                        end
                        
                        5'd10:                         begin
                           gs_ctrl27 <= 3'd5;
                        end
                        
                        5'd15:                         begin
                           gs_ctrl27 <= 3'd6;
                        end
                        
                        5'd16:                         begin
                           gs_ctrl27 <= 3'd7;
                        end
                        
                        default:                         begin
                           gs_ctrl27 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx6i6c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl28
            if (i_rst == 1'b0) begin
               gs_ctrl28 <= 3'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd01:                         begin
                           gs_ctrl28 <= 3'd1;
                        end
                        
                        5'd10:                         begin
                           gs_ctrl28 <= 3'd2;
                        end
                        
                        5'd11:                         begin
                           gs_ctrl28 <= 3'd3;
                        end
                        
                        5'd13:                         begin
                           gs_ctrl28 <= 3'd4;
                        end
                        
                        5'd16:                         begin
                           gs_ctrl28 <= 3'd5;
                        end
                        
                        default:                         begin
                           gs_ctrl28 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx6i6c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl29
            if (i_rst == 1'b0) begin
               gs_ctrl29 <= 3'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd02, 5'd11, 5'd12:                         begin
                           gs_ctrl29 <= 3'd1;
                        end
                        
                        5'd03, 5'd10:                         begin
                           gs_ctrl29 <= 3'd2;
                        end
                        
                        5'd06:                         begin
                           gs_ctrl29 <= 3'd3;
                        end
                        
                        5'd07:                         begin
                           gs_ctrl29 <= 3'd4;
                        end
                        
                        5'd08:                         begin
                           gs_ctrl29 <= 3'd5;
                        end
                        
                        default:                         begin
                           gs_ctrl29 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i4c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl30
            if (i_rst == 1'b0) begin
               gs_ctrl30 <= 2'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd04:                         begin
                           gs_ctrl30 <= 2'd1;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl30 <= 2'd2;
                        end
                        
                        5'd09, 5'd13, 5'd14, 5'd15, 5'd16:                         begin
                           gs_ctrl30 <= 2'd3;
                        end
                        
                        default:                         begin
                           gs_ctrl30 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl31
            if (i_rst == 1'b0) begin
               gs_ctrl31 <= 1'b0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd16:                         begin
                           gs_ctrl31 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl31 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl32
            if (i_rst == 1'b0) begin
               gs_ctrl32 <= 1'b0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd06:                         begin
                           gs_ctrl32 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl32 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl33
            if (i_rst == 1'b0) begin
               gs_ctrl33 <= 3'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd03:                         begin
                           gs_ctrl33 <= 3'd1;
                        end
                        
                        5'd06, 5'd10:                         begin
                           gs_ctrl33 <= 3'd2;
                        end
                        
                        5'd07, 5'd11:                         begin
                           gs_ctrl33 <= 3'd3;
                        end
                        
                        5'd08, 5'd12:                         begin
                           gs_ctrl33 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl33 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_4bx9i9c
         // resource: regr_en_ss_sc_4
         always @(posedge i_clk)
          begin :drive_gs_ctrl34
            if (i_rst == 1'b0) begin
               gs_ctrl34 <= 4'd01;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd00, 5'd02, 5'd03, 5'd06, 5'd07, 5'd08, 5'd10, 5'd11, 5'd12:                         begin
                           gs_ctrl34 <= 4'd01;
                        end
                        
                        5'd04:                         begin
                           gs_ctrl34 <= 4'd02;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl34 <= 4'd03;
                        end
                        
                        5'd09:                         begin
                           gs_ctrl34 <= 4'd04;
                        end
                        
                        5'd13:                         begin
                           gs_ctrl34 <= 4'd05;
                        end
                        
                        5'd14:                         begin
                           gs_ctrl34 <= 4'd06;
                        end
                        
                        5'd15:                         begin
                           gs_ctrl34 <= 4'd07;
                        end
                        
                        5'd16:                         begin
                           gs_ctrl34 <= 4'd08;
                        end
                        
                        default:                         begin
                           gs_ctrl34 <= 4'd00;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i4c
         // resource: regr_en_ss_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl35
            if (i_rst == 1'b0) begin
               gs_ctrl35 <= 2'd1;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd00, 5'd03, 5'd06, 5'd07, 5'd08, 5'd10, 5'd11, 5'd12:                         begin
                           gs_ctrl35 <= 2'd1;
                        end
                        
                        5'd04:                         begin
                           gs_ctrl35 <= 2'd2;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl35 <= 2'd3;
                        end
                        
                        default:                         begin
                           gs_ctrl35 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl37
            if (i_rst == 1'b0) begin
               gs_ctrl37 <= 1'b0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd13:                         begin
                           gs_ctrl37 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl37 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl39
            if (i_rst == 1'b0) begin
               gs_ctrl39 <= 1'b0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd14:                         begin
                           gs_ctrl39 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl39 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl40
            if (i_rst == 1'b0) begin
               gs_ctrl40 <= 1'b0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd14, 5'd15:                         begin
                           gs_ctrl40 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl40 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl43
            if (i_rst == 1'b0) begin
               gs_ctrl43 <= 1'b0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd15:                         begin
                           gs_ctrl43 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl43 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl44
            if (i_rst == 1'b0) begin
               gs_ctrl44 <= 2'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd14, 5'd15:                         begin
                           gs_ctrl44 <= 2'd1;
                        end
                        
                        5'd16:                         begin
                           gs_ctrl44 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl44 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl45
            if (i_rst == 1'b0) begin
               gs_ctrl45 <= 2'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd14:                         begin
                           gs_ctrl45 <= 2'd1;
                        end
                        
                        5'd15:                         begin
                           gs_ctrl45 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl45 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // instance: drive_i_rgb_busy
         assign i_rgb_busy = DC_Filter_gen_busy_r_4_155_out1[2];

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_155
         assign DC_Filter_gen_busy_r_4_155_out1 = {DC_Filter_gen_busy_r_4_155_gnew_req_i0, {DC_Filter_gen_busy_r_4_155_gdiv_i1, DC_Filter_gen_busy_r_4_155_gen_busy_0_i_rgb_m_data_is_invalid_next}};

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_155
         assign DC_Filter_gen_busy_r_4_155_gen_busy_0_i_rgb_m_data_is_invalid_next = ~DC_Filter_gen_busy_r_4_155_gdiv_i1;

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_155
         assign DC_Filter_gen_busy_r_4_155_gdiv_i1 = i_rgb_vld & !DC_Filter_gen_busy_r_4_155_gnew_req_i0;

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_155
         assign DC_Filter_gen_busy_r_4_155_gnew_req_i0 = i_rgb_m_busy_req_0 & (i_rgb_m_unvalidated_req | i_rgb_vld);

         // resource: regr_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_m_unvalidated_req
            if (i_rst == 1'b0) begin
               i_rgb_m_unvalidated_req <= 1'd1;
            end
            else begin
               i_rgb_m_unvalidated_req <= DC_Filter_N_Muxb_1_2_4_4_7_out1;
            end
         end

         // resource: DC_Filter_N_Muxb_1_2_4_4
         always @(i_rgb_vld or i_rgb_m_busy_req_0 or i_rgb_m_unvalidated_req)
          begin :DC_Filter_N_Muxb_1_2_4_4_7
            if (i_rgb_m_busy_req_0) begin
               DC_Filter_N_Muxb_1_2_4_4_7_out1 = i_rgb_m_unvalidated_req;
            end
            else begin
               DC_Filter_N_Muxb_1_2_4_4_7_out1 = i_rgb_vld;
            end
         end

         // instance: drive_o_result_vld
         assign o_result_vld = DC_Filter_Or_1Ux1U_1U_4_2_out1;

         // resource: DC_Filter_Or_1Ux1U_1U_4  instance: DC_Filter_Or_1Ux1U_1U_4_2
         assign DC_Filter_Or_1Ux1U_1U_4_2_out1 = o_result_m_unacked_req | DC_Filter_Xor_1Ux1U_1U_1_1_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_unacked_req
            if (i_rst == 1'b0) begin
               o_result_m_unacked_req <= 1'd0;
            end
            else begin
               o_result_m_unacked_req <= DC_Filter_And_1Ux1U_1U_4_81_out1;
            end
         end

         // resource: DC_Filter_And_1Ux1U_1U_4  instance: DC_Filter_And_1Ux1U_1U_4_81
         assign DC_Filter_And_1Ux1U_1U_4_81_out1 = o_result_busy & o_result_vld;

         // resource: DC_Filter_Xor_1Ux1U_1U_1  instance: DC_Filter_Xor_1Ux1U_1U_1_1
         assign DC_Filter_Xor_1Ux1U_1U_1_1_out1 = o_result_m_req_m_trig_req ^ o_result_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_result_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_result_m_req_m_prev_trig_req <= o_result_m_req_m_trig_req;
            end
         end

         // resource: DC_Filter_Not_1U_1U_1  instance: DC_Filter_Not_1U_1U_1_3
         assign DC_Filter_Not_1U_1U_1_3_out1 = !o_result_m_req_m_trig_req;

         // instance: drive_i_rgb_inside_busy
         assign i_rgb_inside_busy = DC_Filter_gen_busy_r_4_156_out1[2];

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_156
         assign DC_Filter_gen_busy_r_4_156_out1 = {DC_Filter_gen_busy_r_4_156_gnew_req_i0, {DC_Filter_gen_busy_r_4_156_gdiv_i1, DC_Filter_gen_busy_r_4_156_gen_busy_0_i_rgb_m_data_is_invalid_next}};

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_156
         assign DC_Filter_gen_busy_r_4_156_gen_busy_0_i_rgb_m_data_is_invalid_next = ~DC_Filter_gen_busy_r_4_156_gdiv_i1;

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_156
         assign DC_Filter_gen_busy_r_4_156_gdiv_i1 = i_rgb_inside_vld & !DC_Filter_gen_busy_r_4_156_gnew_req_i0;

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_156
         assign DC_Filter_gen_busy_r_4_156_gnew_req_i0 = i_rgb_inside_m_busy_req_0 & (i_rgb_inside_m_unvalidated_req | i_rgb_inside_vld);

         // resource: regr_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_inside_m_unvalidated_req
            if (i_rst == 1'b0) begin
               i_rgb_inside_m_unvalidated_req <= 1'd1;
            end
            else begin
               i_rgb_inside_m_unvalidated_req <= DC_Filter_N_Muxb_1_2_4_4_82_out1;
            end
         end

         // resource: DC_Filter_N_Muxb_1_2_4_4
         always @(i_rgb_inside_vld or i_rgb_inside_m_busy_req_0 or i_rgb_inside_m_unvalidated_req)
          begin :DC_Filter_N_Muxb_1_2_4_4_82
            if (i_rgb_inside_m_busy_req_0) begin
               DC_Filter_N_Muxb_1_2_4_4_82_out1 = i_rgb_inside_m_unvalidated_req;
            end
            else begin
               DC_Filter_N_Muxb_1_2_4_4_82_out1 = i_rgb_inside_vld;
            end
         end

         // instance: drive_o_rgb_inside_vld
         assign o_rgb_inside_vld = DC_Filter_Or_1Ux1U_1U_4_5_out1;

         // resource: DC_Filter_Or_1Ux1U_1U_4  instance: DC_Filter_Or_1Ux1U_1U_4_5
         assign DC_Filter_Or_1Ux1U_1U_4_5_out1 = o_rgb_inside_m_unacked_req | DC_Filter_Xor_1Ux1U_1U_1_4_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_rgb_inside_m_unacked_req
            if (i_rst == 1'b0) begin
               o_rgb_inside_m_unacked_req <= 1'd0;
            end
            else begin
               o_rgb_inside_m_unacked_req <= DC_Filter_And_1Ux1U_1U_4_79_out1;
            end
         end

         // resource: DC_Filter_And_1Ux1U_1U_4  instance: DC_Filter_And_1Ux1U_1U_4_79
         assign DC_Filter_And_1Ux1U_1U_4_79_out1 = o_rgb_inside_busy & o_rgb_inside_vld;

         // resource: DC_Filter_Xor_1Ux1U_1U_1  instance: DC_Filter_Xor_1Ux1U_1U_1_4
         assign DC_Filter_Xor_1Ux1U_1U_1_4_out1 = o_rgb_inside_m_req_m_trig_req ^ o_rgb_inside_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_rgb_inside_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_rgb_inside_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_rgb_inside_m_req_m_prev_trig_req <= o_rgb_inside_m_req_m_trig_req;
            end
         end

         // resource: DC_Filter_Not_1U_1U_1  instance: DC_Filter_Not_1U_1U_1_6
         assign DC_Filter_Not_1U_1U_1_6_out1 = !o_rgb_inside_m_req_m_trig_req;


endmodule

