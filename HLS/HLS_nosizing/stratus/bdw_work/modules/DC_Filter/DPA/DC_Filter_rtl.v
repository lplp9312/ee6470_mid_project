// Generated by stratus_hls 19.12-s100  (91710.131054)
// Tue May  4 17:09:57 2021
// from ../DC_Filter.cpp

`timescale 1ps / 1ps

      
module DC_Filter(i_clk, i_rst, i_rgb_busy, i_rgb_vld, i_rgb_data, o_result_busy, o_result_vld, o_result_data, i_rgb_inside_busy, i_rgb_inside_vld, i_rgb_inside_data, o_rgb_inside_busy, o_rgb_inside_vld, o_rgb_inside_data);

      input i_clk;
      input i_rst;
      input i_rgb_vld;
      input [23:0] i_rgb_data;
      input o_result_busy;
      input i_rgb_inside_vld;
      input [23:0] i_rgb_inside_data;
      input o_rgb_inside_busy;
      output i_rgb_busy;
      output o_result_vld;
      output [23:0] o_result_data;
      reg [23:0] o_result_data;
      output i_rgb_inside_busy;
      output o_rgb_inside_vld;
      output [23:0] o_rgb_inside_data;
      reg [23:0] o_rgb_inside_data;
      reg o_rgb_inside_m_req_m_prev_trig_req;
      reg o_rgb_inside_m_unacked_req;
      wire DC_Filter_Xor_1Ux1U_1U_1_4_out1;
      wire DC_Filter_Or_1Ux1U_1U_4_5_out1;
      reg DC_Filter_N_Muxb_1_2_32_4_65_out1;
      reg i_rgb_inside_m_unvalidated_req;
      wire DC_Filter_gen_busy_r_4_122_gnew_req_i0;
      wire DC_Filter_gen_busy_r_4_122_gdiv_i1;
      wire DC_Filter_gen_busy_r_4_122_gen_busy_0_i_rgb_m_data_is_invalid_next;
      reg o_result_m_req_m_prev_trig_req;
      reg o_result_m_unacked_req;
      wire DC_Filter_Xor_1Ux1U_1U_1_1_out1;
      wire DC_Filter_Or_1Ux1U_1U_4_2_out1;
      reg DC_Filter_N_Muxb_1_2_32_4_7_out1;
      reg i_rgb_m_unvalidated_req;
      wire DC_Filter_gen_busy_r_4_121_gnew_req_i0;
      wire DC_Filter_gen_busy_r_4_121_gdiv_i1;
      wire DC_Filter_gen_busy_r_4_121_gen_busy_0_i_rgb_m_data_is_invalid_next;
      reg[4:0] global_state1_next;
      /*signed*/wire[31:0] DC_Filter_Add_32Sx29S_32S_4_56_out1;
      reg[31:0] DC_Filter_N_Mux_32_3_43_4_55_out1;
      wire DC_Filter_Eqi2u2_4_54_out1;
      /*signed*/wire[27:0] DC_Filter_Add_28Sx1U_29S_4_50_in2;
      wire DC_Filter_And_1Ux1U_1U_4_49_out1;
      wire DC_Filter_And_1Ux1U_1U_4_49_in1;
      wire DC_Filter_OrReduction_4U_1U_4_48_out1;
      wire[31:0] DC_Filter_Mul_32Ux32U_32U_4_47_out1;
      wire[11:0] DC_Filter_Mul_12U_3_4_45_out1;
      /*signed*/wire[8:0] DC_Filter_Add_9Sx2U_10S_4_44_in2;
      reg[1:0] DC_Filter_Add2u2Mul2i3u2_4_41_in1;
      reg[1:0] gs_ctrl31;
      reg[1:0] DC_Filter_Add2u2Mul2i3u2_4_41_in2;
      reg[1:0] gs_ctrl30;
      wire DC_Filter_OrReduction_2U_1U_4_36_out1;
      wire DC_Filter_Eqi1u2_4_35_out1;
      wire DC_Filter_Eqi2u2_4_34_out1;
      reg[1:0] DC_Filter_Eqi2u2_4_34_in1;
      reg gs_ctrl27;
      reg[8:0] DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in1;
      reg DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in2;
      reg gs_ctrl25;
      reg[1:0] DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in3;
      reg[1:0] gs_ctrl24;
      reg[2:0] gs_ctrl23;
      reg[2:0] gs_ctrl22;
      reg[2:0] gs_ctrl21;
      wire[11:0] DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_out1;
      wire[11:0] DC_Filter_Add2u9Mul2i258u2_4_16_out1;
      wire[11:0] DC_Filter_Add2u9Mul2i258Add2i3u2_4_21_out1;
      wire[11:0] DC_Filter_Add2u9Mul2i258Add2i6u2_4_23_out1;
      wire[10:0] DC_Filter_gen000003_4_28_out1;
      wire[11:0] DC_Filter_gen000001_4_30_out1;
      wire[11:0] DC_Filter_Add2iLLu9_4_32_out1;
      /*signed*/wire[12:0] DC_Filter_Add_13Sx10U_13S_4_46_out1;
      reg[3:0] gs_ctrl20;
      /*signed*/reg[31:0] DC_Filter_Add2i1s32_4_10_in1;
      reg gs_ctrl19;
      wire[11:0] DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_out1;
      reg[8:0] DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in1;
      reg[1:0] gs_ctrl18;
      reg[1:0] DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in2;
      reg[1:0] gs_ctrl17;
      reg[1:0] DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in3;
      reg[1:0] gs_ctrl16;
      /*signed*/wire[28:0] DC_Filter_Add_28Sx1U_29S_4_50_out1;
      reg[28:0] s_reg_82;
      wire[3:0] DC_Filter_Add2u2Mul2i3u2_4_41_out1;
      reg[3:0] s_reg_81;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_53_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_42_out1;
      wire DC_Filter_Eqi1u2_4_52_out1;
      reg s_reg_78;
      wire DC_Filter_OrReduction_2U_1U_4_51_out1;
      reg s_reg_77;
      reg[31:0] s_reg_76;
      reg[3:0] s_reg_80;
      reg[3:0] s_reg_79;
      /*signed*/wire[2:0] DC_Filter_Add2i1u1_4_17_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_11_out1;
      reg[3:0] s_reg_73;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_27_out1;
      /*signed*/reg[1:0] s_reg_72_slice;
      reg[31:0] DC_Filter_N_Mux_32_2_44_4_59_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_44_4_39_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_44_4_58_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_41_4_38_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_44_4_57_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_40_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_41_4_37_out1;
      wire DC_Filter_LtiLLs32_4_22_out1;
      wire DC_Filter_And_1Ux1U_1U_4_62_out1;
      wire[2:0] DC_Filter_gen_busy_r_4_121_out1;
      wire DC_Filter_Not_1U_1U_1_6_out1;
      reg o_rgb_inside_m_req_m_trig_req;
      /*signed*/wire[9:0] DC_Filter_Add2i1u8_4_61_out1;
      reg[31:0] s_reg_75;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_25_out1;
      reg[10:0] s_reg_74;
      /*signed*/wire[31:0] DC_Filter_Add2i1s32_4_10_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_19_out1;
      wire DC_Filter_gen000002_4_20_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_12_out1;
      reg i_rgb_m_busy_req_0;
      reg[31:0] s_reg_69;
      reg[31:0] s_reg_70;
      reg[31:0] s_reg_71;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_60_out1;
      /*signed*/wire[9:0] DC_Filter_Add_9Sx2U_10S_4_44_out1;
      reg[4:0] global_state1;
      reg stall1;
      reg[4:0] global_state_next;
      /*signed*/wire[31:0] DC_Filter_Add_32Sx29S_32S_4_114_out1;
      reg[31:0] DC_Filter_N_Mux_32_3_43_4_113_out1;
      wire DC_Filter_Eqi2u2_4_112_out1;
      /*signed*/wire[27:0] DC_Filter_Add_28Sx1U_29S_4_108_in2;
      wire DC_Filter_And_1Ux1U_1U_4_107_out1;
      wire DC_Filter_And_1Ux1U_1U_4_107_in1;
      wire DC_Filter_OrReduction_4U_1U_4_106_out1;
      wire[31:0] DC_Filter_Mul_32Ux32U_32U_4_105_out1;
      wire[11:0] DC_Filter_Mul_12U_3_4_103_out1;
      /*signed*/wire[8:0] DC_Filter_Add_9Sx2U_10S_4_102_in2;
      reg[1:0] DC_Filter_Add2u2Mul2i3u2_4_99_in1;
      reg[1:0] gs_ctrl15;
      reg[1:0] DC_Filter_Add2u2Mul2i3u2_4_99_in2;
      reg[1:0] gs_ctrl14;
      wire DC_Filter_OrReduction_2U_1U_4_94_out1;
      wire DC_Filter_Eqi1u2_4_93_out1;
      wire DC_Filter_Eqi2u2_4_92_out1;
      reg[1:0] DC_Filter_Eqi2u2_4_92_in1;
      reg gs_ctrl11;
      reg[8:0] DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in1;
      reg DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in2;
      reg gs_ctrl9;
      reg[1:0] DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in3;
      reg[1:0] gs_ctrl8;
      reg[2:0] gs_ctrl7;
      reg[2:0] gs_ctrl6;
      reg[2:0] gs_ctrl5;
      wire[11:0] DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_out1;
      wire[11:0] DC_Filter_Add2u9Mul2i258u2_4_74_out1;
      wire[11:0] DC_Filter_Add2u9Mul2i258Add2i3u2_4_79_out1;
      wire[11:0] DC_Filter_Add2u9Mul2i258Add2i6u2_4_81_out1;
      wire[10:0] DC_Filter_gen000003_4_86_out1;
      wire[11:0] DC_Filter_gen000001_4_88_out1;
      wire[11:0] DC_Filter_Add2iLLu9_4_90_out1;
      /*signed*/wire[12:0] DC_Filter_Add_13Sx10U_13S_4_104_out1;
      reg[3:0] gs_ctrl4;
      /*signed*/reg[31:0] DC_Filter_Add2i1s32_4_68_in1;
      reg gs_ctrl3;
      wire[11:0] DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_out1;
      reg[8:0] DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in1;
      reg[1:0] gs_ctrl2;
      reg[1:0] DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in2;
      reg[1:0] gs_ctrl1;
      reg[1:0] DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in3;
      reg[1:0] gs_ctrl0;
      /*signed*/wire[28:0] DC_Filter_Add_28Sx1U_29S_4_108_out1;
      reg[28:0] s_reg_164;
      wire[3:0] DC_Filter_Add2u2Mul2i3u2_4_99_out1;
      reg[3:0] s_reg_163;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_111_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_100_out1;
      wire DC_Filter_Eqi1u2_4_110_out1;
      reg s_reg_160;
      wire DC_Filter_OrReduction_2U_1U_4_109_out1;
      reg s_reg_159;
      reg[31:0] s_reg_158;
      reg[3:0] s_reg_162;
      reg[3:0] s_reg_161;
      /*signed*/wire[2:0] DC_Filter_Add2i1u1_4_75_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_69_out1;
      reg[3:0] s_reg_155;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_85_out1;
      /*signed*/reg[1:0] s_reg_154_slice;
      reg[31:0] DC_Filter_N_Mux_32_2_44_4_117_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_44_4_97_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_44_4_116_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_41_4_96_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_44_4_115_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_98_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_41_4_95_out1;
      wire DC_Filter_LtiLLs32_4_80_out1;
      wire DC_Filter_And_1Ux1U_1U_4_64_out1;
      wire[2:0] DC_Filter_gen_busy_r_4_122_out1;
      wire DC_Filter_Not_1U_1U_1_3_out1;
      reg o_result_m_req_m_trig_req;
      /*signed*/wire[9:0] DC_Filter_Add2i1u8_4_119_out1;
      reg[31:0] s_reg_157;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_83_out1;
      reg[10:0] s_reg_156;
      /*signed*/wire[31:0] DC_Filter_Add2i1s32_4_68_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_77_out1;
      wire DC_Filter_gen000002_4_78_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_70_out1;
      reg i_rgb_inside_m_busy_req_0;
      reg[31:0] s_reg_151;
      reg[31:0] s_reg_152;
      reg[31:0] s_reg_153;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_118_out1;
      /*signed*/wire[9:0] DC_Filter_Add_9Sx2U_10S_4_102_out1;
      reg[4:0] global_state;
      reg stall0;
      reg[31:0] f1_array_rgb_DIN;
      reg f1_array_rgb_CE;
      reg f1_array_rgb_RW;
      reg[11:0] f1_array_rgb_in1;
      wire[31:0] f1_array_rgb_out1;
      wire[3:0] mask1_in1;
      wire[31:0] mask1_out1;
      reg[31:0] f2_array_rgb_DIN;
      reg f2_array_rgb_CE;
      reg f2_array_rgb_RW;
      reg[11:0] f2_array_rgb_in1;
      wire[31:0] f2_array_rgb_out1;
      wire[3:0] mask2_in1;
      wire[31:0] mask2_out1;

         DC_Filter_ROM_9X32_mask2 mask2(
                                    .in1( mask2_in1 ),
                                    .out1( mask2_out1 ),
                                    .clk( i_clk )
                                  );

         DC_Filter_RAM_2322X32_1 f2_array_rgb(
                                   .DIN( f2_array_rgb_DIN ),
                                   .CE( f2_array_rgb_CE ),
                                   .RW( f2_array_rgb_RW ),
                                   .in1( f2_array_rgb_in1 ),
                                   .out1( f2_array_rgb_out1 ),
                                   .clk( i_clk )
                                 );

         DC_Filter_ROM_9X32_mask1 mask1(
                                    .in1( mask1_in1 ),
                                    .out1( mask1_out1 ),
                                    .clk( i_clk )
                                  );

         DC_Filter_RAM_2322X32_1 f1_array_rgb(
                                   .DIN( f1_array_rgb_DIN ),
                                   .CE( f1_array_rgb_CE ),
                                   .RW( f1_array_rgb_RW ),
                                   .in1( f1_array_rgb_in1 ),
                                   .out1( f1_array_rgb_out1 ),
                                   .clk( i_clk )
                                 );

         // resource: mux_24bx3i0c
         // resource: regr_en_24
         always @(posedge i_clk)
          begin :drive_o_result_data
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd08, 5'd13:                      begin
                        o_result_data <= i_rgb_inside_data;
                     end
                     
                     5'd19:                      begin
                        o_result_data <= {{ 14 {DC_Filter_Add_9Sx2U_10S_4_102_out1[9]}}, DC_Filter_Add_9Sx2U_10S_4_102_out1};
                     end
                     
                     5'd24:                      begin
                        if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_118_out1) begin
                           o_result_data <= {s_reg_151[7:0], {s_reg_152[7:0], s_reg_153[7:0]}};
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_inside_m_busy_req_0
            if (i_rst == 1'b0) begin
               i_rgb_inside_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd02:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_70_out1) begin
                              i_rgb_inside_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        5'd05:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_77_out1 && DC_Filter_gen000002_4_78_out1) begin
                              i_rgb_inside_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        5'd08, 5'd13:                         begin
                           i_rgb_inside_m_busy_req_0 <= 1'd1;
                        end
                        
                        5'd12:                         begin
                           if (11'd0257 != DC_Filter_Add2i1s32_4_68_out1[10:0]) begin
                              i_rgb_inside_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        5'd16:                         begin
                           case (s_reg_156) 

                              11'd0257:                               begin
                                 if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_83_out1) begin
                                    i_rgb_inside_m_busy_req_0 <= 1'd0;
                                 end
                              end
                              
                              default:                               begin
                                 i_rgb_inside_m_busy_req_0 <= 1'd0;
                              end
                              
                           endcase

                        end
                        
                        5'd25:                         begin
                           if (10'd0256 == DC_Filter_Add2i1u8_4_119_out1 && 32'd0000000000 == s_reg_157) begin
                              i_rgb_inside_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_result_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd24:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_118_out1) begin
                              o_result_m_req_m_trig_req <= DC_Filter_Not_1U_1U_1_3_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx3i1c
         always @(DC_Filter_And_1Ux1U_1U_4_64_out1 or DC_Filter_gen_busy_r_4_122_out1[0] or global_state)
          begin :drive_stall0
            case (global_state) 

               5'd08, 5'd13:                begin
                  stall0 = DC_Filter_gen_busy_r_4_122_out1[0];
               end
               
               5'd25:                begin
                  stall0 = DC_Filter_And_1Ux1U_1U_4_64_out1;
               end
               
               default:                begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // resource: mux_32bx2i0c
         // resource: regr_en_sc_32
         always @(posedge i_clk)
          begin :drive_s_reg_151
            if (i_rst == 1'b0) begin
               s_reg_151 <= 32'd0000000000;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd05:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_77_out1) begin
                              if (!DC_Filter_gen000002_4_78_out1 && !DC_Filter_LtiLLs32_4_80_out1) begin
                                 s_reg_151 <= DC_Filter_N_Mux_32_2_41_4_95_out1;
                              end
                           end
                        end
                        
                        5'd07, 5'd12:                         begin
                           if (11'd0257 == DC_Filter_Add2i1s32_4_68_out1[10:0]) begin
                              s_reg_151 <= DC_Filter_N_Mux_32_2_41_4_95_out1;
                           end
                        end
                        
                        5'd16:                         begin
                           if (11'd0257 == s_reg_156) begin
                              if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_83_out1) begin
                                 s_reg_151 <= DC_Filter_N_Mux_32_2_41_4_95_out1;
                              end
                           end
                        end
                        
                        5'd17:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_98_out1) begin
                              s_reg_151 <= DC_Filter_N_Mux_32_2_41_4_95_out1;
                           end
                        end
                        
                        5'd23:                         begin
                           s_reg_151 <= DC_Filter_N_Mux_32_2_44_4_115_out1;
                        end
                        
                        5'd25:                         begin
                           if (10'd0256 != DC_Filter_Add2i1u8_4_119_out1) begin
                              s_reg_151 <= DC_Filter_N_Mux_32_2_41_4_95_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i0c
         // resource: regr_en_sc_32
         always @(posedge i_clk)
          begin :drive_s_reg_152
            if (i_rst == 1'b0) begin
               s_reg_152 <= 32'd0000000000;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd05:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_77_out1) begin
                              if (!DC_Filter_gen000002_4_78_out1 && !DC_Filter_LtiLLs32_4_80_out1) begin
                                 s_reg_152 <= DC_Filter_N_Mux_32_2_41_4_96_out1;
                              end
                           end
                        end
                        
                        5'd07, 5'd12:                         begin
                           if (11'd0257 == DC_Filter_Add2i1s32_4_68_out1[10:0]) begin
                              s_reg_152 <= DC_Filter_N_Mux_32_2_41_4_96_out1;
                           end
                        end
                        
                        5'd16:                         begin
                           if (11'd0257 == s_reg_156) begin
                              if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_83_out1) begin
                                 s_reg_152 <= DC_Filter_N_Mux_32_2_41_4_96_out1;
                              end
                           end
                        end
                        
                        5'd17:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_98_out1) begin
                              s_reg_152 <= DC_Filter_N_Mux_32_2_41_4_96_out1;
                           end
                        end
                        
                        5'd23:                         begin
                           s_reg_152 <= DC_Filter_N_Mux_32_2_44_4_116_out1;
                        end
                        
                        5'd25:                         begin
                           if (10'd0256 != DC_Filter_Add2i1u8_4_119_out1) begin
                              s_reg_152 <= DC_Filter_N_Mux_32_2_41_4_96_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i0c
         // resource: regr_en_sc_32
         always @(posedge i_clk)
          begin :drive_s_reg_153
            if (i_rst == 1'b0) begin
               s_reg_153 <= 32'd0000000000;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd05:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_77_out1) begin
                              if (!DC_Filter_gen000002_4_78_out1 && !DC_Filter_LtiLLs32_4_80_out1) begin
                                 s_reg_153 <= DC_Filter_N_Mux_32_2_44_4_97_out1;
                              end
                           end
                        end
                        
                        5'd07, 5'd12:                         begin
                           if (11'd0257 == DC_Filter_Add2i1s32_4_68_out1[10:0]) begin
                              s_reg_153 <= DC_Filter_N_Mux_32_2_44_4_97_out1;
                           end
                        end
                        
                        5'd16:                         begin
                           if (11'd0257 == s_reg_156) begin
                              if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_83_out1) begin
                                 s_reg_153 <= DC_Filter_N_Mux_32_2_44_4_97_out1;
                              end
                           end
                        end
                        
                        5'd17:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_98_out1) begin
                              s_reg_153 <= DC_Filter_N_Mux_32_2_44_4_97_out1;
                           end
                        end
                        
                        5'd23:                         begin
                           s_reg_153 <= DC_Filter_N_Mux_32_2_44_4_117_out1;
                        end
                        
                        5'd25:                         begin
                           if (10'd0256 != DC_Filter_Add2i1u8_4_119_out1) begin
                              s_reg_153 <= DC_Filter_N_Mux_32_2_44_4_97_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx8i2c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_s_reg_154_slice
            if (i_rst == 1'b0) begin
               s_reg_154_slice <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd02:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_70_out1) 

                              4'd03:                               begin
                                 s_reg_154_slice <= 2'd1;
                              end
                              
                              default:                               begin
                                 s_reg_154_slice <= DC_Filter_Add_3Sx2U_4S_4_70_out1[1:0];
                              end
                              
                           endcase

                        end
                        
                        5'd05:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_77_out1) 

                              4'd03:                               begin
                                 s_reg_154_slice <= 2'd0;
                              end
                              
                              default:                               begin
                                 s_reg_154_slice <= DC_Filter_Add_3Sx2U_4S_4_77_out1[1:0];
                              end
                              
                           endcase

                        end
                        
                        5'd06:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_85_out1) begin
                              s_reg_154_slice <= DC_Filter_Add_3Sx2U_4S_4_85_out1[1:0];
                           end
                        end
                        
                        5'd07, 5'd12:                         begin
                           s_reg_154_slice <= 2'd0;
                        end
                        
                        5'd16:                         begin
                           if (11'd0257 == s_reg_156) begin
                              case (DC_Filter_Add_3Sx2U_4S_4_83_out1) 

                                 4'd03:                                  begin
                                    s_reg_154_slice <= 2'd0;
                                 end
                                 
                                 default:                                  begin
                                    s_reg_154_slice <= DC_Filter_Add_3Sx2U_4S_4_83_out1[1:0];
                                 end
                                 
                              endcase

                           end
                        end
                        
                        5'd17:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_98_out1) 

                              4'd03:                               begin
                                 s_reg_154_slice <= 2'd0;
                              end
                              
                              default:                               begin
                                 s_reg_154_slice <= DC_Filter_Add_3Sx2U_4S_4_98_out1[1:0];
                              end
                              
                           endcase

                        end
                        
                        5'd24:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_118_out1) begin
                              s_reg_154_slice <= DC_Filter_Add_3Sx2U_4S_4_118_out1[1:0];
                           end
                        end
                        
                        5'd25:                         begin
                           /* state61 */
                           case (DC_Filter_Add2i1u8_4_119_out1) 

                              10'd0256:                               begin
                                 case (s_reg_157) 

                                    32'd0000000000:                                     begin
                                       s_reg_154_slice <= 2'd1;
                                    end
                                    
                                    default:                                     begin
                                       s_reg_154_slice <= 2'd0;
                                    end
                                    
                                 endcase

                              end
                              
                              default:                               begin
                                 s_reg_154_slice <= 2'd0;
                              end
                              
                           endcase

                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_4bx5i1c
         // resource: regr_en_sc_4
         always @(posedge i_clk)
          begin :drive_s_reg_155
            if (i_rst == 1'b0) begin
               s_reg_155 <= 4'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd01:                         begin
                           if (11'd0258 == s_reg_156) begin
                              if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_69_out1) begin
                                 s_reg_155 <= DC_Filter_Add_3Sx2U_4S_4_69_out1;
                              end
                           end
                        end
                        
                        5'd02:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_70_out1) begin
                              s_reg_155 <= 4'd00;
                           end
                        end
                        
                        5'd04:                         begin
                           case (s_reg_156) 

                              11'd0257:                               begin
                                 if (3'd2 != DC_Filter_Add2i1u1_4_75_out1) begin
                                    s_reg_155 <= {DC_Filter_Add2i1u1_4_75_out1[2], DC_Filter_Add2i1u1_4_75_out1};
                                 end
                              end
                              
                              default:                               begin
                                 s_reg_155 <= {s_reg_155[2], s_reg_155[2:0]};
                              end
                              
                           endcase

                        end
                        
                        5'd05:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_77_out1) begin
                              s_reg_155 <= 4'd00;
                           end
                        end
                        
                        5'd17:                         begin
                           s_reg_155 <= 4'd00;
                        end
                        
                        5'd23:                         begin
                           if (4'd03 == s_reg_162 && 4'd03 != s_reg_161) begin
                              s_reg_155 <= s_reg_161;
                           end
                        end
                        
                        5'd24:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_118_out1) begin
                              s_reg_155 <= 4'd00;
                           end
                        end
                        
                        5'd25:                         begin
                           if (32'd0000000000 != s_reg_157) begin
                              s_reg_155 <= 4'd00;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_11bx6i2c
         // resource: regr_en_sc_11
         always @(posedge i_clk)
          begin :drive_s_reg_156
            if (i_rst == 1'b0) begin
               s_reg_156 <= 11'd0000;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd00, 5'd03, 5'd15:                         begin
                           s_reg_156 <= DC_Filter_Add2i1s32_4_68_out1[10:0];
                        end
                        
                        5'd01:                         begin
                           if (11'd0258 == s_reg_156) begin
                              if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_69_out1) begin
                                 s_reg_156 <= 11'd0000;
                              end
                           end
                        end
                        
                        5'd02:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_70_out1) 

                              4'd03:                               begin
                                 s_reg_156 <= 11'd0001;
                              end
                              
                              default:                               begin
                                 s_reg_156 <= 11'd0000;
                              end
                              
                           endcase

                        end
                        
                        5'd04:                         begin
                           if (11'd0257 == s_reg_156) begin
                              if (3'd2 != DC_Filter_Add2i1u1_4_75_out1) begin
                                 s_reg_156 <= 11'd0001;
                              end
                           end
                        end
                        
                        5'd05:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_77_out1) 

                              4'd03:                               begin
                                 if (DC_Filter_gen000002_4_78_out1) begin
                                    s_reg_156 <= 11'd0001;
                                 end
                                 else begin
                                    s_reg_156 <= {10'b0000000000, DC_Filter_LtiLLs32_4_80_out1};
                                 end
                              end
                              
                              default:                               begin
                                 s_reg_156 <= 11'd0001;
                              end
                              
                           endcase

                        end
                        
                        5'd07, 5'd12:                         begin
                           case (DC_Filter_Add2i1s32_4_68_out1[10:0]) 

                              11'd0257:                               begin
                                 s_reg_156 <= 11'd0000;
                              end
                              
                              default:                               begin
                                 s_reg_156 <= DC_Filter_Add2i1s32_4_68_out1[10:0];
                              end
                              
                           endcase

                        end
                        
                        5'd16:                         begin
                           if (11'd0257 == s_reg_156) begin
                              case (DC_Filter_Add_3Sx2U_4S_4_83_out1) 

                                 4'd03:                                  begin
                                    s_reg_156 <= 11'd0000;
                                 end
                                 
                                 default:                                  begin
                                    s_reg_156 <= 11'd0001;
                                 end
                                 
                              endcase

                           end
                        end
                        
                        5'd17:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_98_out1) begin
                              s_reg_156 <= {s_reg_156[9], s_reg_156[9:0]};
                           end
                        end
                        
                        5'd25:                         begin
                           /* state61 */
                           case (DC_Filter_Add2i1u8_4_119_out1) 

                              10'd0256:                               begin
                                 s_reg_156 <= 11'd0001;
                              end
                              
                              default:                               begin
                                 s_reg_156 <= {DC_Filter_Add2i1u8_4_119_out1[9], DC_Filter_Add2i1u8_4_119_out1};
                              end
                              
                           endcase

                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_32bx3i2c
         // resource: regr_en_32
         always @(posedge i_clk)
          begin :drive_s_reg_157
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd02:                      begin
                        s_reg_157 <= 32'd0000000000;
                     end
                     
                     5'd07:                      begin
                        s_reg_157 <= s_reg_158;
                     end
                     
                     5'd12:                      begin
                        if (11'd0257 == DC_Filter_Add2i1s32_4_68_out1[10:0]) begin
                           s_reg_157 <= s_reg_158;
                        end
                     end
                     
                     5'd16:                      begin
                        if (11'd0257 == s_reg_156) begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_83_out1) begin
                              s_reg_157 <= 32'd0000000003;
                           end
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_32bx2i0c
         // resource: regr_en_32
         always @(posedge i_clk)
          begin :drive_s_reg_158
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd04, 5'd11:                      begin
                        s_reg_158 <= DC_Filter_Add2i1s32_4_68_out1;
                     end
                     
                     5'd18:                      begin
                        s_reg_158 <= mask2_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_1
         always @(posedge i_clk)
          begin :drive_s_reg_159
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  s_reg_159 <= DC_Filter_OrReduction_2U_1U_4_109_out1;
               end
               
            endcase

         end

         // resource: regr_en_1
         always @(posedge i_clk)
          begin :drive_s_reg_160
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  s_reg_160 <= DC_Filter_Eqi1u2_4_110_out1;
               end
               
            endcase

         end

         // resource: regr_en_4
         always @(posedge i_clk)
          begin :drive_s_reg_161
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd18:                      begin
                        s_reg_161 <= DC_Filter_Add_3Sx2U_4S_4_100_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_4bx2i1c
         // resource: regr_en_4
         always @(posedge i_clk)
          begin :drive_s_reg_162
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd18:                      begin
                        s_reg_162 <= 4'd00;
                     end
                     
                     5'd22:                      begin
                        s_reg_162 <= DC_Filter_Add_3Sx2U_4S_4_111_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_4bx2i0c
         // resource: regr_en_4
         always @(posedge i_clk)
          begin :drive_s_reg_163
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd19:                      begin
                        s_reg_163 <= DC_Filter_Add2u2Mul2i3u2_4_99_out1;
                     end
                     
                     5'd21:                      begin
                        s_reg_163 <= {2'b00, s_reg_162[1:0]};
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_29
         always @(posedge i_clk)
          begin :drive_s_reg_164
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd21:                      begin
                        s_reg_164 <= DC_Filter_Add_28Sx1U_29S_4_108_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_2bx3i1c
         always @(DC_Filter_Add_3Sx2U_4S_4_85_out1[1:0] or gs_ctrl0 or s_reg_154_slice)
          begin :drive_DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in3
            case (gs_ctrl0) 

               2'd1:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in3 = 2'd0;
               end
               
               2'd2:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in3 = DC_Filter_Add_3Sx2U_4S_4_85_out1[1:0];
               end
               
               default:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in3 = s_reg_154_slice;
               end
               
            endcase

         end

         // resource: mux_2bx3i1c
         always @(s_reg_155[1:0] or gs_ctrl1)
          begin :drive_DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in2
            case (gs_ctrl1) 

               2'd1:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in2 = {1'b0, s_reg_155[0]};
               end
               
               2'd2:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in2 = 2'd2;
               end
               
               default:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in2 = s_reg_155[1:0];
               end
               
            endcase

         end

         // resource: mux_9bx3i1c
         always @(s_reg_156[8:0] or DC_Filter_Add2i1s32_4_68_out1[8:0] or gs_ctrl2)
          begin :drive_DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in1
            case (gs_ctrl2) 

               2'd1:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in1 = 9'd001;
               end
               
               2'd2:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in1 = DC_Filter_Add2i1s32_4_68_out1[8:0];
               end
               
               default:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in1 = s_reg_156[8:0];
               end
               
            endcase

         end

         // resource: DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4  instance: DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67
         assign DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_out1 = ({10'b0000000000, DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in3}*12'd0003 + {10'b0000000000, DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in2})*12'd0258 + {3'b000, DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_in1};

         // resource: mux_32bx2i0c
         always @(s_reg_156[8:0] or s_reg_157 or gs_ctrl3)
          begin :drive_DC_Filter_Add2i1s32_4_68_in1
            if (gs_ctrl3) begin
               /* state16 */
               DC_Filter_Add2i1s32_4_68_in1 = s_reg_157;
            end
            else begin
               DC_Filter_Add2i1s32_4_68_in1 = {23'b00000000000000000000000, s_reg_156[8:0]};
            end
         end

         // resource: DC_Filter_Add2i1s32_4  instance: DC_Filter_Add2i1s32_4_68
         assign DC_Filter_Add2i1s32_4_68_out1 = DC_Filter_Add2i1s32_4_68_in1 + 32'd0000000001;

         // resource: mux_12bx9i0c
         always @(DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_out1 or DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_out1 or DC_Filter_Add2u9Mul2i258u2_4_74_out1 or DC_Filter_Add_3Sx2U_4S_4_77_out1 or DC_Filter_Add2u9Mul2i258Add2i3u2_4_79_out1 or DC_Filter_Add2u9Mul2i258Add2i6u2_4_81_out1 or DC_Filter_gen000003_4_86_out1 or DC_Filter_gen000001_4_88_out1 or DC_Filter_Add2iLLu9_4_90_out1 or DC_Filter_Add_13Sx10U_13S_4_104_out1[11:0] or gs_ctrl4)
          begin :drive_f2_array_rgb_in1
            case (gs_ctrl4) 

               4'd01:                begin
                  f2_array_rgb_in1 = DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_out1;
               end
               
               4'd02:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_77_out1) 

                     4'd03:                      begin
                        f2_array_rgb_in1 = DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_out1;
                     end
                     
                     default:                      begin
                        f2_array_rgb_in1 = DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_out1;
                     end
                     
                  endcase

               end
               
               4'd03:                begin
                  f2_array_rgb_in1 = {1'b0, DC_Filter_gen000003_4_86_out1};
               end
               
               4'd04:                begin
                  f2_array_rgb_in1 = DC_Filter_gen000001_4_88_out1;
               end
               
               4'd05:                begin
                  f2_array_rgb_in1 = DC_Filter_Add2iLLu9_4_90_out1;
               end
               
               4'd06:                begin
                  f2_array_rgb_in1 = DC_Filter_Add2u9Mul2i258u2_4_74_out1;
               end
               
               4'd07:                begin
                  f2_array_rgb_in1 = DC_Filter_Add2u9Mul2i258Add2i3u2_4_79_out1;
               end
               
               4'd08:                begin
                  f2_array_rgb_in1 = DC_Filter_Add2u9Mul2i258Add2i6u2_4_81_out1;
               end
               
               4'd09:                begin
                  f2_array_rgb_in1 = DC_Filter_Add_13Sx10U_13S_4_104_out1[11:0];
               end
               
               default:                begin
                  f2_array_rgb_in1 = DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_67_out1;
               end
               
            endcase

         end

         // resource: mux_32bx5i1c
         always @(i_rgb_inside_data[7:0] or o_result_data[23:8] or f2_array_rgb_out1 or gs_ctrl5)
          begin :drive_f2_array_rgb_DIN
            case (gs_ctrl5) 

               3'd1:                begin
                  f2_array_rgb_DIN = f2_array_rgb_out1;
               end
               
               3'd2:                begin
                  f2_array_rgb_DIN = {24'b000000000000000000000000, i_rgb_inside_data[7:0]};
               end
               
               3'd3:                begin
                  f2_array_rgb_DIN = {24'b000000000000000000000000, o_result_data[15:8]};
               end
               
               3'd4:                begin
                  f2_array_rgb_DIN = {24'b000000000000000000000000, o_result_data[23:16]};
               end
               
               default:                begin
                  f2_array_rgb_DIN = 32'd0000000000;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         always @(stall0 or s_reg_156 or s_reg_157 or DC_Filter_Add2i1s32_4_68_out1[10:0] or DC_Filter_Add2i1u1_4_75_out1 or DC_Filter_Add_3Sx2U_4S_4_77_out1 or DC_Filter_gen000002_4_78_out1 or DC_Filter_LtiLLs32_4_80_out1 or DC_Filter_Add_3Sx2U_4S_4_85_out1 or DC_Filter_Add2i1u8_4_119_out1 or gs_ctrl6)
          begin :drive_f2_array_rgb_CE
            if (stall0) begin
               f2_array_rgb_CE = 1'b0;
            end
            else begin
               case (gs_ctrl6) 

                  3'd1:                   begin
                     f2_array_rgb_CE = 1'b1;
                  end
                  
                  3'd2:                   begin
                     case (s_reg_156) 

                        11'd0257:                         begin
                           if (3'd2 != DC_Filter_Add2i1u1_4_75_out1) begin
                              f2_array_rgb_CE = 1'b1;
                           end
                           else begin
                              f2_array_rgb_CE = 1'b0;
                           end
                        end
                        
                        default:                         begin
                           f2_array_rgb_CE = 1'b1;
                        end
                        
                     endcase

                  end
                  
                  3'd3:                   begin
                     case (DC_Filter_Add_3Sx2U_4S_4_77_out1) 

                        4'd03:                         begin
                           if (!DC_Filter_gen000002_4_78_out1 && DC_Filter_LtiLLs32_4_80_out1) begin
                              f2_array_rgb_CE = 1'b1;
                           end
                           else begin
                              f2_array_rgb_CE = 1'b0;
                           end
                        end
                        
                        default:                         begin
                           f2_array_rgb_CE = 1'b1;
                        end
                        
                     endcase

                  end
                  
                  3'd4:                   begin
                     if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_85_out1) begin
                        f2_array_rgb_CE = 1'b1;
                     end
                     else begin
                        f2_array_rgb_CE = 1'b0;
                     end
                  end
                  
                  3'd5:                   begin
                     if (11'd0257 != DC_Filter_Add2i1s32_4_68_out1[10:0]) begin
                        f2_array_rgb_CE = 1'b1;
                     end
                     else begin
                        f2_array_rgb_CE = 1'b0;
                     end
                  end
                  
                  3'd6:                   begin
                     if (10'd0256 == DC_Filter_Add2i1u8_4_119_out1 && 32'd0000000000 != s_reg_157) begin
                        f2_array_rgb_CE = 1'b1;
                     end
                     else begin
                        f2_array_rgb_CE = 1'b0;
                     end
                  end
                  
                  default:                   begin
                     f2_array_rgb_CE = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         always @(stall0 or DC_Filter_Add2i1s32_4_68_out1[10:0] or DC_Filter_Add_3Sx2U_4S_4_77_out1 or DC_Filter_gen000002_4_78_out1 or DC_Filter_LtiLLs32_4_80_out1 or DC_Filter_Add_3Sx2U_4S_4_85_out1 or gs_ctrl7)
          begin :drive_f2_array_rgb_RW
            if (stall0) begin
               f2_array_rgb_RW = 1'b0;
            end
            else begin
               case (gs_ctrl7) 

                  3'd1:                   begin
                     f2_array_rgb_RW = 1'b1;
                  end
                  
                  3'd2:                   begin
                     case (DC_Filter_Add_3Sx2U_4S_4_77_out1) 

                        4'd03:                         begin
                           if (!DC_Filter_gen000002_4_78_out1 && DC_Filter_LtiLLs32_4_80_out1) begin
                              f2_array_rgb_RW = 1'b1;
                           end
                           else begin
                              f2_array_rgb_RW = 1'b0;
                           end
                        end
                        
                        default:                         begin
                           f2_array_rgb_RW = 1'b0;
                        end
                        
                     endcase

                  end
                  
                  3'd3:                   begin
                     if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_85_out1) begin
                        f2_array_rgb_RW = 1'b1;
                     end
                     else begin
                        f2_array_rgb_RW = 1'b0;
                     end
                  end
                  
                  3'd4:                   begin
                     if (11'd0257 != DC_Filter_Add2i1s32_4_68_out1[10:0]) begin
                        f2_array_rgb_RW = 1'b1;
                     end
                     else begin
                        f2_array_rgb_RW = 1'b0;
                     end
                  end
                  
                  default:                   begin
                     f2_array_rgb_RW = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_69
         assign DC_Filter_Add_3Sx2U_4S_4_69_out1 = {2'b00, s_reg_155[1:0]} + 4'd01;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_70
         assign DC_Filter_Add_3Sx2U_4S_4_70_out1 = {2'b00, s_reg_154_slice} + 4'd01;

         // resource: mux_2bx3i1c
         always @(DC_Filter_Add_3Sx2U_4S_4_77_out1[1:0] or gs_ctrl8 or s_reg_154_slice)
          begin :drive_DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in3
            case (gs_ctrl8) 

               2'd1:                begin
                  DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in3 = DC_Filter_Add_3Sx2U_4S_4_77_out1[1:0];
               end
               
               2'd2:                begin
                  DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in3 = 2'd0;
               end
               
               default:                begin
                  DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in3 = s_reg_154_slice;
               end
               
            endcase

         end

         // resource: mux_1bx3i1c
         always @(s_reg_155[0] or s_reg_156 or DC_Filter_Add2i1u1_4_75_out1[0] or gs_ctrl9)
          begin :drive_DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in2
            if (gs_ctrl9) begin
               DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in2 = 1'b0;
            end
            else begin
               case (s_reg_156) 

                  11'd0257:                   begin
                     DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in2 = DC_Filter_Add2i1u1_4_75_out1[0];
                  end
                  
                  default:                   begin
                     DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in2 = s_reg_155[0];
                  end
                  
               endcase

            end
         end

         // resource: mux_9bx2i1c
         always @(s_reg_156 or gs_ctrl9)
          begin :drive_DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in1
            if (gs_ctrl9) begin
               DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in1 = 9'd001;
            end
            else begin
               case (s_reg_156) 

                  11'd0257:                   begin
                     DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in1 = 9'd001;
                  end
                  
                  default:                   begin
                     DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in1 = s_reg_156[8:0];
                  end
                  
               endcase

            end
         end

         // resource: DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4  instance: DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71
         assign DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_out1 = ({10'b0000000000, DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in3}*12'd0003 + {8'b00000000, {3'b000, DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in2} + 4'd01})*12'd0258 + {3'b000, DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_71_in1};

         // resource: DC_Filter_Add2u9Mul2i258u2_4  instance: DC_Filter_Add2u9Mul2i258u2_4_74
         assign DC_Filter_Add2u9Mul2i258u2_4_74_out1 = {10'b0000000000, s_reg_154_slice}*12'd0258 + {3'b000, s_reg_156[8:0]};

         // resource: DC_Filter_Add2i1u1_4  instance: DC_Filter_Add2i1u1_4_75
         assign DC_Filter_Add2i1u1_4_75_out1 = {2'b00, s_reg_155[0]} + 3'd1;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_77
         assign DC_Filter_Add_3Sx2U_4S_4_77_out1 = {2'b00, s_reg_154_slice} + 4'd01;

         // resource: DC_Filter_gen000002_4  instance: DC_Filter_gen000002_4_78
         assign DC_Filter_gen000002_4_78_out1 = s_reg_157[31] ^ s_reg_157 < 32'd0000000257;

         // resource: DC_Filter_Add2u9Mul2i258Add2i3u2_4  instance: DC_Filter_Add2u9Mul2i258Add2i3u2_4_79
         assign DC_Filter_Add2u9Mul2i258Add2i3u2_4_79_out1 = ({10'b0000000000, s_reg_154_slice} + 12'd0003)*12'd0258 + {3'b000, s_reg_156[8:0]};

         // resource: DC_Filter_LtiLLs32_4  instance: DC_Filter_LtiLLs32_4_80
         assign DC_Filter_LtiLLs32_4_80_out1 = s_reg_157[31] ^ s_reg_157 < 32'd0000000258;

         // resource: DC_Filter_Add2u9Mul2i258Add2i6u2_4  instance: DC_Filter_Add2u9Mul2i258Add2i6u2_4_81
         assign DC_Filter_Add2u9Mul2i258Add2i6u2_4_81_out1 = ({10'b0000000000, s_reg_154_slice} + 12'd0006)*12'd0258 + {3'b000, s_reg_156[8:0]};

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_83
         assign DC_Filter_Add_3Sx2U_4S_4_83_out1 = {2'b00, s_reg_154_slice} + 4'd01;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_85
         assign DC_Filter_Add_3Sx2U_4S_4_85_out1 = {2'b00, s_reg_154_slice} + 4'd01;

         // resource: DC_Filter_gen000003_4  instance: DC_Filter_gen000003_4_86
         assign DC_Filter_gen000003_4_86_out1 = {2'b00, s_reg_156[8:0]} + 11'd0516;

         // resource: DC_Filter_gen000001_4  instance: DC_Filter_gen000001_4_88
         assign DC_Filter_gen000001_4_88_out1 = {3'b000, s_reg_156[8:0]} + 12'd1290;

         // resource: DC_Filter_Add2iLLu9_4  instance: DC_Filter_Add2iLLu9_4_90
         assign DC_Filter_Add2iLLu9_4_90_out1 = {3'b000, s_reg_156[8:0]} + 12'd2064;

         // resource: mux_2bx2i1c
         always @(DC_Filter_Add_3Sx2U_4S_4_98_out1[1:0] or gs_ctrl11)
          begin :drive_DC_Filter_Eqi2u2_4_92_in1
            if (gs_ctrl11) begin
               DC_Filter_Eqi2u2_4_92_in1 = DC_Filter_Add_3Sx2U_4S_4_98_out1[1:0];
            end
            else begin
               DC_Filter_Eqi2u2_4_92_in1 = 2'd0;
            end
         end

         // resource: DC_Filter_Eqi2u2_4  instance: DC_Filter_Eqi2u2_4_92
         assign DC_Filter_Eqi2u2_4_92_out1 = DC_Filter_Eqi2u2_4_92_in1 == 2'd2;

         // resource: DC_Filter_Eqi1u2_4  instance: DC_Filter_Eqi1u2_4_93
         assign DC_Filter_Eqi1u2_4_93_out1 = DC_Filter_Eqi2u2_4_92_in1 == 2'd1;

         // resource: DC_Filter_OrReduction_2U_1U_4  instance: DC_Filter_OrReduction_2U_1U_4_94
         assign DC_Filter_OrReduction_2U_1U_4_94_out1 = (|DC_Filter_Eqi2u2_4_92_in1);

         // resource: DC_Filter_N_Mux_32_2_41_4
         always @(s_reg_151 or DC_Filter_Eqi2u2_4_92_out1)
          begin :DC_Filter_N_Mux_32_2_41_4_95
            if (DC_Filter_Eqi2u2_4_92_out1) begin
               DC_Filter_N_Mux_32_2_41_4_95_out1 = 32'd0000000000;
            end
            else begin
               DC_Filter_N_Mux_32_2_41_4_95_out1 = s_reg_151;
            end
         end

         // resource: DC_Filter_N_Mux_32_2_41_4
         always @(s_reg_152 or DC_Filter_Eqi1u2_4_93_out1)
          begin :DC_Filter_N_Mux_32_2_41_4_96
            if (DC_Filter_Eqi1u2_4_93_out1) begin
               DC_Filter_N_Mux_32_2_41_4_96_out1 = 32'd0000000000;
            end
            else begin
               DC_Filter_N_Mux_32_2_41_4_96_out1 = s_reg_152;
            end
         end

         // resource: DC_Filter_N_Mux_32_2_44_4
         always @(s_reg_153 or DC_Filter_OrReduction_2U_1U_4_94_out1)
          begin :DC_Filter_N_Mux_32_2_44_4_97
            if (DC_Filter_OrReduction_2U_1U_4_94_out1) begin
               DC_Filter_N_Mux_32_2_44_4_97_out1 = s_reg_153;
            end
            else begin
               DC_Filter_N_Mux_32_2_44_4_97_out1 = 32'd0000000000;
            end
         end

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_98
         assign DC_Filter_Add_3Sx2U_4S_4_98_out1 = {2'b00, s_reg_154_slice} + 4'd01;

         // resource: mux_2bx3i1c
         always @(s_reg_161[1:0] or s_reg_162[1:0] or gs_ctrl14)
          begin :drive_DC_Filter_Add2u2Mul2i3u2_4_99_in2
            case (gs_ctrl14) 

               2'd1:                begin
                  DC_Filter_Add2u2Mul2i3u2_4_99_in2 = s_reg_162[1:0];
               end
               
               2'd2:                begin
                  DC_Filter_Add2u2Mul2i3u2_4_99_in2 = s_reg_161[1:0];
               end
               
               default:                begin
                  DC_Filter_Add2u2Mul2i3u2_4_99_in2 = 2'd0;
               end
               
            endcase

         end

         // resource: mux_2bx4i1c
         always @(s_reg_155[1:0] or DC_Filter_Add_3Sx2U_4S_4_118_out1[1:0] or gs_ctrl15 or s_reg_154_slice)
          begin :drive_DC_Filter_Add2u2Mul2i3u2_4_99_in1
            case (gs_ctrl15) 

               2'd1:                begin
                  DC_Filter_Add2u2Mul2i3u2_4_99_in1 = s_reg_155[1:0];
               end
               
               2'd2:                begin
                  DC_Filter_Add2u2Mul2i3u2_4_99_in1 = s_reg_154_slice;
               end
               
               2'd3:                begin
                  DC_Filter_Add2u2Mul2i3u2_4_99_in1 = DC_Filter_Add_3Sx2U_4S_4_118_out1[1:0];
               end
               
               default:                begin
                  DC_Filter_Add2u2Mul2i3u2_4_99_in1 = 2'd0;
               end
               
            endcase

         end

         // resource: DC_Filter_Add2u2Mul2i3u2_4  instance: DC_Filter_Add2u2Mul2i3u2_4_99
         assign DC_Filter_Add2u2Mul2i3u2_4_99_out1 = {2'b00, DC_Filter_Add2u2Mul2i3u2_4_99_in2}*4'd03 + {2'b00, DC_Filter_Add2u2Mul2i3u2_4_99_in1};

         // instance: drive_mask2_in1
         assign mask2_in1 = DC_Filter_Add2u2Mul2i3u2_4_99_out1;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_100
         assign DC_Filter_Add_3Sx2U_4S_4_100_out1 = {2'b00, s_reg_155[1:0]} + 4'd01;

         // instance: drive_DC_Filter_Add_9Sx2U_10S_4_102_in2
         assign DC_Filter_Add_9Sx2U_10S_4_102_in2 = {1'b0, s_reg_156[7:0]};

         // resource: DC_Filter_Add_9Sx2U_10S_4  instance: DC_Filter_Add_9Sx2U_10S_4_102
         assign DC_Filter_Add_9Sx2U_10S_4_102_out1 = {DC_Filter_Add_9Sx2U_10S_4_102_in2[8], DC_Filter_Add_9Sx2U_10S_4_102_in2} + {8'b00000000, s_reg_154_slice};

         // resource: DC_Filter_Mul_12U_3_4  instance: DC_Filter_Mul_12U_3_4_103
         assign DC_Filter_Mul_12U_3_4_103_out1 = {8'b00000000, s_reg_163}*12'd0258;

         // resource: DC_Filter_Add_13Sx10U_13S_4  instance: DC_Filter_Add_13Sx10U_13S_4_104
         assign DC_Filter_Add_13Sx10U_13S_4_104_out1 = {1'b0, DC_Filter_Mul_12U_3_4_103_out1} + {{3'b000, 1'b0}, o_result_data[8:0]};

         // resource: DC_Filter_Mul_32Ux32U_32U_4  instance: DC_Filter_Mul_32Ux32U_32U_4_105
         assign DC_Filter_Mul_32Ux32U_32U_4_105_out1 = f2_array_rgb_out1*s_reg_158;

         // resource: DC_Filter_OrReduction_4U_1U_4  instance: DC_Filter_OrReduction_4U_1U_4_106
         assign DC_Filter_OrReduction_4U_1U_4_106_out1 = (|DC_Filter_Mul_32Ux32U_32U_4_105_out1[3:0]);

         // instance: drive_DC_Filter_And_1Ux1U_1U_4_107_in1
         assign DC_Filter_And_1Ux1U_1U_4_107_in1 = DC_Filter_Mul_32Ux32U_32U_4_105_out1[31];

         // resource: DC_Filter_And_1Ux1U_1U_4  instance: DC_Filter_And_1Ux1U_1U_4_107
         assign DC_Filter_And_1Ux1U_1U_4_107_out1 = DC_Filter_OrReduction_4U_1U_4_106_out1 & DC_Filter_And_1Ux1U_1U_4_107_in1;

         // instance: drive_DC_Filter_Add_28Sx1U_29S_4_108_in2
         assign DC_Filter_Add_28Sx1U_29S_4_108_in2 = DC_Filter_Mul_32Ux32U_32U_4_105_out1[31:4];

         // resource: DC_Filter_Add_28Sx1U_29S_4  instance: DC_Filter_Add_28Sx1U_29S_4_108
         assign DC_Filter_Add_28Sx1U_29S_4_108_out1 = {DC_Filter_Add_28Sx1U_29S_4_108_in2[27], DC_Filter_Add_28Sx1U_29S_4_108_in2} + {28'b0000000000000000000000000000, DC_Filter_And_1Ux1U_1U_4_107_out1};

         // resource: DC_Filter_OrReduction_2U_1U_4  instance: DC_Filter_OrReduction_2U_1U_4_109
         assign DC_Filter_OrReduction_2U_1U_4_109_out1 = (|s_reg_162[1:0]);

         // resource: DC_Filter_Eqi1u2_4  instance: DC_Filter_Eqi1u2_4_110
         assign DC_Filter_Eqi1u2_4_110_out1 = s_reg_163[1:0] == 2'd1;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_111
         assign DC_Filter_Add_3Sx2U_4S_4_111_out1 = {2'b00, s_reg_162[1:0]} + 4'd01;

         // resource: DC_Filter_Eqi2u2_4  instance: DC_Filter_Eqi2u2_4_112
         assign DC_Filter_Eqi2u2_4_112_out1 = s_reg_163[1:0] == 2'd2;

         // resource: DC_Filter_N_Mux_32_3_43_4
         always @(s_reg_151 or s_reg_152 or s_reg_153 or s_reg_163[1:0])
          begin :DC_Filter_N_Mux_32_3_43_4_113
            case (s_reg_163[1:0]) 

               2'd0:                begin
                  DC_Filter_N_Mux_32_3_43_4_113_out1 = s_reg_153;
               end
               
               2'd1:                begin
                  DC_Filter_N_Mux_32_3_43_4_113_out1 = s_reg_152;
               end
               
               default:                begin
                  DC_Filter_N_Mux_32_3_43_4_113_out1 = s_reg_151;
               end
               
            endcase

         end

         // resource: DC_Filter_Add_32Sx29S_32S_4  instance: DC_Filter_Add_32Sx29S_32S_4_114
         assign DC_Filter_Add_32Sx29S_32S_4_114_out1 = DC_Filter_N_Mux_32_3_43_4_113_out1 + {{ 3 {s_reg_164[28]}}, s_reg_164};

         // resource: DC_Filter_N_Mux_32_2_44_4
         always @(s_reg_151 or DC_Filter_Eqi2u2_4_112_out1 or DC_Filter_Add_32Sx29S_32S_4_114_out1)
          begin :DC_Filter_N_Mux_32_2_44_4_115
            if (DC_Filter_Eqi2u2_4_112_out1) begin
               DC_Filter_N_Mux_32_2_44_4_115_out1 = DC_Filter_Add_32Sx29S_32S_4_114_out1;
            end
            else begin
               DC_Filter_N_Mux_32_2_44_4_115_out1 = s_reg_151;
            end
         end

         // resource: DC_Filter_N_Mux_32_2_44_4
         always @(s_reg_152 or s_reg_160 or DC_Filter_Add_32Sx29S_32S_4_114_out1)
          begin :DC_Filter_N_Mux_32_2_44_4_116
            if (s_reg_160) begin
               DC_Filter_N_Mux_32_2_44_4_116_out1 = DC_Filter_Add_32Sx29S_32S_4_114_out1;
            end
            else begin
               DC_Filter_N_Mux_32_2_44_4_116_out1 = s_reg_152;
            end
         end

         // resource: DC_Filter_N_Mux_32_2_44_4
         always @(s_reg_153 or s_reg_159 or DC_Filter_Add_32Sx29S_32S_4_114_out1)
          begin :DC_Filter_N_Mux_32_2_44_4_117
            if (s_reg_159) begin
               DC_Filter_N_Mux_32_2_44_4_117_out1 = s_reg_153;
            end
            else begin
               DC_Filter_N_Mux_32_2_44_4_117_out1 = DC_Filter_Add_32Sx29S_32S_4_114_out1;
            end
         end

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_118
         assign DC_Filter_Add_3Sx2U_4S_4_118_out1 = {2'b00, s_reg_154_slice} + 4'd01;

         // resource: DC_Filter_Add2i1u8_4  instance: DC_Filter_Add2i1u8_4_119
         assign DC_Filter_Add2i1u8_4_119_out1 = {2'b00, s_reg_156[7:0]} + 10'd0001;

         // resource: regr_en_sc_5
         always @(posedge i_clk)
          begin :drive_global_state
            if (i_rst == 1'b0) begin
               global_state <= 5'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     global_state <= global_state_next;
                  end
                  
               endcase

            end
         end

         // resource: mux_5bx9i8c
         always @(s_reg_156 or s_reg_157 or s_reg_161 or s_reg_162 or DC_Filter_Add2i1s32_4_68_out1[10:0] or DC_Filter_Add_3Sx2U_4S_4_69_out1 or DC_Filter_Add_3Sx2U_4S_4_70_out1 or DC_Filter_Add2i1u1_4_75_out1 or DC_Filter_Add_3Sx2U_4S_4_77_out1 or DC_Filter_gen000002_4_78_out1 or DC_Filter_LtiLLs32_4_80_out1 or DC_Filter_Add_3Sx2U_4S_4_83_out1 or DC_Filter_Add_3Sx2U_4S_4_85_out1 or DC_Filter_Add_3Sx2U_4S_4_98_out1 or DC_Filter_Add_3Sx2U_4S_4_118_out1 or DC_Filter_Add2i1u8_4_119_out1 or 
global_state
         )
          begin :drive_global_state_next
            case (global_state) 

               5'd01:                begin
                  case (s_reg_156) 

                     11'd0258:                      begin
                        case (DC_Filter_Add_3Sx2U_4S_4_69_out1) 

                           4'd03:                            begin
                              global_state_next = global_state + 5'd01;
                           end
                           
                           default:                            begin
                              global_state_next = 5'd00;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state_next = 5'd00;
                     end
                     
                  endcase

               end
               
               5'd02:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_70_out1) 

                     4'd03:                      begin
                        global_state_next = 5'd13;
                     end
                     
                     default:                      begin
                        global_state_next = 5'd00;
                     end
                     
                  endcase

               end
               
               5'd04:                begin
                  case (s_reg_156) 

                     11'd0257:                      begin
                        case (DC_Filter_Add2i1u1_4_75_out1) 

                           3'd2:                            begin
                              global_state_next = global_state + 5'd01;
                           end
                           
                           default:                            begin
                              global_state_next = 5'd03;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state_next = 5'd03;
                     end
                     
                  endcase

               end
               
               5'd05:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_77_out1) 

                     4'd03:                      begin
                        if (DC_Filter_gen000002_4_78_out1) begin
                           global_state_next = 5'd08;
                        end
                        else begin
                           if (DC_Filter_LtiLLs32_4_80_out1) begin
                              global_state_next = global_state + 5'd01;
                           end
                           else begin
                              global_state_next = 5'd17;
                           end
                        end
                     end
                     
                     default:                      begin
                        global_state_next = 5'd03;
                     end
                     
                  endcase

               end
               
               5'd06:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_85_out1) 

                     4'd03:                      begin
                        global_state_next = global_state + 5'd01;
                     end
                     
                     default:                      begin
                        global_state_next = 5'd06;
                     end
                     
                  endcase

               end
               
               5'd07:                begin
                  case (DC_Filter_Add2i1s32_4_68_out1[10:0]) 

                     11'd0257:                      begin
                        global_state_next = 5'd17;
                     end
                     
                     default:                      begin
                        global_state_next = 5'd06;
                     end
                     
                  endcase

               end
               
               5'd12:                begin
                  case (DC_Filter_Add2i1s32_4_68_out1[10:0]) 

                     11'd0257:                      begin
                        global_state_next = 5'd17;
                     end
                     
                     default:                      begin
                        global_state_next = 5'd08;
                     end
                     
                  endcase

               end
               
               5'd16:                begin
                  case (s_reg_156) 

                     11'd0257:                      begin
                        case (DC_Filter_Add_3Sx2U_4S_4_83_out1) 

                           4'd03:                            begin
                              global_state_next = global_state + 5'd01;
                           end
                           
                           default:                            begin
                              global_state_next = 5'd13;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state_next = 5'd13;
                     end
                     
                  endcase

               end
               
               5'd17:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_98_out1) 

                     4'd03:                      begin
                        global_state_next = global_state + 5'd01;
                     end
                     
                     default:                      begin
                        global_state_next = 5'd17;
                     end
                     
                  endcase

               end
               
               5'd23:                begin
                  case (s_reg_162) 

                     4'd03:                      begin
                        /* state54 */
                        case (s_reg_161) 

                           4'd03:                            begin
                              global_state_next = global_state + 5'd01;
                           end
                           
                           default:                            begin
                              global_state_next = 5'd18;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state_next = 5'd19;
                     end
                     
                  endcase

               end
               
               5'd24:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_118_out1) 

                     4'd03:                      begin
                        global_state_next = global_state + 5'd01;
                     end
                     
                     default:                      begin
                        global_state_next = 5'd18;
                     end
                     
                  endcase

               end
               
               5'd25:                begin
                  /* state61 */
                  case (DC_Filter_Add2i1u8_4_119_out1) 

                     10'd0256:                      begin
                        case (s_reg_157) 

                           32'd0000000000:                            begin
                              global_state_next = 5'd13;
                           end
                           
                           default:                            begin
                              global_state_next = 5'd03;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state_next = 5'd17;
                     end
                     
                  endcase

               end
               
               default:                begin
                  global_state_next = global_state + 5'd01;
               end
               
            endcase

         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl0
            if (i_rst == 1'b0) begin
               gs_ctrl0 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd05, 5'd07:                         begin
                           gs_ctrl0 <= 2'd1;
                        end
                        
                        5'd06:                         begin
                           gs_ctrl0 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl0 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl1
            if (i_rst == 1'b0) begin
               gs_ctrl1 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd03:                         begin
                           gs_ctrl1 <= 2'd1;
                        end
                        
                        5'd05, 5'd06, 5'd07:                         begin
                           gs_ctrl1 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl1 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl2
            if (i_rst == 1'b0) begin
               gs_ctrl2 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd05:                         begin
                           gs_ctrl2 <= 2'd1;
                        end
                        
                        5'd07:                         begin
                           gs_ctrl2 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl2 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl3
            if (i_rst == 1'b0) begin
               gs_ctrl3 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd04, 5'd11:                         begin
                           gs_ctrl3 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl3 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_4bx10i10c
         // resource: regr_en_sc_4
         always @(posedge i_clk)
          begin :drive_gs_ctrl4
            if (i_rst == 1'b0) begin
               gs_ctrl4 <= 4'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd04, 5'd25:                         begin
                           gs_ctrl4 <= 4'd01;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl4 <= 4'd02;
                        end
                        
                        5'd08:                         begin
                           gs_ctrl4 <= 4'd03;
                        end
                        
                        5'd10:                         begin
                           gs_ctrl4 <= 4'd04;
                        end
                        
                        5'd11:                         begin
                           gs_ctrl4 <= 4'd05;
                        end
                        
                        5'd13:                         begin
                           gs_ctrl4 <= 4'd06;
                        end
                        
                        5'd14:                         begin
                           gs_ctrl4 <= 4'd07;
                        end
                        
                        5'd15:                         begin
                           gs_ctrl4 <= 4'd08;
                        end
                        
                        5'd20:                         begin
                           gs_ctrl4 <= 4'd09;
                        end
                        
                        default:                         begin
                           gs_ctrl4 <= 4'd00;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl5
            if (i_rst == 1'b0) begin
               gs_ctrl5 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd03:                         begin
                           gs_ctrl5 <= 3'd1;
                        end
                        
                        5'd08, 5'd13:                         begin
                           gs_ctrl5 <= 3'd2;
                        end
                        
                        5'd10, 5'd14:                         begin
                           gs_ctrl5 <= 3'd3;
                        end
                        
                        5'd11, 5'd15:                         begin
                           gs_ctrl5 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl5 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx7i7c
         // resource: regr_en_ss_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl6
            if (i_rst == 1'b0) begin
               gs_ctrl6 <= 3'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd00, 5'd03, 5'd08, 5'd10, 5'd11, 5'd13, 5'd14, 5'd15, 5'd20:                         begin
                           gs_ctrl6 <= 3'd1;
                        end
                        
                        5'd04:                         begin
                           gs_ctrl6 <= 3'd2;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl6 <= 3'd3;
                        end
                        
                        5'd06:                         begin
                           gs_ctrl6 <= 3'd4;
                        end
                        
                        5'd07:                         begin
                           gs_ctrl6 <= 3'd5;
                        end
                        
                        5'd25:                         begin
                           gs_ctrl6 <= 3'd6;
                        end
                        
                        default:                         begin
                           gs_ctrl6 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_ss_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl7
            if (i_rst == 1'b0) begin
               gs_ctrl7 <= 3'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd00, 5'd03, 5'd08, 5'd10, 5'd11, 5'd13, 5'd14, 5'd15:                         begin
                           gs_ctrl7 <= 3'd1;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl7 <= 3'd2;
                        end
                        
                        5'd06:                         begin
                           gs_ctrl7 <= 3'd3;
                        end
                        
                        5'd07:                         begin
                           gs_ctrl7 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl7 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl8
            if (i_rst == 1'b0) begin
               gs_ctrl8 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd05:                         begin
                           gs_ctrl8 <= 2'd1;
                        end
                        
                        5'd25:                         begin
                           gs_ctrl8 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl8 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl9
            if (i_rst == 1'b0) begin
               gs_ctrl9 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd05, 5'd25:                         begin
                           gs_ctrl9 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl9 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl11
            if (i_rst == 1'b0) begin
               gs_ctrl11 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd17:                         begin
                           gs_ctrl11 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl11 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl14
            if (i_rst == 1'b0) begin
               gs_ctrl14 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd19:                         begin
                           gs_ctrl14 <= 2'd1;
                        end
                        
                        5'd23:                         begin
                           gs_ctrl14 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl14 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i4c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl15
            if (i_rst == 1'b0) begin
               gs_ctrl15 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd19:                         begin
                           gs_ctrl15 <= 2'd1;
                        end
                        
                        5'd23:                         begin
                           gs_ctrl15 <= 2'd2;
                        end
                        
                        5'd24:                         begin
                           gs_ctrl15 <= 2'd3;
                        end
                        
                        default:                         begin
                           gs_ctrl15 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_24bx3i0c
         // resource: regr_en_24
         always @(posedge i_clk)
          begin :drive_o_rgb_inside_data
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     5'd08, 5'd13:                      begin
                        o_rgb_inside_data <= i_rgb_data;
                     end
                     
                     5'd19:                      begin
                        o_rgb_inside_data <= {{ 14 {DC_Filter_Add_9Sx2U_10S_4_44_out1[9]}}, DC_Filter_Add_9Sx2U_10S_4_44_out1};
                     end
                     
                     5'd24:                      begin
                        if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_60_out1) begin
                           o_rgb_inside_data <= {s_reg_69[7:0], {s_reg_70[7:0], s_reg_71[7:0]}};
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_m_busy_req_0
            if (i_rst == 1'b0) begin
               i_rgb_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        5'd02:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_12_out1) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        5'd05:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_19_out1 && DC_Filter_gen000002_4_20_out1) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        5'd08, 5'd13:                         begin
                           i_rgb_m_busy_req_0 <= 1'd1;
                        end
                        
                        5'd12:                         begin
                           if (11'd0257 != DC_Filter_Add2i1s32_4_10_out1[10:0]) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        5'd16:                         begin
                           case (s_reg_74) 

                              11'd0257:                               begin
                                 if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_25_out1) begin
                                    i_rgb_m_busy_req_0 <= 1'd0;
                                 end
                              end
                              
                              default:                               begin
                                 i_rgb_m_busy_req_0 <= 1'd0;
                              end
                              
                           endcase

                        end
                        
                        5'd25:                         begin
                           if (10'd0256 == DC_Filter_Add2i1u8_4_61_out1 && 32'd0000000000 == s_reg_75) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_rgb_inside_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_rgb_inside_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        5'd24:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_60_out1) begin
                              o_rgb_inside_m_req_m_trig_req <= DC_Filter_Not_1U_1U_1_6_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx3i1c
         always @(DC_Filter_And_1Ux1U_1U_4_62_out1 or DC_Filter_gen_busy_r_4_121_out1[0] or global_state1)
          begin :drive_stall1
            case (global_state1) 

               5'd08, 5'd13:                begin
                  stall1 = DC_Filter_gen_busy_r_4_121_out1[0];
               end
               
               5'd25:                begin
                  stall1 = DC_Filter_And_1Ux1U_1U_4_62_out1;
               end
               
               default:                begin
                  stall1 = 1'b0;
               end
               
            endcase

         end

         // resource: mux_32bx2i0c
         // resource: regr_en_sc_32
         always @(posedge i_clk)
          begin :drive_s_reg_69
            if (i_rst == 1'b0) begin
               s_reg_69 <= 32'd0000000000;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        5'd05:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_19_out1) begin
                              if (!DC_Filter_gen000002_4_20_out1 && !DC_Filter_LtiLLs32_4_22_out1) begin
                                 s_reg_69 <= DC_Filter_N_Mux_32_2_41_4_37_out1;
                              end
                           end
                        end
                        
                        5'd07, 5'd12:                         begin
                           if (11'd0257 == DC_Filter_Add2i1s32_4_10_out1[10:0]) begin
                              s_reg_69 <= DC_Filter_N_Mux_32_2_41_4_37_out1;
                           end
                        end
                        
                        5'd16:                         begin
                           if (11'd0257 == s_reg_74) begin
                              if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_25_out1) begin
                                 s_reg_69 <= DC_Filter_N_Mux_32_2_41_4_37_out1;
                              end
                           end
                        end
                        
                        5'd17:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_40_out1) begin
                              s_reg_69 <= DC_Filter_N_Mux_32_2_41_4_37_out1;
                           end
                        end
                        
                        5'd23:                         begin
                           s_reg_69 <= DC_Filter_N_Mux_32_2_44_4_57_out1;
                        end
                        
                        5'd25:                         begin
                           if (10'd0256 != DC_Filter_Add2i1u8_4_61_out1) begin
                              s_reg_69 <= DC_Filter_N_Mux_32_2_41_4_37_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i0c
         // resource: regr_en_sc_32
         always @(posedge i_clk)
          begin :drive_s_reg_70
            if (i_rst == 1'b0) begin
               s_reg_70 <= 32'd0000000000;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        5'd05:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_19_out1) begin
                              if (!DC_Filter_gen000002_4_20_out1 && !DC_Filter_LtiLLs32_4_22_out1) begin
                                 s_reg_70 <= DC_Filter_N_Mux_32_2_41_4_38_out1;
                              end
                           end
                        end
                        
                        5'd07, 5'd12:                         begin
                           if (11'd0257 == DC_Filter_Add2i1s32_4_10_out1[10:0]) begin
                              s_reg_70 <= DC_Filter_N_Mux_32_2_41_4_38_out1;
                           end
                        end
                        
                        5'd16:                         begin
                           if (11'd0257 == s_reg_74) begin
                              if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_25_out1) begin
                                 s_reg_70 <= DC_Filter_N_Mux_32_2_41_4_38_out1;
                              end
                           end
                        end
                        
                        5'd17:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_40_out1) begin
                              s_reg_70 <= DC_Filter_N_Mux_32_2_41_4_38_out1;
                           end
                        end
                        
                        5'd23:                         begin
                           s_reg_70 <= DC_Filter_N_Mux_32_2_44_4_58_out1;
                        end
                        
                        5'd25:                         begin
                           if (10'd0256 != DC_Filter_Add2i1u8_4_61_out1) begin
                              s_reg_70 <= DC_Filter_N_Mux_32_2_41_4_38_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i0c
         // resource: regr_en_sc_32
         always @(posedge i_clk)
          begin :drive_s_reg_71
            if (i_rst == 1'b0) begin
               s_reg_71 <= 32'd0000000000;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        5'd05:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_19_out1) begin
                              if (!DC_Filter_gen000002_4_20_out1 && !DC_Filter_LtiLLs32_4_22_out1) begin
                                 s_reg_71 <= DC_Filter_N_Mux_32_2_44_4_39_out1;
                              end
                           end
                        end
                        
                        5'd07, 5'd12:                         begin
                           if (11'd0257 == DC_Filter_Add2i1s32_4_10_out1[10:0]) begin
                              s_reg_71 <= DC_Filter_N_Mux_32_2_44_4_39_out1;
                           end
                        end
                        
                        5'd16:                         begin
                           if (11'd0257 == s_reg_74) begin
                              if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_25_out1) begin
                                 s_reg_71 <= DC_Filter_N_Mux_32_2_44_4_39_out1;
                              end
                           end
                        end
                        
                        5'd17:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_40_out1) begin
                              s_reg_71 <= DC_Filter_N_Mux_32_2_44_4_39_out1;
                           end
                        end
                        
                        5'd23:                         begin
                           s_reg_71 <= DC_Filter_N_Mux_32_2_44_4_59_out1;
                        end
                        
                        5'd25:                         begin
                           if (10'd0256 != DC_Filter_Add2i1u8_4_61_out1) begin
                              s_reg_71 <= DC_Filter_N_Mux_32_2_44_4_39_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx8i2c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_s_reg_72_slice
            if (i_rst == 1'b0) begin
               s_reg_72_slice <= 2'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        5'd02:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_12_out1) 

                              4'd03:                               begin
                                 s_reg_72_slice <= 2'd1;
                              end
                              
                              default:                               begin
                                 s_reg_72_slice <= DC_Filter_Add_3Sx2U_4S_4_12_out1[1:0];
                              end
                              
                           endcase

                        end
                        
                        5'd05:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_19_out1) 

                              4'd03:                               begin
                                 s_reg_72_slice <= 2'd0;
                              end
                              
                              default:                               begin
                                 s_reg_72_slice <= DC_Filter_Add_3Sx2U_4S_4_19_out1[1:0];
                              end
                              
                           endcase

                        end
                        
                        5'd06:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_27_out1) begin
                              s_reg_72_slice <= DC_Filter_Add_3Sx2U_4S_4_27_out1[1:0];
                           end
                        end
                        
                        5'd07, 5'd12:                         begin
                           s_reg_72_slice <= 2'd0;
                        end
                        
                        5'd16:                         begin
                           if (11'd0257 == s_reg_74) begin
                              case (DC_Filter_Add_3Sx2U_4S_4_25_out1) 

                                 4'd03:                                  begin
                                    s_reg_72_slice <= 2'd0;
                                 end
                                 
                                 default:                                  begin
                                    s_reg_72_slice <= DC_Filter_Add_3Sx2U_4S_4_25_out1[1:0];
                                 end
                                 
                              endcase

                           end
                        end
                        
                        5'd17:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_40_out1) 

                              4'd03:                               begin
                                 s_reg_72_slice <= 2'd0;
                              end
                              
                              default:                               begin
                                 s_reg_72_slice <= DC_Filter_Add_3Sx2U_4S_4_40_out1[1:0];
                              end
                              
                           endcase

                        end
                        
                        5'd24:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_60_out1) begin
                              s_reg_72_slice <= DC_Filter_Add_3Sx2U_4S_4_60_out1[1:0];
                           end
                        end
                        
                        5'd25:                         begin
                           /* state61 */
                           case (DC_Filter_Add2i1u8_4_61_out1) 

                              10'd0256:                               begin
                                 case (s_reg_75) 

                                    32'd0000000000:                                     begin
                                       s_reg_72_slice <= 2'd1;
                                    end
                                    
                                    default:                                     begin
                                       s_reg_72_slice <= 2'd0;
                                    end
                                    
                                 endcase

                              end
                              
                              default:                               begin
                                 s_reg_72_slice <= 2'd0;
                              end
                              
                           endcase

                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_4bx5i1c
         // resource: regr_en_sc_4
         always @(posedge i_clk)
          begin :drive_s_reg_73
            if (i_rst == 1'b0) begin
               s_reg_73 <= 4'd00;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        5'd01:                         begin
                           if (11'd0258 == s_reg_74) begin
                              if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_11_out1) begin
                                 s_reg_73 <= DC_Filter_Add_3Sx2U_4S_4_11_out1;
                              end
                           end
                        end
                        
                        5'd02:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_12_out1) begin
                              s_reg_73 <= 4'd00;
                           end
                        end
                        
                        5'd04:                         begin
                           case (s_reg_74) 

                              11'd0257:                               begin
                                 if (3'd2 != DC_Filter_Add2i1u1_4_17_out1) begin
                                    s_reg_73 <= {DC_Filter_Add2i1u1_4_17_out1[2], DC_Filter_Add2i1u1_4_17_out1};
                                 end
                              end
                              
                              default:                               begin
                                 s_reg_73 <= {s_reg_73[2], s_reg_73[2:0]};
                              end
                              
                           endcase

                        end
                        
                        5'd05:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_19_out1) begin
                              s_reg_73 <= 4'd00;
                           end
                        end
                        
                        5'd17:                         begin
                           s_reg_73 <= 4'd00;
                        end
                        
                        5'd23:                         begin
                           if (4'd03 == s_reg_80 && 4'd03 != s_reg_79) begin
                              s_reg_73 <= s_reg_79;
                           end
                        end
                        
                        5'd24:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_60_out1) begin
                              s_reg_73 <= 4'd00;
                           end
                        end
                        
                        5'd25:                         begin
                           if (32'd0000000000 != s_reg_75) begin
                              s_reg_73 <= 4'd00;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_11bx6i2c
         // resource: regr_en_sc_11
         always @(posedge i_clk)
          begin :drive_s_reg_74
            if (i_rst == 1'b0) begin
               s_reg_74 <= 11'd0000;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        5'd00, 5'd03, 5'd15:                         begin
                           s_reg_74 <= DC_Filter_Add2i1s32_4_10_out1[10:0];
                        end
                        
                        5'd01:                         begin
                           if (11'd0258 == s_reg_74) begin
                              if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_11_out1) begin
                                 s_reg_74 <= 11'd0000;
                              end
                           end
                        end
                        
                        5'd02:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_12_out1) 

                              4'd03:                               begin
                                 s_reg_74 <= 11'd0001;
                              end
                              
                              default:                               begin
                                 s_reg_74 <= 11'd0000;
                              end
                              
                           endcase

                        end
                        
                        5'd04:                         begin
                           if (11'd0257 == s_reg_74) begin
                              if (3'd2 != DC_Filter_Add2i1u1_4_17_out1) begin
                                 s_reg_74 <= 11'd0001;
                              end
                           end
                        end
                        
                        5'd05:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_19_out1) 

                              4'd03:                               begin
                                 if (DC_Filter_gen000002_4_20_out1) begin
                                    s_reg_74 <= 11'd0001;
                                 end
                                 else begin
                                    s_reg_74 <= {10'b0000000000, DC_Filter_LtiLLs32_4_22_out1};
                                 end
                              end
                              
                              default:                               begin
                                 s_reg_74 <= 11'd0001;
                              end
                              
                           endcase

                        end
                        
                        5'd07, 5'd12:                         begin
                           case (DC_Filter_Add2i1s32_4_10_out1[10:0]) 

                              11'd0257:                               begin
                                 s_reg_74 <= 11'd0000;
                              end
                              
                              default:                               begin
                                 s_reg_74 <= DC_Filter_Add2i1s32_4_10_out1[10:0];
                              end
                              
                           endcase

                        end
                        
                        5'd16:                         begin
                           if (11'd0257 == s_reg_74) begin
                              case (DC_Filter_Add_3Sx2U_4S_4_25_out1) 

                                 4'd03:                                  begin
                                    s_reg_74 <= 11'd0000;
                                 end
                                 
                                 default:                                  begin
                                    s_reg_74 <= 11'd0001;
                                 end
                                 
                              endcase

                           end
                        end
                        
                        5'd17:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_40_out1) begin
                              s_reg_74 <= {s_reg_74[9], s_reg_74[9:0]};
                           end
                        end
                        
                        5'd25:                         begin
                           /* state61 */
                           case (DC_Filter_Add2i1u8_4_61_out1) 

                              10'd0256:                               begin
                                 s_reg_74 <= 11'd0001;
                              end
                              
                              default:                               begin
                                 s_reg_74 <= {DC_Filter_Add2i1u8_4_61_out1[9], DC_Filter_Add2i1u8_4_61_out1};
                              end
                              
                           endcase

                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_32bx3i2c
         // resource: regr_en_32
         always @(posedge i_clk)
          begin :drive_s_reg_75
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     5'd02:                      begin
                        s_reg_75 <= 32'd0000000000;
                     end
                     
                     5'd07:                      begin
                        s_reg_75 <= s_reg_76;
                     end
                     
                     5'd12:                      begin
                        if (11'd0257 == DC_Filter_Add2i1s32_4_10_out1[10:0]) begin
                           s_reg_75 <= s_reg_76;
                        end
                     end
                     
                     5'd16:                      begin
                        if (11'd0257 == s_reg_74) begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_25_out1) begin
                              s_reg_75 <= 32'd0000000003;
                           end
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_32bx2i0c
         // resource: regr_en_32
         always @(posedge i_clk)
          begin :drive_s_reg_76
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     5'd04, 5'd11:                      begin
                        s_reg_76 <= DC_Filter_Add2i1s32_4_10_out1;
                     end
                     
                     5'd18:                      begin
                        s_reg_76 <= mask1_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_1
         always @(posedge i_clk)
          begin :drive_s_reg_77
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  s_reg_77 <= DC_Filter_OrReduction_2U_1U_4_51_out1;
               end
               
            endcase

         end

         // resource: regr_en_1
         always @(posedge i_clk)
          begin :drive_s_reg_78
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  s_reg_78 <= DC_Filter_Eqi1u2_4_52_out1;
               end
               
            endcase

         end

         // resource: regr_en_4
         always @(posedge i_clk)
          begin :drive_s_reg_79
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     5'd18:                      begin
                        s_reg_79 <= DC_Filter_Add_3Sx2U_4S_4_42_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_4bx2i1c
         // resource: regr_en_4
         always @(posedge i_clk)
          begin :drive_s_reg_80
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     5'd18:                      begin
                        s_reg_80 <= 4'd00;
                     end
                     
                     5'd22:                      begin
                        s_reg_80 <= DC_Filter_Add_3Sx2U_4S_4_53_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_4bx2i0c
         // resource: regr_en_4
         always @(posedge i_clk)
          begin :drive_s_reg_81
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     5'd19:                      begin
                        s_reg_81 <= DC_Filter_Add2u2Mul2i3u2_4_41_out1;
                     end
                     
                     5'd21:                      begin
                        s_reg_81 <= {2'b00, s_reg_80[1:0]};
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_29
         always @(posedge i_clk)
          begin :drive_s_reg_82
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     5'd21:                      begin
                        s_reg_82 <= DC_Filter_Add_28Sx1U_29S_4_50_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_2bx3i1c
         always @(DC_Filter_Add_3Sx2U_4S_4_27_out1[1:0] or gs_ctrl16 or s_reg_72_slice)
          begin :drive_DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in3
            case (gs_ctrl16) 

               2'd1:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in3 = 2'd0;
               end
               
               2'd2:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in3 = DC_Filter_Add_3Sx2U_4S_4_27_out1[1:0];
               end
               
               default:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in3 = s_reg_72_slice;
               end
               
            endcase

         end

         // resource: mux_2bx3i1c
         always @(s_reg_73[1:0] or gs_ctrl17)
          begin :drive_DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in2
            case (gs_ctrl17) 

               2'd1:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in2 = {1'b0, s_reg_73[0]};
               end
               
               2'd2:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in2 = 2'd2;
               end
               
               default:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in2 = s_reg_73[1:0];
               end
               
            endcase

         end

         // resource: mux_9bx3i1c
         always @(s_reg_74[8:0] or DC_Filter_Add2i1s32_4_10_out1[8:0] or gs_ctrl18)
          begin :drive_DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in1
            case (gs_ctrl18) 

               2'd1:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in1 = 9'd001;
               end
               
               2'd2:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in1 = DC_Filter_Add2i1s32_4_10_out1[8:0];
               end
               
               default:                begin
                  DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in1 = s_reg_74[8:0];
               end
               
            endcase

         end

         // resource: DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4  instance: DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9
         assign DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_out1 = ({10'b0000000000, DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in3}*12'd0003 + {10'b0000000000, DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in2})*12'd0258 + {3'b000, DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_in1};

         // resource: mux_32bx2i0c
         always @(s_reg_74[8:0] or s_reg_75 or gs_ctrl19)
          begin :drive_DC_Filter_Add2i1s32_4_10_in1
            if (gs_ctrl19) begin
               /* state16 */
               DC_Filter_Add2i1s32_4_10_in1 = s_reg_75;
            end
            else begin
               DC_Filter_Add2i1s32_4_10_in1 = {23'b00000000000000000000000, s_reg_74[8:0]};
            end
         end

         // resource: DC_Filter_Add2i1s32_4  instance: DC_Filter_Add2i1s32_4_10
         assign DC_Filter_Add2i1s32_4_10_out1 = DC_Filter_Add2i1s32_4_10_in1 + 32'd0000000001;

         // resource: mux_12bx9i0c
         always @(DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_out1 or DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_out1 or DC_Filter_Add2u9Mul2i258u2_4_16_out1 or DC_Filter_Add_3Sx2U_4S_4_19_out1 or DC_Filter_Add2u9Mul2i258Add2i3u2_4_21_out1 or DC_Filter_Add2u9Mul2i258Add2i6u2_4_23_out1 or DC_Filter_gen000003_4_28_out1 or DC_Filter_gen000001_4_30_out1 or DC_Filter_Add2iLLu9_4_32_out1 or DC_Filter_Add_13Sx10U_13S_4_46_out1[11:0] or gs_ctrl20)
          begin :drive_f1_array_rgb_in1
            case (gs_ctrl20) 

               4'd01:                begin
                  f1_array_rgb_in1 = DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_out1;
               end
               
               4'd02:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_19_out1) 

                     4'd03:                      begin
                        f1_array_rgb_in1 = DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_out1;
                     end
                     
                     default:                      begin
                        f1_array_rgb_in1 = DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_out1;
                     end
                     
                  endcase

               end
               
               4'd03:                begin
                  f1_array_rgb_in1 = {1'b0, DC_Filter_gen000003_4_28_out1};
               end
               
               4'd04:                begin
                  f1_array_rgb_in1 = DC_Filter_gen000001_4_30_out1;
               end
               
               4'd05:                begin
                  f1_array_rgb_in1 = DC_Filter_Add2iLLu9_4_32_out1;
               end
               
               4'd06:                begin
                  f1_array_rgb_in1 = DC_Filter_Add2u9Mul2i258u2_4_16_out1;
               end
               
               4'd07:                begin
                  f1_array_rgb_in1 = DC_Filter_Add2u9Mul2i258Add2i3u2_4_21_out1;
               end
               
               4'd08:                begin
                  f1_array_rgb_in1 = DC_Filter_Add2u9Mul2i258Add2i6u2_4_23_out1;
               end
               
               4'd09:                begin
                  f1_array_rgb_in1 = DC_Filter_Add_13Sx10U_13S_4_46_out1[11:0];
               end
               
               default:                begin
                  f1_array_rgb_in1 = DC_Filter_Add2u9Mul2i258Add2u2Mul2i3u2_4_9_out1;
               end
               
            endcase

         end

         // resource: mux_32bx5i1c
         always @(o_rgb_inside_data[23:8] or i_rgb_data[7:0] or f1_array_rgb_out1 or gs_ctrl21)
          begin :drive_f1_array_rgb_DIN
            case (gs_ctrl21) 

               3'd1:                begin
                  f1_array_rgb_DIN = f1_array_rgb_out1;
               end
               
               3'd2:                begin
                  f1_array_rgb_DIN = {24'b000000000000000000000000, i_rgb_data[7:0]};
               end
               
               3'd3:                begin
                  f1_array_rgb_DIN = {24'b000000000000000000000000, o_rgb_inside_data[15:8]};
               end
               
               3'd4:                begin
                  f1_array_rgb_DIN = {24'b000000000000000000000000, o_rgb_inside_data[23:16]};
               end
               
               default:                begin
                  f1_array_rgb_DIN = 32'd0000000000;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         always @(stall1 or s_reg_74 or s_reg_75 or DC_Filter_Add2i1s32_4_10_out1[10:0] or DC_Filter_Add2i1u1_4_17_out1 or DC_Filter_Add_3Sx2U_4S_4_19_out1 or DC_Filter_gen000002_4_20_out1 or DC_Filter_LtiLLs32_4_22_out1 or DC_Filter_Add_3Sx2U_4S_4_27_out1 or DC_Filter_Add2i1u8_4_61_out1 or gs_ctrl22)
          begin :drive_f1_array_rgb_CE
            if (stall1) begin
               f1_array_rgb_CE = 1'b0;
            end
            else begin
               case (gs_ctrl22) 

                  3'd1:                   begin
                     f1_array_rgb_CE = 1'b1;
                  end
                  
                  3'd2:                   begin
                     case (s_reg_74) 

                        11'd0257:                         begin
                           if (3'd2 != DC_Filter_Add2i1u1_4_17_out1) begin
                              f1_array_rgb_CE = 1'b1;
                           end
                           else begin
                              f1_array_rgb_CE = 1'b0;
                           end
                        end
                        
                        default:                         begin
                           f1_array_rgb_CE = 1'b1;
                        end
                        
                     endcase

                  end
                  
                  3'd3:                   begin
                     case (DC_Filter_Add_3Sx2U_4S_4_19_out1) 

                        4'd03:                         begin
                           if (!DC_Filter_gen000002_4_20_out1 && DC_Filter_LtiLLs32_4_22_out1) begin
                              f1_array_rgb_CE = 1'b1;
                           end
                           else begin
                              f1_array_rgb_CE = 1'b0;
                           end
                        end
                        
                        default:                         begin
                           f1_array_rgb_CE = 1'b1;
                        end
                        
                     endcase

                  end
                  
                  3'd4:                   begin
                     if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_27_out1) begin
                        f1_array_rgb_CE = 1'b1;
                     end
                     else begin
                        f1_array_rgb_CE = 1'b0;
                     end
                  end
                  
                  3'd5:                   begin
                     if (11'd0257 != DC_Filter_Add2i1s32_4_10_out1[10:0]) begin
                        f1_array_rgb_CE = 1'b1;
                     end
                     else begin
                        f1_array_rgb_CE = 1'b0;
                     end
                  end
                  
                  3'd6:                   begin
                     if (10'd0256 == DC_Filter_Add2i1u8_4_61_out1 && 32'd0000000000 != s_reg_75) begin
                        f1_array_rgb_CE = 1'b1;
                     end
                     else begin
                        f1_array_rgb_CE = 1'b0;
                     end
                  end
                  
                  default:                   begin
                     f1_array_rgb_CE = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         always @(stall1 or DC_Filter_Add2i1s32_4_10_out1[10:0] or DC_Filter_Add_3Sx2U_4S_4_19_out1 or DC_Filter_gen000002_4_20_out1 or DC_Filter_LtiLLs32_4_22_out1 or DC_Filter_Add_3Sx2U_4S_4_27_out1 or gs_ctrl23)
          begin :drive_f1_array_rgb_RW
            if (stall1) begin
               f1_array_rgb_RW = 1'b0;
            end
            else begin
               case (gs_ctrl23) 

                  3'd1:                   begin
                     f1_array_rgb_RW = 1'b1;
                  end
                  
                  3'd2:                   begin
                     case (DC_Filter_Add_3Sx2U_4S_4_19_out1) 

                        4'd03:                         begin
                           if (!DC_Filter_gen000002_4_20_out1 && DC_Filter_LtiLLs32_4_22_out1) begin
                              f1_array_rgb_RW = 1'b1;
                           end
                           else begin
                              f1_array_rgb_RW = 1'b0;
                           end
                        end
                        
                        default:                         begin
                           f1_array_rgb_RW = 1'b0;
                        end
                        
                     endcase

                  end
                  
                  3'd3:                   begin
                     if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_27_out1) begin
                        f1_array_rgb_RW = 1'b1;
                     end
                     else begin
                        f1_array_rgb_RW = 1'b0;
                     end
                  end
                  
                  3'd4:                   begin
                     if (11'd0257 != DC_Filter_Add2i1s32_4_10_out1[10:0]) begin
                        f1_array_rgb_RW = 1'b1;
                     end
                     else begin
                        f1_array_rgb_RW = 1'b0;
                     end
                  end
                  
                  default:                   begin
                     f1_array_rgb_RW = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_11
         assign DC_Filter_Add_3Sx2U_4S_4_11_out1 = {2'b00, s_reg_73[1:0]} + 4'd01;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_12
         assign DC_Filter_Add_3Sx2U_4S_4_12_out1 = {2'b00, s_reg_72_slice} + 4'd01;

         // resource: mux_2bx3i1c
         always @(DC_Filter_Add_3Sx2U_4S_4_19_out1[1:0] or gs_ctrl24 or s_reg_72_slice)
          begin :drive_DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in3
            case (gs_ctrl24) 

               2'd1:                begin
                  DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in3 = DC_Filter_Add_3Sx2U_4S_4_19_out1[1:0];
               end
               
               2'd2:                begin
                  DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in3 = 2'd0;
               end
               
               default:                begin
                  DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in3 = s_reg_72_slice;
               end
               
            endcase

         end

         // resource: mux_1bx3i1c
         always @(s_reg_73[0] or s_reg_74 or DC_Filter_Add2i1u1_4_17_out1[0] or gs_ctrl25)
          begin :drive_DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in2
            if (gs_ctrl25) begin
               DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in2 = 1'b0;
            end
            else begin
               case (s_reg_74) 

                  11'd0257:                   begin
                     DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in2 = DC_Filter_Add2i1u1_4_17_out1[0];
                  end
                  
                  default:                   begin
                     DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in2 = s_reg_73[0];
                  end
                  
               endcase

            end
         end

         // resource: mux_9bx2i1c
         always @(s_reg_74 or gs_ctrl25)
          begin :drive_DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in1
            if (gs_ctrl25) begin
               DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in1 = 9'd001;
            end
            else begin
               case (s_reg_74) 

                  11'd0257:                   begin
                     DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in1 = 9'd001;
                  end
                  
                  default:                   begin
                     DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in1 = s_reg_74[8:0];
                  end
                  
               endcase

            end
         end

         // resource: DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4  instance: DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13
         assign DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_out1 = ({10'b0000000000, DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in3}*12'd0003 + {8'b00000000, {3'b000, DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in2} + 4'd01})*12'd0258 + {3'b000, DC_Filter_Add2u9Mul2i258Add2Add2i1u1Mul2i3u2_4_13_in1};

         // resource: DC_Filter_Add2u9Mul2i258u2_4  instance: DC_Filter_Add2u9Mul2i258u2_4_16
         assign DC_Filter_Add2u9Mul2i258u2_4_16_out1 = {10'b0000000000, s_reg_72_slice}*12'd0258 + {3'b000, s_reg_74[8:0]};

         // resource: DC_Filter_Add2i1u1_4  instance: DC_Filter_Add2i1u1_4_17
         assign DC_Filter_Add2i1u1_4_17_out1 = {2'b00, s_reg_73[0]} + 3'd1;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_19
         assign DC_Filter_Add_3Sx2U_4S_4_19_out1 = {2'b00, s_reg_72_slice} + 4'd01;

         // resource: DC_Filter_gen000002_4  instance: DC_Filter_gen000002_4_20
         assign DC_Filter_gen000002_4_20_out1 = s_reg_75[31] ^ s_reg_75 < 32'd0000000257;

         // resource: DC_Filter_Add2u9Mul2i258Add2i3u2_4  instance: DC_Filter_Add2u9Mul2i258Add2i3u2_4_21
         assign DC_Filter_Add2u9Mul2i258Add2i3u2_4_21_out1 = ({10'b0000000000, s_reg_72_slice} + 12'd0003)*12'd0258 + {3'b000, s_reg_74[8:0]};

         // resource: DC_Filter_LtiLLs32_4  instance: DC_Filter_LtiLLs32_4_22
         assign DC_Filter_LtiLLs32_4_22_out1 = s_reg_75[31] ^ s_reg_75 < 32'd0000000258;

         // resource: DC_Filter_Add2u9Mul2i258Add2i6u2_4  instance: DC_Filter_Add2u9Mul2i258Add2i6u2_4_23
         assign DC_Filter_Add2u9Mul2i258Add2i6u2_4_23_out1 = ({10'b0000000000, s_reg_72_slice} + 12'd0006)*12'd0258 + {3'b000, s_reg_74[8:0]};

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_25
         assign DC_Filter_Add_3Sx2U_4S_4_25_out1 = {2'b00, s_reg_72_slice} + 4'd01;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_27
         assign DC_Filter_Add_3Sx2U_4S_4_27_out1 = {2'b00, s_reg_72_slice} + 4'd01;

         // resource: DC_Filter_gen000003_4  instance: DC_Filter_gen000003_4_28
         assign DC_Filter_gen000003_4_28_out1 = {2'b00, s_reg_74[8:0]} + 11'd0516;

         // resource: DC_Filter_gen000001_4  instance: DC_Filter_gen000001_4_30
         assign DC_Filter_gen000001_4_30_out1 = {3'b000, s_reg_74[8:0]} + 12'd1290;

         // resource: DC_Filter_Add2iLLu9_4  instance: DC_Filter_Add2iLLu9_4_32
         assign DC_Filter_Add2iLLu9_4_32_out1 = {3'b000, s_reg_74[8:0]} + 12'd2064;

         // resource: mux_2bx2i1c
         always @(DC_Filter_Add_3Sx2U_4S_4_40_out1[1:0] or gs_ctrl27)
          begin :drive_DC_Filter_Eqi2u2_4_34_in1
            if (gs_ctrl27) begin
               DC_Filter_Eqi2u2_4_34_in1 = DC_Filter_Add_3Sx2U_4S_4_40_out1[1:0];
            end
            else begin
               DC_Filter_Eqi2u2_4_34_in1 = 2'd0;
            end
         end

         // resource: DC_Filter_Eqi2u2_4  instance: DC_Filter_Eqi2u2_4_34
         assign DC_Filter_Eqi2u2_4_34_out1 = DC_Filter_Eqi2u2_4_34_in1 == 2'd2;

         // resource: DC_Filter_Eqi1u2_4  instance: DC_Filter_Eqi1u2_4_35
         assign DC_Filter_Eqi1u2_4_35_out1 = DC_Filter_Eqi2u2_4_34_in1 == 2'd1;

         // resource: DC_Filter_OrReduction_2U_1U_4  instance: DC_Filter_OrReduction_2U_1U_4_36
         assign DC_Filter_OrReduction_2U_1U_4_36_out1 = (|DC_Filter_Eqi2u2_4_34_in1);

         // resource: DC_Filter_N_Mux_32_2_41_4
         always @(s_reg_69 or DC_Filter_Eqi2u2_4_34_out1)
          begin :DC_Filter_N_Mux_32_2_41_4_37
            if (DC_Filter_Eqi2u2_4_34_out1) begin
               DC_Filter_N_Mux_32_2_41_4_37_out1 = 32'd0000000000;
            end
            else begin
               DC_Filter_N_Mux_32_2_41_4_37_out1 = s_reg_69;
            end
         end

         // resource: DC_Filter_N_Mux_32_2_41_4
         always @(s_reg_70 or DC_Filter_Eqi1u2_4_35_out1)
          begin :DC_Filter_N_Mux_32_2_41_4_38
            if (DC_Filter_Eqi1u2_4_35_out1) begin
               DC_Filter_N_Mux_32_2_41_4_38_out1 = 32'd0000000000;
            end
            else begin
               DC_Filter_N_Mux_32_2_41_4_38_out1 = s_reg_70;
            end
         end

         // resource: DC_Filter_N_Mux_32_2_44_4
         always @(s_reg_71 or DC_Filter_OrReduction_2U_1U_4_36_out1)
          begin :DC_Filter_N_Mux_32_2_44_4_39
            if (DC_Filter_OrReduction_2U_1U_4_36_out1) begin
               DC_Filter_N_Mux_32_2_44_4_39_out1 = s_reg_71;
            end
            else begin
               DC_Filter_N_Mux_32_2_44_4_39_out1 = 32'd0000000000;
            end
         end

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_40
         assign DC_Filter_Add_3Sx2U_4S_4_40_out1 = {2'b00, s_reg_72_slice} + 4'd01;

         // resource: mux_2bx3i1c
         always @(s_reg_79[1:0] or s_reg_80[1:0] or gs_ctrl30)
          begin :drive_DC_Filter_Add2u2Mul2i3u2_4_41_in2
            case (gs_ctrl30) 

               2'd1:                begin
                  DC_Filter_Add2u2Mul2i3u2_4_41_in2 = s_reg_80[1:0];
               end
               
               2'd2:                begin
                  DC_Filter_Add2u2Mul2i3u2_4_41_in2 = s_reg_79[1:0];
               end
               
               default:                begin
                  DC_Filter_Add2u2Mul2i3u2_4_41_in2 = 2'd0;
               end
               
            endcase

         end

         // resource: mux_2bx4i1c
         always @(s_reg_73[1:0] or DC_Filter_Add_3Sx2U_4S_4_60_out1[1:0] or gs_ctrl31 or s_reg_72_slice)
          begin :drive_DC_Filter_Add2u2Mul2i3u2_4_41_in1
            case (gs_ctrl31) 

               2'd1:                begin
                  DC_Filter_Add2u2Mul2i3u2_4_41_in1 = s_reg_73[1:0];
               end
               
               2'd2:                begin
                  DC_Filter_Add2u2Mul2i3u2_4_41_in1 = s_reg_72_slice;
               end
               
               2'd3:                begin
                  DC_Filter_Add2u2Mul2i3u2_4_41_in1 = DC_Filter_Add_3Sx2U_4S_4_60_out1[1:0];
               end
               
               default:                begin
                  DC_Filter_Add2u2Mul2i3u2_4_41_in1 = 2'd0;
               end
               
            endcase

         end

         // resource: DC_Filter_Add2u2Mul2i3u2_4  instance: DC_Filter_Add2u2Mul2i3u2_4_41
         assign DC_Filter_Add2u2Mul2i3u2_4_41_out1 = {2'b00, DC_Filter_Add2u2Mul2i3u2_4_41_in2}*4'd03 + {2'b00, DC_Filter_Add2u2Mul2i3u2_4_41_in1};

         // instance: drive_mask1_in1
         assign mask1_in1 = DC_Filter_Add2u2Mul2i3u2_4_41_out1;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_42
         assign DC_Filter_Add_3Sx2U_4S_4_42_out1 = {2'b00, s_reg_73[1:0]} + 4'd01;

         // instance: drive_DC_Filter_Add_9Sx2U_10S_4_44_in2
         assign DC_Filter_Add_9Sx2U_10S_4_44_in2 = {1'b0, s_reg_74[7:0]};

         // resource: DC_Filter_Add_9Sx2U_10S_4  instance: DC_Filter_Add_9Sx2U_10S_4_44
         assign DC_Filter_Add_9Sx2U_10S_4_44_out1 = {DC_Filter_Add_9Sx2U_10S_4_44_in2[8], DC_Filter_Add_9Sx2U_10S_4_44_in2} + {8'b00000000, s_reg_72_slice};

         // resource: DC_Filter_Mul_12U_3_4  instance: DC_Filter_Mul_12U_3_4_45
         assign DC_Filter_Mul_12U_3_4_45_out1 = {8'b00000000, s_reg_81}*12'd0258;

         // resource: DC_Filter_Add_13Sx10U_13S_4  instance: DC_Filter_Add_13Sx10U_13S_4_46
         assign DC_Filter_Add_13Sx10U_13S_4_46_out1 = {1'b0, DC_Filter_Mul_12U_3_4_45_out1} + {{3'b000, 1'b0}, o_rgb_inside_data[8:0]};

         // resource: DC_Filter_Mul_32Ux32U_32U_4  instance: DC_Filter_Mul_32Ux32U_32U_4_47
         assign DC_Filter_Mul_32Ux32U_32U_4_47_out1 = f1_array_rgb_out1*s_reg_76;

         // resource: DC_Filter_OrReduction_4U_1U_4  instance: DC_Filter_OrReduction_4U_1U_4_48
         assign DC_Filter_OrReduction_4U_1U_4_48_out1 = (|DC_Filter_Mul_32Ux32U_32U_4_47_out1[3:0]);

         // instance: drive_DC_Filter_And_1Ux1U_1U_4_49_in1
         assign DC_Filter_And_1Ux1U_1U_4_49_in1 = DC_Filter_Mul_32Ux32U_32U_4_47_out1[31];

         // resource: DC_Filter_And_1Ux1U_1U_4  instance: DC_Filter_And_1Ux1U_1U_4_49
         assign DC_Filter_And_1Ux1U_1U_4_49_out1 = DC_Filter_OrReduction_4U_1U_4_48_out1 & DC_Filter_And_1Ux1U_1U_4_49_in1;

         // instance: drive_DC_Filter_Add_28Sx1U_29S_4_50_in2
         assign DC_Filter_Add_28Sx1U_29S_4_50_in2 = DC_Filter_Mul_32Ux32U_32U_4_47_out1[31:4];

         // resource: DC_Filter_Add_28Sx1U_29S_4  instance: DC_Filter_Add_28Sx1U_29S_4_50
         assign DC_Filter_Add_28Sx1U_29S_4_50_out1 = {DC_Filter_Add_28Sx1U_29S_4_50_in2[27], DC_Filter_Add_28Sx1U_29S_4_50_in2} + {28'b0000000000000000000000000000, DC_Filter_And_1Ux1U_1U_4_49_out1};

         // resource: DC_Filter_OrReduction_2U_1U_4  instance: DC_Filter_OrReduction_2U_1U_4_51
         assign DC_Filter_OrReduction_2U_1U_4_51_out1 = (|s_reg_80[1:0]);

         // resource: DC_Filter_Eqi1u2_4  instance: DC_Filter_Eqi1u2_4_52
         assign DC_Filter_Eqi1u2_4_52_out1 = s_reg_81[1:0] == 2'd1;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_53
         assign DC_Filter_Add_3Sx2U_4S_4_53_out1 = {2'b00, s_reg_80[1:0]} + 4'd01;

         // resource: DC_Filter_Eqi2u2_4  instance: DC_Filter_Eqi2u2_4_54
         assign DC_Filter_Eqi2u2_4_54_out1 = s_reg_81[1:0] == 2'd2;

         // resource: DC_Filter_N_Mux_32_3_43_4
         always @(s_reg_69 or s_reg_70 or s_reg_71 or s_reg_81[1:0])
          begin :DC_Filter_N_Mux_32_3_43_4_55
            case (s_reg_81[1:0]) 

               2'd0:                begin
                  DC_Filter_N_Mux_32_3_43_4_55_out1 = s_reg_71;
               end
               
               2'd1:                begin
                  DC_Filter_N_Mux_32_3_43_4_55_out1 = s_reg_70;
               end
               
               default:                begin
                  DC_Filter_N_Mux_32_3_43_4_55_out1 = s_reg_69;
               end
               
            endcase

         end

         // resource: DC_Filter_Add_32Sx29S_32S_4  instance: DC_Filter_Add_32Sx29S_32S_4_56
         assign DC_Filter_Add_32Sx29S_32S_4_56_out1 = DC_Filter_N_Mux_32_3_43_4_55_out1 + {{ 3 {s_reg_82[28]}}, s_reg_82};

         // resource: DC_Filter_N_Mux_32_2_44_4
         always @(s_reg_69 or DC_Filter_Eqi2u2_4_54_out1 or DC_Filter_Add_32Sx29S_32S_4_56_out1)
          begin :DC_Filter_N_Mux_32_2_44_4_57
            if (DC_Filter_Eqi2u2_4_54_out1) begin
               DC_Filter_N_Mux_32_2_44_4_57_out1 = DC_Filter_Add_32Sx29S_32S_4_56_out1;
            end
            else begin
               DC_Filter_N_Mux_32_2_44_4_57_out1 = s_reg_69;
            end
         end

         // resource: DC_Filter_N_Mux_32_2_44_4
         always @(s_reg_70 or s_reg_78 or DC_Filter_Add_32Sx29S_32S_4_56_out1)
          begin :DC_Filter_N_Mux_32_2_44_4_58
            if (s_reg_78) begin
               DC_Filter_N_Mux_32_2_44_4_58_out1 = DC_Filter_Add_32Sx29S_32S_4_56_out1;
            end
            else begin
               DC_Filter_N_Mux_32_2_44_4_58_out1 = s_reg_70;
            end
         end

         // resource: DC_Filter_N_Mux_32_2_44_4
         always @(s_reg_71 or s_reg_77 or DC_Filter_Add_32Sx29S_32S_4_56_out1)
          begin :DC_Filter_N_Mux_32_2_44_4_59
            if (s_reg_77) begin
               DC_Filter_N_Mux_32_2_44_4_59_out1 = s_reg_71;
            end
            else begin
               DC_Filter_N_Mux_32_2_44_4_59_out1 = DC_Filter_Add_32Sx29S_32S_4_56_out1;
            end
         end

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_60
         assign DC_Filter_Add_3Sx2U_4S_4_60_out1 = {2'b00, s_reg_72_slice} + 4'd01;

         // resource: DC_Filter_Add2i1u8_4  instance: DC_Filter_Add2i1u8_4_61
         assign DC_Filter_Add2i1u8_4_61_out1 = {2'b00, s_reg_74[7:0]} + 10'd0001;

         // resource: regr_en_sc_5
         always @(posedge i_clk)
          begin :drive_global_state1
            if (i_rst == 1'b0) begin
               global_state1 <= 5'd00;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     global_state1 <= global_state1_next;
                  end
                  
               endcase

            end
         end

         // resource: mux_5bx9i8c
         always @(s_reg_74 or s_reg_75 or s_reg_79 or s_reg_80 or DC_Filter_Add2i1s32_4_10_out1[10:0] or DC_Filter_Add_3Sx2U_4S_4_11_out1 or DC_Filter_Add_3Sx2U_4S_4_12_out1 or DC_Filter_Add2i1u1_4_17_out1 or DC_Filter_Add_3Sx2U_4S_4_19_out1 or DC_Filter_gen000002_4_20_out1 or DC_Filter_LtiLLs32_4_22_out1 or DC_Filter_Add_3Sx2U_4S_4_25_out1 or DC_Filter_Add_3Sx2U_4S_4_27_out1 or DC_Filter_Add_3Sx2U_4S_4_40_out1 or DC_Filter_Add_3Sx2U_4S_4_60_out1 or DC_Filter_Add2i1u8_4_61_out1 or global_state1)
          begin :drive_global_state1_next
            case (global_state1) 

               5'd01:                begin
                  case (s_reg_74) 

                     11'd0258:                      begin
                        case (DC_Filter_Add_3Sx2U_4S_4_11_out1) 

                           4'd03:                            begin
                              global_state1_next = global_state1 + 5'd01;
                           end
                           
                           default:                            begin
                              global_state1_next = 5'd00;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state1_next = 5'd00;
                     end
                     
                  endcase

               end
               
               5'd02:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_12_out1) 

                     4'd03:                      begin
                        global_state1_next = 5'd13;
                     end
                     
                     default:                      begin
                        global_state1_next = 5'd00;
                     end
                     
                  endcase

               end
               
               5'd04:                begin
                  case (s_reg_74) 

                     11'd0257:                      begin
                        case (DC_Filter_Add2i1u1_4_17_out1) 

                           3'd2:                            begin
                              global_state1_next = global_state1 + 5'd01;
                           end
                           
                           default:                            begin
                              global_state1_next = 5'd03;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state1_next = 5'd03;
                     end
                     
                  endcase

               end
               
               5'd05:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_19_out1) 

                     4'd03:                      begin
                        if (DC_Filter_gen000002_4_20_out1) begin
                           global_state1_next = 5'd08;
                        end
                        else begin
                           if (DC_Filter_LtiLLs32_4_22_out1) begin
                              global_state1_next = global_state1 + 5'd01;
                           end
                           else begin
                              global_state1_next = 5'd17;
                           end
                        end
                     end
                     
                     default:                      begin
                        global_state1_next = 5'd03;
                     end
                     
                  endcase

               end
               
               5'd06:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_27_out1) 

                     4'd03:                      begin
                        global_state1_next = global_state1 + 5'd01;
                     end
                     
                     default:                      begin
                        global_state1_next = 5'd06;
                     end
                     
                  endcase

               end
               
               5'd07:                begin
                  case (DC_Filter_Add2i1s32_4_10_out1[10:0]) 

                     11'd0257:                      begin
                        global_state1_next = 5'd17;
                     end
                     
                     default:                      begin
                        global_state1_next = 5'd06;
                     end
                     
                  endcase

               end
               
               5'd12:                begin
                  case (DC_Filter_Add2i1s32_4_10_out1[10:0]) 

                     11'd0257:                      begin
                        global_state1_next = 5'd17;
                     end
                     
                     default:                      begin
                        global_state1_next = 5'd08;
                     end
                     
                  endcase

               end
               
               5'd16:                begin
                  case (s_reg_74) 

                     11'd0257:                      begin
                        case (DC_Filter_Add_3Sx2U_4S_4_25_out1) 

                           4'd03:                            begin
                              global_state1_next = global_state1 + 5'd01;
                           end
                           
                           default:                            begin
                              global_state1_next = 5'd13;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state1_next = 5'd13;
                     end
                     
                  endcase

               end
               
               5'd17:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_40_out1) 

                     4'd03:                      begin
                        global_state1_next = global_state1 + 5'd01;
                     end
                     
                     default:                      begin
                        global_state1_next = 5'd17;
                     end
                     
                  endcase

               end
               
               5'd23:                begin
                  case (s_reg_80) 

                     4'd03:                      begin
                        /* state54 */
                        case (s_reg_79) 

                           4'd03:                            begin
                              global_state1_next = global_state1 + 5'd01;
                           end
                           
                           default:                            begin
                              global_state1_next = 5'd18;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state1_next = 5'd19;
                     end
                     
                  endcase

               end
               
               5'd24:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_60_out1) 

                     4'd03:                      begin
                        global_state1_next = global_state1 + 5'd01;
                     end
                     
                     default:                      begin
                        global_state1_next = 5'd18;
                     end
                     
                  endcase

               end
               
               5'd25:                begin
                  /* state61 */
                  case (DC_Filter_Add2i1u8_4_61_out1) 

                     10'd0256:                      begin
                        case (s_reg_75) 

                           32'd0000000000:                            begin
                              global_state1_next = 5'd13;
                           end
                           
                           default:                            begin
                              global_state1_next = 5'd03;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state1_next = 5'd17;
                     end
                     
                  endcase

               end
               
               default:                begin
                  global_state1_next = global_state1 + 5'd01;
               end
               
            endcase

         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl16
            if (i_rst == 1'b0) begin
               gs_ctrl16 <= 2'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd05, 5'd07:                         begin
                           gs_ctrl16 <= 2'd1;
                        end
                        
                        5'd06:                         begin
                           gs_ctrl16 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl16 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl17
            if (i_rst == 1'b0) begin
               gs_ctrl17 <= 2'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd03:                         begin
                           gs_ctrl17 <= 2'd1;
                        end
                        
                        5'd05, 5'd06, 5'd07:                         begin
                           gs_ctrl17 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl17 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl18
            if (i_rst == 1'b0) begin
               gs_ctrl18 <= 2'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd05:                         begin
                           gs_ctrl18 <= 2'd1;
                        end
                        
                        5'd07:                         begin
                           gs_ctrl18 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl18 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl19
            if (i_rst == 1'b0) begin
               gs_ctrl19 <= 1'b0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd04, 5'd11:                         begin
                           gs_ctrl19 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl19 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_4bx10i10c
         // resource: regr_en_sc_4
         always @(posedge i_clk)
          begin :drive_gs_ctrl20
            if (i_rst == 1'b0) begin
               gs_ctrl20 <= 4'd00;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd04, 5'd25:                         begin
                           gs_ctrl20 <= 4'd01;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl20 <= 4'd02;
                        end
                        
                        5'd08:                         begin
                           gs_ctrl20 <= 4'd03;
                        end
                        
                        5'd10:                         begin
                           gs_ctrl20 <= 4'd04;
                        end
                        
                        5'd11:                         begin
                           gs_ctrl20 <= 4'd05;
                        end
                        
                        5'd13:                         begin
                           gs_ctrl20 <= 4'd06;
                        end
                        
                        5'd14:                         begin
                           gs_ctrl20 <= 4'd07;
                        end
                        
                        5'd15:                         begin
                           gs_ctrl20 <= 4'd08;
                        end
                        
                        5'd20:                         begin
                           gs_ctrl20 <= 4'd09;
                        end
                        
                        default:                         begin
                           gs_ctrl20 <= 4'd00;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl21
            if (i_rst == 1'b0) begin
               gs_ctrl21 <= 3'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd03:                         begin
                           gs_ctrl21 <= 3'd1;
                        end
                        
                        5'd08, 5'd13:                         begin
                           gs_ctrl21 <= 3'd2;
                        end
                        
                        5'd10, 5'd14:                         begin
                           gs_ctrl21 <= 3'd3;
                        end
                        
                        5'd11, 5'd15:                         begin
                           gs_ctrl21 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl21 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx7i7c
         // resource: regr_en_ss_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl22
            if (i_rst == 1'b0) begin
               gs_ctrl22 <= 3'd1;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd00, 5'd03, 5'd08, 5'd10, 5'd11, 5'd13, 5'd14, 5'd15, 5'd20:                         begin
                           gs_ctrl22 <= 3'd1;
                        end
                        
                        5'd04:                         begin
                           gs_ctrl22 <= 3'd2;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl22 <= 3'd3;
                        end
                        
                        5'd06:                         begin
                           gs_ctrl22 <= 3'd4;
                        end
                        
                        5'd07:                         begin
                           gs_ctrl22 <= 3'd5;
                        end
                        
                        5'd25:                         begin
                           gs_ctrl22 <= 3'd6;
                        end
                        
                        default:                         begin
                           gs_ctrl22 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_ss_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl23
            if (i_rst == 1'b0) begin
               gs_ctrl23 <= 3'd1;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd00, 5'd03, 5'd08, 5'd10, 5'd11, 5'd13, 5'd14, 5'd15:                         begin
                           gs_ctrl23 <= 3'd1;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl23 <= 3'd2;
                        end
                        
                        5'd06:                         begin
                           gs_ctrl23 <= 3'd3;
                        end
                        
                        5'd07:                         begin
                           gs_ctrl23 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl23 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl24
            if (i_rst == 1'b0) begin
               gs_ctrl24 <= 2'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd05:                         begin
                           gs_ctrl24 <= 2'd1;
                        end
                        
                        5'd25:                         begin
                           gs_ctrl24 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl24 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl25
            if (i_rst == 1'b0) begin
               gs_ctrl25 <= 1'b0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd05, 5'd25:                         begin
                           gs_ctrl25 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl25 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl27
            if (i_rst == 1'b0) begin
               gs_ctrl27 <= 1'b0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd17:                         begin
                           gs_ctrl27 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl27 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl30
            if (i_rst == 1'b0) begin
               gs_ctrl30 <= 2'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd19:                         begin
                           gs_ctrl30 <= 2'd1;
                        end
                        
                        5'd23:                         begin
                           gs_ctrl30 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl30 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i4c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl31
            if (i_rst == 1'b0) begin
               gs_ctrl31 <= 2'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        5'd19:                         begin
                           gs_ctrl31 <= 2'd1;
                        end
                        
                        5'd23:                         begin
                           gs_ctrl31 <= 2'd2;
                        end
                        
                        5'd24:                         begin
                           gs_ctrl31 <= 2'd3;
                        end
                        
                        default:                         begin
                           gs_ctrl31 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // instance: drive_i_rgb_busy
         assign i_rgb_busy = DC_Filter_gen_busy_r_4_121_out1[2];

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_121
         assign DC_Filter_gen_busy_r_4_121_out1 = {DC_Filter_gen_busy_r_4_121_gnew_req_i0, {DC_Filter_gen_busy_r_4_121_gdiv_i1, DC_Filter_gen_busy_r_4_121_gen_busy_0_i_rgb_m_data_is_invalid_next}};

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_121
         assign DC_Filter_gen_busy_r_4_121_gen_busy_0_i_rgb_m_data_is_invalid_next = ~DC_Filter_gen_busy_r_4_121_gdiv_i1;

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_121
         assign DC_Filter_gen_busy_r_4_121_gdiv_i1 = i_rgb_vld & !DC_Filter_gen_busy_r_4_121_gnew_req_i0;

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_121
         assign DC_Filter_gen_busy_r_4_121_gnew_req_i0 = i_rgb_m_busy_req_0 & (i_rgb_m_unvalidated_req | i_rgb_vld);

         // resource: regr_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_m_unvalidated_req
            if (i_rst == 1'b0) begin
               i_rgb_m_unvalidated_req <= 1'd1;
            end
            else begin
               i_rgb_m_unvalidated_req <= DC_Filter_N_Muxb_1_2_32_4_7_out1;
            end
         end

         // resource: DC_Filter_N_Muxb_1_2_32_4
         always @(i_rgb_vld or i_rgb_m_busy_req_0 or i_rgb_m_unvalidated_req)
          begin :DC_Filter_N_Muxb_1_2_32_4_7
            if (i_rgb_m_busy_req_0) begin
               DC_Filter_N_Muxb_1_2_32_4_7_out1 = i_rgb_m_unvalidated_req;
            end
            else begin
               DC_Filter_N_Muxb_1_2_32_4_7_out1 = i_rgb_vld;
            end
         end

         // instance: drive_o_result_vld
         assign o_result_vld = DC_Filter_Or_1Ux1U_1U_4_2_out1;

         // resource: DC_Filter_Or_1Ux1U_1U_4  instance: DC_Filter_Or_1Ux1U_1U_4_2
         assign DC_Filter_Or_1Ux1U_1U_4_2_out1 = o_result_m_unacked_req | DC_Filter_Xor_1Ux1U_1U_1_1_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_unacked_req
            if (i_rst == 1'b0) begin
               o_result_m_unacked_req <= 1'd0;
            end
            else begin
               o_result_m_unacked_req <= DC_Filter_And_1Ux1U_1U_4_64_out1;
            end
         end

         // resource: DC_Filter_And_1Ux1U_1U_4  instance: DC_Filter_And_1Ux1U_1U_4_64
         assign DC_Filter_And_1Ux1U_1U_4_64_out1 = o_result_busy & o_result_vld;

         // resource: DC_Filter_Xor_1Ux1U_1U_1  instance: DC_Filter_Xor_1Ux1U_1U_1_1
         assign DC_Filter_Xor_1Ux1U_1U_1_1_out1 = o_result_m_req_m_trig_req ^ o_result_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_result_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_result_m_req_m_prev_trig_req <= o_result_m_req_m_trig_req;
            end
         end

         // resource: DC_Filter_Not_1U_1U_1  instance: DC_Filter_Not_1U_1U_1_3
         assign DC_Filter_Not_1U_1U_1_3_out1 = !o_result_m_req_m_trig_req;

         // instance: drive_i_rgb_inside_busy
         assign i_rgb_inside_busy = DC_Filter_gen_busy_r_4_122_out1[2];

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_122
         assign DC_Filter_gen_busy_r_4_122_out1 = {DC_Filter_gen_busy_r_4_122_gnew_req_i0, {DC_Filter_gen_busy_r_4_122_gdiv_i1, DC_Filter_gen_busy_r_4_122_gen_busy_0_i_rgb_m_data_is_invalid_next}};

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_122
         assign DC_Filter_gen_busy_r_4_122_gen_busy_0_i_rgb_m_data_is_invalid_next = ~DC_Filter_gen_busy_r_4_122_gdiv_i1;

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_122
         assign DC_Filter_gen_busy_r_4_122_gdiv_i1 = i_rgb_inside_vld & !DC_Filter_gen_busy_r_4_122_gnew_req_i0;

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_122
         assign DC_Filter_gen_busy_r_4_122_gnew_req_i0 = i_rgb_inside_m_busy_req_0 & (i_rgb_inside_m_unvalidated_req | i_rgb_inside_vld);

         // resource: regr_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_inside_m_unvalidated_req
            if (i_rst == 1'b0) begin
               i_rgb_inside_m_unvalidated_req <= 1'd1;
            end
            else begin
               i_rgb_inside_m_unvalidated_req <= DC_Filter_N_Muxb_1_2_32_4_65_out1;
            end
         end

         // resource: DC_Filter_N_Muxb_1_2_32_4
         always @(i_rgb_inside_vld or i_rgb_inside_m_busy_req_0 or i_rgb_inside_m_unvalidated_req)
          begin :DC_Filter_N_Muxb_1_2_32_4_65
            if (i_rgb_inside_m_busy_req_0) begin
               DC_Filter_N_Muxb_1_2_32_4_65_out1 = i_rgb_inside_m_unvalidated_req;
            end
            else begin
               DC_Filter_N_Muxb_1_2_32_4_65_out1 = i_rgb_inside_vld;
            end
         end

         // instance: drive_o_rgb_inside_vld
         assign o_rgb_inside_vld = DC_Filter_Or_1Ux1U_1U_4_5_out1;

         // resource: DC_Filter_Or_1Ux1U_1U_4  instance: DC_Filter_Or_1Ux1U_1U_4_5
         assign DC_Filter_Or_1Ux1U_1U_4_5_out1 = o_rgb_inside_m_unacked_req | DC_Filter_Xor_1Ux1U_1U_1_4_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_rgb_inside_m_unacked_req
            if (i_rst == 1'b0) begin
               o_rgb_inside_m_unacked_req <= 1'd0;
            end
            else begin
               o_rgb_inside_m_unacked_req <= DC_Filter_And_1Ux1U_1U_4_62_out1;
            end
         end

         // resource: DC_Filter_And_1Ux1U_1U_4  instance: DC_Filter_And_1Ux1U_1U_4_62
         assign DC_Filter_And_1Ux1U_1U_4_62_out1 = o_rgb_inside_busy & o_rgb_inside_vld;

         // resource: DC_Filter_Xor_1Ux1U_1U_1  instance: DC_Filter_Xor_1Ux1U_1U_1_4
         assign DC_Filter_Xor_1Ux1U_1U_1_4_out1 = o_rgb_inside_m_req_m_trig_req ^ o_rgb_inside_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_rgb_inside_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_rgb_inside_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_rgb_inside_m_req_m_prev_trig_req <= o_rgb_inside_m_req_m_trig_req;
            end
         end

         // resource: DC_Filter_Not_1U_1U_1  instance: DC_Filter_Not_1U_1U_1_6
         assign DC_Filter_Not_1U_1U_1_6_out1 = !o_rgb_inside_m_req_m_trig_req;


endmodule

