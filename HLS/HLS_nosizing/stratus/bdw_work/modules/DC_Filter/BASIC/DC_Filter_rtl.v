// Generated by stratus_hls 19.12-s100  (91710.131054)
// Tue May  4 16:49:05 2021
// from ../DC_Filter.cpp

`timescale 1ps / 1ps

      
module DC_Filter(i_clk, i_rst, i_rgb_busy, i_rgb_vld, i_rgb_data, o_result_busy, o_result_vld, o_result_data, i_rgb_inside_busy, i_rgb_inside_vld, i_rgb_inside_data, o_rgb_inside_busy, o_rgb_inside_vld, o_rgb_inside_data);

      input i_clk;
      input i_rst;
      input i_rgb_vld;
      input [23:0] i_rgb_data;
      input o_result_busy;
      input i_rgb_inside_vld;
      input [23:0] i_rgb_inside_data;
      input o_rgb_inside_busy;
      output i_rgb_busy;
      output o_result_vld;
      output [23:0] o_result_data;
      reg [23:0] o_result_data;
      output i_rgb_inside_busy;
      output o_rgb_inside_vld;
      output [23:0] o_rgb_inside_data;
      reg [23:0] o_rgb_inside_data;
      reg o_rgb_inside_m_req_m_prev_trig_req;
      reg o_rgb_inside_m_unacked_req;
      wire DC_Filter_Xor_1Ux1U_1U_1_4_out1;
      wire DC_Filter_Or_1Ux1U_1U_4_5_out1;
      reg DC_Filter_N_Muxb_1_2_4_4_85_out1;
      reg i_rgb_inside_m_unvalidated_req;
      wire DC_Filter_gen_busy_r_4_162_gnew_req_i0;
      wire DC_Filter_gen_busy_r_4_162_gdiv_i1;
      wire DC_Filter_gen_busy_r_4_162_gen_busy_0_i_rgb_m_data_is_invalid_next;
      reg o_result_m_req_m_prev_trig_req;
      reg o_result_m_unacked_req;
      wire DC_Filter_Xor_1Ux1U_1U_1_1_out1;
      wire DC_Filter_Or_1Ux1U_1U_4_2_out1;
      reg DC_Filter_N_Muxb_1_2_4_4_7_out1;
      reg i_rgb_m_unvalidated_req;
      wire DC_Filter_gen_busy_r_4_161_gnew_req_i0;
      wire DC_Filter_gen_busy_r_4_161_gdiv_i1;
      wire DC_Filter_gen_busy_r_4_161_gen_busy_0_i_rgb_m_data_is_invalid_next;
      reg[5:0] global_state1_next;
      /*signed*/wire[27:0] DC_Filter_Add_28Sx1U_29S_4_70_in2;
      wire DC_Filter_And_1Ux1U_1U_4_69_out1;
      wire DC_Filter_And_1Ux1U_1U_4_69_in1;
      wire DC_Filter_OrReduction_4U_1U_4_68_out1;
      /*signed*/wire[8:0] DC_Filter_Add_9Sx2U_10S_4_64_in2;
      wire[3:0] DC_Filter_Mul_2Ux2U_4U_4_62_out1;
      wire[3:0] DC_Filter_Add_4Ux4U_4U_4_60_out1;
      wire[3:0] DC_Filter_Mul_2Ux2U_4U_4_59_out1;
      wire DC_Filter_OrReduction_2U_1U_4_54_out1;
      wire DC_Filter_Equal_2Ux1U_1U_4_53_out1;
      reg[1:0] DC_Filter_Equal_2Ux1U_1U_4_53_in2;
      reg gs_ctrl26;
      wire DC_Filter_Equal_2Ux2U_1U_4_52_out1;
      reg[1:0] DC_Filter_Equal_2Ux2U_1U_4_52_in2;
      reg[1:0] gs_ctrl25;
      /*signed*/reg[28:0] DC_Filter_Add_32Sx29S_32S_4_46_in1;
      /*signed*/reg[31:0] DC_Filter_Add_32Sx29S_32S_4_46_in2;
      reg[31:0] DC_Filter_N_Mux_32_3_2_4_75_out1;
      reg gs_ctrl23;
      wire[3:0] DC_Filter_Mul_2Ux2U_4U_4_42_out1;
      /*signed*/reg[1:0] DC_Filter_LessThan_32Sx10S_1U_4_33_in1_slice;
      reg gs_ctrl22;
      /*signed*/reg[11:0] DC_Filter_Add_13Sx10U_13S_4_26_in2_slice;
      wire[11:0] DC_Filter_Mul_9Ux3U_12U_4_19_out1;
      reg[2:0] DC_Filter_Mul_9Ux3U_12U_4_19_in1;
      reg gs_ctrl20;
      wire[3:0] DC_Filter_Mul_2Ux2U_4U_4_17_out1;
      reg gs_ctrl19;
      reg gs_ctrl18;
      reg[2:0] gs_ctrl17;
      /*signed*/wire[12:0] DC_Filter_Add_13Sx10U_13S_4_26_out1;
      /*signed*/wire[12:0] DC_Filter_Add_12Sx9U_13S_4_41_out1;
      /*signed*/wire[12:0] DC_Filter_Add_12Sx9U_13S_4_49_out1;
      /*signed*/wire[12:0] DC_Filter_Add_13Sx10U_13S_4_50_out1;
      reg[2:0] gs_ctrl16;
      /*signed*/wire[12:0] DC_Filter_Add_13Sx10U_13S_4_13_in2;
      wire[31:0] DC_Filter_Mul_32Ux32U_32U_4_12_out1;
      reg[31:0] DC_Filter_Mul_32Ux32U_32U_4_12_in1;
      reg[1:0] gs_ctrl15;
      reg[31:0] DC_Filter_Mul_32Ux32U_32U_4_12_in2;
      reg gs_ctrl14;
      wire[3:0] DC_Filter_Mul_2Ux2U_4U_4_10_out1;
      /*signed*/wire[28:0] DC_Filter_Add_28Sx1U_29S_4_70_out1;
      reg[28:0] s_reg_99;
      reg[1:0] s_reg_98;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_73_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_61_out1;
      /*signed*/reg[7:0] s_reg_95_slice;
      wire DC_Filter_Equal_2Ux1U_1U_4_72_out1;
      reg s_reg_93;
      wire DC_Filter_OrReduction_2U_1U_4_71_out1;
      /*signed*/wire[12:0] DC_Filter_Add_13Sx10U_13S_4_13_out1;
      /*signed*/wire[9:0] DC_Filter_Add_9Sx2U_10S_4_64_out1;
      /*signed*/reg[8:0] s_reg_90_slice1;
      /*signed*/wire[31:0] DC_Filter_Add_32Sx29S_32S_4_46_out1;
      reg[31:0] s_reg_94;
      wire[3:0] DC_Filter_Add_4Ux4U_4U_4_63_out1;
      wire[3:0] DC_Filter_Add_3Ux2U_4U_4_34_out1;
      wire[3:0] DC_Filter_Add_4Ux4U_4U_4_43_out1;
      /*signed*/wire[4:0] DC_Filter_Add_5Sx1U_5S_4_23_out1;
      wire[3:0] DC_Filter_Add_4Ux4U_4U_4_18_out1;
      wire[3:0] DC_Filter_Add_4Ux4U_4U_4_11_out1;
      reg[4:0] s_reg_88;
      reg[3:0] s_reg_97;
      reg[3:0] s_reg_96;
      wire[2:0] DC_Filter_Add_2Ux2U_3U_4_28_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_40_out1;
      /*signed*/wire[2:0] DC_Filter_Add_2Sx1U_3S_4_16_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_14_out1;
      reg[3:0] s_reg_87;
      /*signed*/reg[1:0] s_reg_86_slice1;
      reg[31:0] DC_Filter_N_Mux_32_2_3_4_79_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_3_4_57_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_3_4_78_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_0_4_56_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_3_4_77_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_58_out1;
      /*signed*/wire[12:0] DC_Filter_Add_12Sx9U_13S_4_9_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_0_4_55_out1;
      wire DC_Filter_LessThan_32Sx10S_1U_4_33_out1;
      wire DC_Filter_And_1Ux1U_1U_4_82_out1;
      wire[2:0] DC_Filter_gen_busy_r_4_161_out1;
      wire DC_Filter_Not_1U_1U_1_6_out1;
      reg o_rgb_inside_m_req_m_trig_req;
      /*signed*/wire[9:0] DC_Filter_Add_8Ux2S_10S_4_81_out1;
      reg[31:0] s_reg_89;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_39_out1;
      reg[11:0] s_reg_91;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_35_out1;
      reg s_reg_92;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_15_out1;
      reg i_rgb_m_busy_req_0;
      reg[31:0] s_reg_83;
      reg[31:0] s_reg_84;
      reg[31:0] s_reg_85;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_80_out1;
      reg[5:0] global_state1;
      reg stall1;
      reg[5:0] global_state_next;
      /*signed*/wire[27:0] DC_Filter_Add_28Sx1U_29S_4_148_in2;
      wire DC_Filter_And_1Ux1U_1U_4_147_out1;
      wire DC_Filter_And_1Ux1U_1U_4_147_in1;
      wire DC_Filter_OrReduction_4U_1U_4_146_out1;
      /*signed*/wire[8:0] DC_Filter_Add_9Sx2U_10S_4_142_in2;
      wire[3:0] DC_Filter_Mul_2Ux2U_4U_4_140_out1;
      wire[3:0] DC_Filter_Add_4Ux4U_4U_4_138_out1;
      wire[3:0] DC_Filter_Mul_2Ux2U_4U_4_137_out1;
      wire DC_Filter_OrReduction_2U_1U_4_132_out1;
      wire DC_Filter_Equal_2Ux1U_1U_4_131_out1;
      reg[1:0] DC_Filter_Equal_2Ux1U_1U_4_131_in2;
      reg gs_ctrl12;
      wire DC_Filter_Equal_2Ux2U_1U_4_130_out1;
      reg[1:0] DC_Filter_Equal_2Ux2U_1U_4_130_in2;
      reg[1:0] gs_ctrl11;
      /*signed*/reg[28:0] DC_Filter_Add_32Sx29S_32S_4_124_in1;
      /*signed*/reg[31:0] DC_Filter_Add_32Sx29S_32S_4_124_in2;
      reg[31:0] DC_Filter_N_Mux_32_3_2_4_153_out1;
      reg gs_ctrl9;
      wire[3:0] DC_Filter_Mul_2Ux2U_4U_4_120_out1;
      /*signed*/reg[1:0] DC_Filter_LessThan_32Sx10S_1U_4_111_in1_slice;
      reg gs_ctrl8;
      /*signed*/reg[11:0] DC_Filter_Add_13Sx10U_13S_4_104_in2_slice;
      wire[11:0] DC_Filter_Mul_9Ux3U_12U_4_97_out1;
      reg[2:0] DC_Filter_Mul_9Ux3U_12U_4_97_in1;
      reg gs_ctrl6;
      wire[3:0] DC_Filter_Mul_2Ux2U_4U_4_95_out1;
      reg gs_ctrl5;
      reg gs_ctrl4;
      reg[2:0] gs_ctrl3;
      /*signed*/wire[12:0] DC_Filter_Add_13Sx10U_13S_4_104_out1;
      /*signed*/wire[12:0] DC_Filter_Add_12Sx9U_13S_4_119_out1;
      /*signed*/wire[12:0] DC_Filter_Add_12Sx9U_13S_4_127_out1;
      /*signed*/wire[12:0] DC_Filter_Add_13Sx10U_13S_4_128_out1;
      reg[2:0] gs_ctrl2;
      /*signed*/wire[12:0] DC_Filter_Add_13Sx10U_13S_4_91_in2;
      wire[31:0] DC_Filter_Mul_32Ux32U_32U_4_90_out1;
      reg[31:0] DC_Filter_Mul_32Ux32U_32U_4_90_in1;
      reg[1:0] gs_ctrl1;
      reg[31:0] DC_Filter_Mul_32Ux32U_32U_4_90_in2;
      reg gs_ctrl0;
      wire[3:0] DC_Filter_Mul_2Ux2U_4U_4_88_out1;
      /*signed*/wire[28:0] DC_Filter_Add_28Sx1U_29S_4_148_out1;
      reg[28:0] s_reg_198;
      reg[1:0] s_reg_197;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_151_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_139_out1;
      /*signed*/reg[7:0] s_reg_194_slice;
      wire DC_Filter_Equal_2Ux1U_1U_4_150_out1;
      reg s_reg_192;
      wire DC_Filter_OrReduction_2U_1U_4_149_out1;
      /*signed*/wire[12:0] DC_Filter_Add_13Sx10U_13S_4_91_out1;
      /*signed*/wire[9:0] DC_Filter_Add_9Sx2U_10S_4_142_out1;
      /*signed*/reg[8:0] s_reg_189_slice1;
      /*signed*/wire[31:0] DC_Filter_Add_32Sx29S_32S_4_124_out1;
      reg[31:0] s_reg_193;
      wire[3:0] DC_Filter_Add_4Ux4U_4U_4_141_out1;
      wire[3:0] DC_Filter_Add_3Ux2U_4U_4_112_out1;
      wire[3:0] DC_Filter_Add_4Ux4U_4U_4_121_out1;
      /*signed*/wire[4:0] DC_Filter_Add_5Sx1U_5S_4_101_out1;
      wire[3:0] DC_Filter_Add_4Ux4U_4U_4_96_out1;
      wire[3:0] DC_Filter_Add_4Ux4U_4U_4_89_out1;
      reg[4:0] s_reg_187;
      reg[3:0] s_reg_196;
      reg[3:0] s_reg_195;
      wire[2:0] DC_Filter_Add_2Ux2U_3U_4_106_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_118_out1;
      /*signed*/wire[2:0] DC_Filter_Add_2Sx1U_3S_4_94_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_92_out1;
      reg[3:0] s_reg_186;
      /*signed*/reg[1:0] s_reg_185_slice1;
      reg[31:0] DC_Filter_N_Mux_32_2_3_4_157_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_3_4_135_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_3_4_156_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_0_4_134_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_3_4_155_out1;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_136_out1;
      /*signed*/wire[12:0] DC_Filter_Add_12Sx9U_13S_4_87_out1;
      reg[31:0] DC_Filter_N_Mux_32_2_0_4_133_out1;
      wire DC_Filter_LessThan_32Sx10S_1U_4_111_out1;
      wire DC_Filter_And_1Ux1U_1U_4_84_out1;
      wire[2:0] DC_Filter_gen_busy_r_4_162_out1;
      wire DC_Filter_Not_1U_1U_1_3_out1;
      reg o_result_m_req_m_trig_req;
      /*signed*/wire[9:0] DC_Filter_Add_8Ux2S_10S_4_159_out1;
      reg[31:0] s_reg_188;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_117_out1;
      reg[11:0] s_reg_190;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_113_out1;
      reg s_reg_191;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_93_out1;
      reg i_rgb_inside_m_busy_req_0;
      reg[31:0] s_reg_182;
      reg[31:0] s_reg_183;
      reg[31:0] s_reg_184;
      /*signed*/wire[3:0] DC_Filter_Add_3Sx2U_4S_4_158_out1;
      reg[5:0] global_state;
      reg stall0;
      reg[31:0] f1_array_rgb_DIN;
      reg f1_array_rgb_CE;
      reg f1_array_rgb_RW;
      reg[11:0] f1_array_rgb_in1;
      wire[31:0] f1_array_rgb_out1;
      wire[3:0] mask1_in1;
      wire[31:0] mask1_out1;
      reg[31:0] f2_array_rgb_DIN;
      reg f2_array_rgb_CE;
      reg f2_array_rgb_RW;
      reg[11:0] f2_array_rgb_in1;
      wire[31:0] f2_array_rgb_out1;
      wire[3:0] mask2_in1;
      wire[31:0] mask2_out1;

         DC_Filter_ROM_9X32_mask2 mask2(
                                    .in1( mask2_in1 ),
                                    .out1( mask2_out1 ),
                                    .clk( i_clk )
                                  );

         DC_Filter_RAM_2322X32_1 f2_array_rgb(
                                   .DIN( f2_array_rgb_DIN ),
                                   .CE( f2_array_rgb_CE ),
                                   .RW( f2_array_rgb_RW ),
                                   .in1( f2_array_rgb_in1 ),
                                   .out1( f2_array_rgb_out1 ),
                                   .clk( i_clk )
                                 );

         DC_Filter_ROM_9X32_mask1 mask1(
                                    .in1( mask1_in1 ),
                                    .out1( mask1_out1 ),
                                    .clk( i_clk )
                                  );

         DC_Filter_RAM_2322X32_1 f1_array_rgb(
                                   .DIN( f1_array_rgb_DIN ),
                                   .CE( f1_array_rgb_CE ),
                                   .RW( f1_array_rgb_RW ),
                                   .in1( f1_array_rgb_in1 ),
                                   .out1( f1_array_rgb_out1 ),
                                   .clk( i_clk )
                                 );

         // resource: mux_24bx2i0c
         // resource: regr_en_24
         always @(posedge i_clk)
          begin :drive_o_result_data
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd18, 6'd23:                      begin
                        o_result_data <= i_rgb_inside_data;
                     end
                     
                     6'd39:                      begin
                        if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_158_out1) begin
                           o_result_data <= {s_reg_182[7:0], {s_reg_183[7:0], s_reg_184[7:0]}};
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_inside_m_busy_req_0
            if (i_rst == 1'b0) begin
               i_rgb_inside_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        6'd04:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_93_out1) begin
                              i_rgb_inside_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        6'd12:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_113_out1 && s_reg_191) begin
                              i_rgb_inside_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        6'd18, 6'd23:                         begin
                           i_rgb_inside_m_busy_req_0 <= 1'd1;
                        end
                        
                        6'd22:                         begin
                           if (11'd0257 != s_reg_190[10:0]) begin
                              i_rgb_inside_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        6'd29:                         begin
                           case (s_reg_190[10:0]) 

                              11'd0257:                               begin
                                 if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_117_out1) begin
                                    i_rgb_inside_m_busy_req_0 <= 1'd0;
                                 end
                              end
                              
                              default:                               begin
                                 i_rgb_inside_m_busy_req_0 <= 1'd0;
                              end
                              
                           endcase

                        end
                        
                        6'd40:                         begin
                           if (10'd0256 == DC_Filter_Add_8Ux2S_10S_4_159_out1 && 32'd0000000000 == s_reg_188) begin
                              i_rgb_inside_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_result_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        6'd39:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_158_out1) begin
                              o_result_m_req_m_trig_req <= DC_Filter_Not_1U_1U_1_3_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx3i1c
         always @(DC_Filter_And_1Ux1U_1U_4_84_out1 or DC_Filter_gen_busy_r_4_162_out1[0] or global_state)
          begin :drive_stall0
            case (global_state) 

               6'd18, 6'd23:                begin
                  stall0 = DC_Filter_gen_busy_r_4_162_out1[0];
               end
               
               6'd40:                begin
                  stall0 = DC_Filter_And_1Ux1U_1U_4_84_out1;
               end
               
               default:                begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // resource: mux_32bx2i0c
         // resource: regr_en_sc_32
         always @(posedge i_clk)
          begin :drive_s_reg_182
            if (i_rst == 1'b0) begin
               s_reg_182 <= 32'd0000000000;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        6'd12:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_113_out1) begin
                              if (!s_reg_191 && !DC_Filter_LessThan_32Sx10S_1U_4_111_out1) begin
                                 s_reg_182 <= DC_Filter_N_Mux_32_2_0_4_133_out1;
                              end
                           end
                        end
                        
                        6'd17:                         begin
                           if (11'd0257 == DC_Filter_Add_12Sx9U_13S_4_87_out1[10:0]) begin
                              s_reg_182 <= DC_Filter_N_Mux_32_2_0_4_133_out1;
                           end
                        end
                        
                        6'd22:                         begin
                           if (11'd0257 == s_reg_190[10:0]) begin
                              s_reg_182 <= DC_Filter_N_Mux_32_2_0_4_133_out1;
                           end
                        end
                        
                        6'd29:                         begin
                           if (11'd0257 == s_reg_190[10:0]) begin
                              if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_117_out1) begin
                                 s_reg_182 <= DC_Filter_N_Mux_32_2_0_4_133_out1;
                              end
                           end
                        end
                        
                        6'd30:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_136_out1) begin
                              s_reg_182 <= DC_Filter_N_Mux_32_2_0_4_133_out1;
                           end
                        end
                        
                        6'd38:                         begin
                           s_reg_182 <= DC_Filter_N_Mux_32_2_3_4_155_out1;
                        end
                        
                        6'd40:                         begin
                           if (10'd0256 != DC_Filter_Add_8Ux2S_10S_4_159_out1) begin
                              s_reg_182 <= DC_Filter_N_Mux_32_2_0_4_133_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i0c
         // resource: regr_en_sc_32
         always @(posedge i_clk)
          begin :drive_s_reg_183
            if (i_rst == 1'b0) begin
               s_reg_183 <= 32'd0000000000;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        6'd12:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_113_out1) begin
                              if (!s_reg_191 && !DC_Filter_LessThan_32Sx10S_1U_4_111_out1) begin
                                 s_reg_183 <= DC_Filter_N_Mux_32_2_0_4_134_out1;
                              end
                           end
                        end
                        
                        6'd17:                         begin
                           if (11'd0257 == DC_Filter_Add_12Sx9U_13S_4_87_out1[10:0]) begin
                              s_reg_183 <= DC_Filter_N_Mux_32_2_0_4_134_out1;
                           end
                        end
                        
                        6'd22:                         begin
                           if (11'd0257 == s_reg_190[10:0]) begin
                              s_reg_183 <= DC_Filter_N_Mux_32_2_0_4_134_out1;
                           end
                        end
                        
                        6'd29:                         begin
                           if (11'd0257 == s_reg_190[10:0]) begin
                              if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_117_out1) begin
                                 s_reg_183 <= DC_Filter_N_Mux_32_2_0_4_134_out1;
                              end
                           end
                        end
                        
                        6'd30:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_136_out1) begin
                              s_reg_183 <= DC_Filter_N_Mux_32_2_0_4_134_out1;
                           end
                        end
                        
                        6'd38:                         begin
                           s_reg_183 <= DC_Filter_N_Mux_32_2_3_4_156_out1;
                        end
                        
                        6'd40:                         begin
                           if (10'd0256 != DC_Filter_Add_8Ux2S_10S_4_159_out1) begin
                              s_reg_183 <= DC_Filter_N_Mux_32_2_0_4_134_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i0c
         // resource: regr_en_sc_32
         always @(posedge i_clk)
          begin :drive_s_reg_184
            if (i_rst == 1'b0) begin
               s_reg_184 <= 32'd0000000000;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        6'd12:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_113_out1) begin
                              if (!s_reg_191 && !DC_Filter_LessThan_32Sx10S_1U_4_111_out1) begin
                                 s_reg_184 <= DC_Filter_N_Mux_32_2_3_4_135_out1;
                              end
                           end
                        end
                        
                        6'd17:                         begin
                           if (11'd0257 == DC_Filter_Add_12Sx9U_13S_4_87_out1[10:0]) begin
                              s_reg_184 <= DC_Filter_N_Mux_32_2_3_4_135_out1;
                           end
                        end
                        
                        6'd22:                         begin
                           if (11'd0257 == s_reg_190[10:0]) begin
                              s_reg_184 <= DC_Filter_N_Mux_32_2_3_4_135_out1;
                           end
                        end
                        
                        6'd29:                         begin
                           if (11'd0257 == s_reg_190[10:0]) begin
                              if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_117_out1) begin
                                 s_reg_184 <= DC_Filter_N_Mux_32_2_3_4_135_out1;
                              end
                           end
                        end
                        
                        6'd30:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_136_out1) begin
                              s_reg_184 <= DC_Filter_N_Mux_32_2_3_4_135_out1;
                           end
                        end
                        
                        6'd38:                         begin
                           s_reg_184 <= DC_Filter_N_Mux_32_2_3_4_157_out1;
                        end
                        
                        6'd40:                         begin
                           if (10'd0256 != DC_Filter_Add_8Ux2S_10S_4_159_out1) begin
                              s_reg_184 <= DC_Filter_N_Mux_32_2_3_4_135_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx8i2c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_s_reg_185_slice_slice
            if (i_rst == 1'b0) begin
               s_reg_185_slice1 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        6'd04:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_93_out1) 

                              4'd03:                               begin
                                 s_reg_185_slice1 <= 2'd1;
                              end
                              
                              default:                               begin
                                 s_reg_185_slice1 <= DC_Filter_Add_3Sx2U_4S_4_93_out1[1:0];
                              end
                              
                           endcase

                        end
                        
                        6'd12:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_113_out1) 

                              4'd03:                               begin
                                 s_reg_185_slice1 <= 2'd0;
                              end
                              
                              default:                               begin
                                 s_reg_185_slice1 <= DC_Filter_Add_3Sx2U_4S_4_113_out1[1:0];
                              end
                              
                           endcase

                        end
                        
                        6'd16:                         begin
                           if (4'd03 != s_reg_186) begin
                              s_reg_185_slice1 <= s_reg_186[1:0];
                           end
                        end
                        
                        6'd17, 6'd22:                         begin
                           s_reg_185_slice1 <= 2'd0;
                        end
                        
                        6'd29:                         begin
                           if (11'd0257 == s_reg_190[10:0]) begin
                              case (DC_Filter_Add_3Sx2U_4S_4_117_out1) 

                                 4'd03:                                  begin
                                    s_reg_185_slice1 <= 2'd0;
                                 end
                                 
                                 default:                                  begin
                                    s_reg_185_slice1 <= DC_Filter_Add_3Sx2U_4S_4_117_out1[1:0];
                                 end
                                 
                              endcase

                           end
                        end
                        
                        6'd30:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_136_out1) 

                              4'd03:                               begin
                                 s_reg_185_slice1 <= 2'd0;
                              end
                              
                              default:                               begin
                                 s_reg_185_slice1 <= DC_Filter_Add_3Sx2U_4S_4_136_out1[1:0];
                              end
                              
                           endcase

                        end
                        
                        6'd39:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_158_out1) begin
                              s_reg_185_slice1 <= DC_Filter_Add_3Sx2U_4S_4_158_out1[1:0];
                           end
                        end
                        
                        6'd40:                         begin
                           /* state76 */
                           case (DC_Filter_Add_8Ux2S_10S_4_159_out1) 

                              10'd0256:                               begin
                                 case (s_reg_188) 

                                    32'd0000000000:                                     begin
                                       s_reg_185_slice1 <= 2'd1;
                                    end
                                    
                                    default:                                     begin
                                       s_reg_185_slice1 <= 2'd0;
                                    end
                                    
                                 endcase

                              end
                              
                              default:                               begin
                                 s_reg_185_slice1 <= 2'd0;
                              end
                              
                           endcase

                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_4bx7i1c
         // resource: regr_en_sc_4
         always @(posedge i_clk)
          begin :drive_s_reg_186
            if (i_rst == 1'b0) begin
               s_reg_186 <= 4'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        6'd03:                         begin
                           if (11'd0258 == s_reg_190[10:0]) begin
                              if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_92_out1) begin
                                 s_reg_186 <= DC_Filter_Add_3Sx2U_4S_4_92_out1;
                              end
                           end
                        end
                        
                        6'd04:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_93_out1) begin
                              s_reg_186 <= 4'd00;
                           end
                        end
                        
                        6'd10:                         begin
                           if (11'd0257 != DC_Filter_Add_12Sx9U_13S_4_87_out1[10:0]) begin
                              s_reg_186 <= {s_reg_186[2], s_reg_186[2:0]};
                           end
                        end
                        
                        6'd11:                         begin
                           if (3'd2 != DC_Filter_Add_2Sx1U_3S_4_94_out1) begin
                              s_reg_186 <= {DC_Filter_Add_2Sx1U_3S_4_94_out1[2], DC_Filter_Add_2Sx1U_3S_4_94_out1};
                           end
                        end
                        
                        6'd12:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_113_out1) begin
                              s_reg_186 <= 4'd00;
                           end
                        end
                        
                        6'd13:                         begin
                           s_reg_186 <= DC_Filter_Add_3Sx2U_4S_4_118_out1;
                        end
                        
                        6'd24:                         begin
                           s_reg_186 <= {1'b0, DC_Filter_Add_2Ux2U_3U_4_106_out1};
                        end
                        
                        6'd30:                         begin
                           s_reg_186 <= 4'd00;
                        end
                        
                        6'd38:                         begin
                           if (4'd03 == s_reg_196 && 4'd03 != s_reg_195) begin
                              s_reg_186 <= s_reg_195;
                           end
                        end
                        
                        6'd39:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_158_out1) begin
                              s_reg_186 <= 4'd00;
                           end
                        end
                        
                        6'd40:                         begin
                           if (32'd0000000000 != s_reg_188) begin
                              s_reg_186 <= 4'd00;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_5bx6i0c
         // resource: regr_en_5
         always @(posedge i_clk)
          begin :drive_s_reg_187
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd01:                      begin
                        s_reg_187 <= {1'b0, DC_Filter_Add_4Ux4U_4U_4_89_out1};
                     end
                     
                     6'd06:                      begin
                        s_reg_187 <= {1'b0, DC_Filter_Add_4Ux4U_4U_4_96_out1};
                     end
                     
                     6'd08:                      begin
                        s_reg_187 <= DC_Filter_Add_5Sx1U_5S_4_101_out1;
                     end
                     
                     6'd14:                      begin
                        s_reg_187 <= {1'b0, DC_Filter_Add_4Ux4U_4U_4_121_out1};
                     end
                     
                     6'd27:                      begin
                        s_reg_187 <= {1'b0, DC_Filter_Add_3Ux2U_4U_4_112_out1};
                     end
                     
                     6'd33:                      begin
                        s_reg_187 <= {1'b0, DC_Filter_Add_4Ux4U_4U_4_141_out1};
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_32bx4i2c
         // resource: regr_en_32
         always @(posedge i_clk)
          begin :drive_s_reg_188
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd04:                      begin
                        s_reg_188 <= 32'd0000000000;
                     end
                     
                     6'd17:                      begin
                        if (11'd0257 == DC_Filter_Add_12Sx9U_13S_4_87_out1[10:0]) begin
                           s_reg_188 <= s_reg_193;
                        end
                     end
                     
                     6'd22:                      begin
                        if (11'd0257 == s_reg_190[10:0]) begin
                           s_reg_188 <= DC_Filter_Add_32Sx29S_32S_4_124_out1;
                        end
                     end
                     
                     6'd29:                      begin
                        if (11'd0257 == s_reg_190[10:0]) begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_117_out1) begin
                              s_reg_188 <= 32'd0000000003;
                           end
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_9bx5i2c
         // resource: regr_en_sc_9
         always @(posedge i_clk)
          begin :drive_s_reg_189_slice_slice
            if (i_rst == 1'b0) begin
               s_reg_189_slice1 <= 9'd000;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        6'd03:                         begin
                           case (s_reg_190[10:0]) 

                              11'd0258:                               begin
                                 if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_92_out1) begin
                                    s_reg_189_slice1 <= 9'd000;
                                 end
                              end
                              
                              default:                               begin
                                 s_reg_189_slice1 <= s_reg_190[8:0];
                              end
                              
                           endcase

                        end
                        
                        6'd04:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_93_out1) 

                              4'd03:                               begin
                                 s_reg_189_slice1 <= 9'd001;
                              end
                              
                              default:                               begin
                                 s_reg_189_slice1 <= 9'd000;
                              end
                              
                           endcase

                        end
                        
                        6'd10, 6'd17:                         begin
                           if (11'd0257 != DC_Filter_Add_12Sx9U_13S_4_87_out1[10:0]) begin
                              s_reg_189_slice1 <= DC_Filter_Add_12Sx9U_13S_4_87_out1[8:0];
                           end
                        end
                        
                        6'd11:                         begin
                           if (3'd2 != DC_Filter_Add_2Sx1U_3S_4_94_out1) begin
                              s_reg_189_slice1 <= 9'd001;
                           end
                        end
                        
                        6'd12, 6'd40:                         begin
                           s_reg_189_slice1 <= 9'd001;
                        end
                        
                        6'd22:                         begin
                           if (11'd0257 != s_reg_190[10:0]) begin
                              s_reg_189_slice1 <= s_reg_190[8:0];
                           end
                        end
                        
                        6'd29:                         begin
                           case (s_reg_190[10:0]) 

                              11'd0257:                               begin
                                 if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_117_out1) begin
                                    s_reg_189_slice1 <= 9'd001;
                                 end
                              end
                              
                              default:                               begin
                                 s_reg_189_slice1 <= s_reg_190[8:0];
                              end
                              
                           endcase

                        end
                        
                        6'd34:                         begin
                           s_reg_189_slice1 <= DC_Filter_Add_9Sx2U_10S_4_142_out1[8:0];
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_12bx2i0c
         // resource: regr_en_12
         always @(posedge i_clk)
          begin :drive_s_reg_190
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd00, 6'd19, 6'd25:                      begin
                        s_reg_190 <= {DC_Filter_Add_12Sx9U_13S_4_87_out1[10], DC_Filter_Add_12Sx9U_13S_4_87_out1[10:0]};
                     end
                     
                     6'd07:                      begin
                        s_reg_190 <= DC_Filter_Add_13Sx10U_13S_4_91_out1[11:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_1bx2i0c
         // resource: regr_en_1
         always @(posedge i_clk)
          begin :drive_s_reg_191
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd11:                      begin
                        s_reg_191 <= DC_Filter_LessThan_32Sx10S_1U_4_111_out1;
                     end
                     
                     6'd37:                      begin
                        s_reg_191 <= DC_Filter_OrReduction_2U_1U_4_149_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_1
         always @(posedge i_clk)
          begin :drive_s_reg_192
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  s_reg_192 <= DC_Filter_Equal_2Ux1U_1U_4_150_out1;
               end
               
            endcase

         end

         // resource: mux_32bx2i0c
         // resource: regr_en_32
         always @(posedge i_clk)
          begin :drive_s_reg_193
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd16:                      begin
                        s_reg_193 <= DC_Filter_Add_32Sx29S_32S_4_124_out1;
                     end
                     
                     6'd32:                      begin
                        s_reg_193 <= mask2_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_8bx2i1c
         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_s_reg_194_slice
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd12, 6'd17, 6'd20, 6'd29:                      begin
                        s_reg_194_slice <= 8'd000;
                     end
                     
                     6'd40:                      begin
                        if (10'd0256 != DC_Filter_Add_8Ux2S_10S_4_159_out1) begin
                           s_reg_194_slice <= DC_Filter_Add_8Ux2S_10S_4_159_out1[7:0];
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_4
         always @(posedge i_clk)
          begin :drive_s_reg_195
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd32:                      begin
                        s_reg_195 <= DC_Filter_Add_3Sx2U_4S_4_139_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_4bx3i1c
         // resource: regr_en_4
         always @(posedge i_clk)
          begin :drive_s_reg_196
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd05:                      begin
                        s_reg_196 <= {DC_Filter_Add_2Sx1U_3S_4_94_out1[2], DC_Filter_Add_2Sx1U_3S_4_94_out1};
                     end
                     
                     6'd32:                      begin
                        s_reg_196 <= 4'd00;
                     end
                     
                     6'd37:                      begin
                        s_reg_196 <= DC_Filter_Add_3Sx2U_4S_4_151_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_197
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd36:                      begin
                        s_reg_197 <= s_reg_196[1:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_29
         always @(posedge i_clk)
          begin :drive_s_reg_198
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     6'd36:                      begin
                        s_reg_198 <= DC_Filter_Add_28Sx1U_29S_4_148_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: DC_Filter_Add_12Sx9U_13S_4  instance: DC_Filter_Add_12Sx9U_13S_4_87
         assign DC_Filter_Add_12Sx9U_13S_4_87_out1 = {4'b0000, s_reg_189_slice1} + 13'd0001;

         // resource: DC_Filter_Mul_2Ux2U_4U_4  instance: DC_Filter_Mul_2Ux2U_4U_4_88
         assign DC_Filter_Mul_2Ux2U_4U_4_88_out1 = {2'b00, s_reg_185_slice1}*4'd03;

         // resource: DC_Filter_Add_4Ux4U_4U_4  instance: DC_Filter_Add_4Ux4U_4U_4_89
         assign DC_Filter_Add_4Ux4U_4U_4_89_out1 = DC_Filter_Mul_2Ux2U_4U_4_88_out1 + {2'b00, s_reg_186[1:0]};

         // resource: mux_32bx2i1c
         always @(f2_array_rgb_out1 or gs_ctrl0)
          begin :drive_DC_Filter_Mul_32Ux32U_32U_4_90_in2
            if (gs_ctrl0) begin
               DC_Filter_Mul_32Ux32U_32U_4_90_in2 = f2_array_rgb_out1;
            end
            else begin
               DC_Filter_Mul_32Ux32U_32U_4_90_in2 = 32'd0000000258;
            end
         end

         // resource: mux_32bx3i0c
         always @(s_reg_187 or s_reg_193 or gs_ctrl1)
          begin :drive_DC_Filter_Mul_32Ux32U_32U_4_90_in1
            case (gs_ctrl1) 

               2'd1:                begin
                  DC_Filter_Mul_32Ux32U_32U_4_90_in1 = {28'b0000000000000000000000000000, s_reg_187[3:0]};
               end
               
               2'd2:                begin
                  DC_Filter_Mul_32Ux32U_32U_4_90_in1 = s_reg_193;
               end
               
               default:                begin
                  DC_Filter_Mul_32Ux32U_32U_4_90_in1 = {27'b000000000000000000000000000, s_reg_187};
               end
               
            endcase

         end

         // resource: DC_Filter_Mul_32Ux32U_32U_4  instance: DC_Filter_Mul_32Ux32U_32U_4_90
         assign DC_Filter_Mul_32Ux32U_32U_4_90_out1 = DC_Filter_Mul_32Ux32U_32U_4_90_in2*DC_Filter_Mul_32Ux32U_32U_4_90_in1;

         // instance: drive_DC_Filter_Add_13Sx10U_13S_4_91_in2
         assign DC_Filter_Add_13Sx10U_13S_4_91_in2 = {1'b0, DC_Filter_Mul_32Ux32U_32U_4_90_out1[11:0]};

         // resource: DC_Filter_Add_13Sx10U_13S_4  instance: DC_Filter_Add_13Sx10U_13S_4_91
         assign DC_Filter_Add_13Sx10U_13S_4_91_out1 = DC_Filter_Add_13Sx10U_13S_4_91_in2 + {{3'b000, 1'b0}, s_reg_189_slice1};

         // resource: mux_12bx6i0c
         always @(s_reg_190 or DC_Filter_Add_13Sx10U_13S_4_91_out1[11:0] or DC_Filter_Add_13Sx10U_13S_4_104_out1[11:0] or DC_Filter_Add_12Sx9U_13S_4_119_out1[10:0] or DC_Filter_Add_12Sx9U_13S_4_127_out1[11:0] or DC_Filter_Add_13Sx10U_13S_4_128_out1[11:0] or gs_ctrl2)
          begin :drive_f2_array_rgb_in1
            case (gs_ctrl2) 

               3'd1:                begin
                  f2_array_rgb_in1 = s_reg_190;
               end
               
               3'd2:                begin
                  f2_array_rgb_in1 = {1'b0, DC_Filter_Add_12Sx9U_13S_4_119_out1[10:0]};
               end
               
               3'd3:                begin
                  f2_array_rgb_in1 = DC_Filter_Add_12Sx9U_13S_4_127_out1[11:0];
               end
               
               3'd4:                begin
                  f2_array_rgb_in1 = DC_Filter_Add_13Sx10U_13S_4_128_out1[11:0];
               end
               
               3'd5:                begin
                  f2_array_rgb_in1 = DC_Filter_Add_13Sx10U_13S_4_104_out1[11:0];
               end
               
               default:                begin
                  f2_array_rgb_in1 = DC_Filter_Add_13Sx10U_13S_4_91_out1[11:0];
               end
               
            endcase

         end

         // resource: mux_32bx5i1c
         always @(i_rgb_inside_data[7:0] or o_result_data[23:8] or f2_array_rgb_out1 or gs_ctrl3)
          begin :drive_f2_array_rgb_DIN
            case (gs_ctrl3) 

               3'd1:                begin
                  f2_array_rgb_DIN = f2_array_rgb_out1;
               end
               
               3'd2:                begin
                  f2_array_rgb_DIN = {24'b000000000000000000000000, i_rgb_inside_data[7:0]};
               end
               
               3'd3:                begin
                  f2_array_rgb_DIN = {24'b000000000000000000000000, o_result_data[15:8]};
               end
               
               3'd4:                begin
                  f2_array_rgb_DIN = {24'b000000000000000000000000, o_result_data[23:16]};
               end
               
               default:                begin
                  f2_array_rgb_DIN = 32'd0000000000;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         always @(stall0 or gs_ctrl4)
          begin :drive_f2_array_rgb_CE
            if (stall0) begin
               f2_array_rgb_CE = 1'b0;
            end
            else begin
               if (gs_ctrl4) begin
                  f2_array_rgb_CE = 1'b1;
               end
               else begin
                  f2_array_rgb_CE = 1'b0;
               end
            end
         end

         // resource: mux_1bx2i2c
         always @(stall0 or gs_ctrl5)
          begin :drive_f2_array_rgb_RW
            if (stall0) begin
               f2_array_rgb_RW = 1'b0;
            end
            else begin
               if (gs_ctrl5) begin
                  f2_array_rgb_RW = 1'b1;
               end
               else begin
                  f2_array_rgb_RW = 1'b0;
               end
            end
         end

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_92
         assign DC_Filter_Add_3Sx2U_4S_4_92_out1 = {2'b00, s_reg_186[1:0]} + 4'd01;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_93
         assign DC_Filter_Add_3Sx2U_4S_4_93_out1 = {2'b00, s_reg_185_slice1} + 4'd01;

         // resource: DC_Filter_Add_2Sx1U_3S_4  instance: DC_Filter_Add_2Sx1U_3S_4_94
         assign DC_Filter_Add_2Sx1U_3S_4_94_out1 = {2'b00, s_reg_186[0]} + 3'd1;

         // resource: DC_Filter_Mul_2Ux2U_4U_4  instance: DC_Filter_Mul_2Ux2U_4U_4_95
         assign DC_Filter_Mul_2Ux2U_4U_4_95_out1 = {2'b00, s_reg_185_slice1}*4'd03;

         // resource: DC_Filter_Add_4Ux4U_4U_4  instance: DC_Filter_Add_4Ux4U_4U_4_96
         assign DC_Filter_Add_4Ux4U_4U_4_96_out1 = DC_Filter_Mul_2Ux2U_4U_4_95_out1 + {s_reg_196[2], s_reg_196[2:0]};

         // resource: mux_3bx2i0c
         always @(s_reg_186[2:0] or gs_ctrl6 or s_reg_185_slice1)
          begin :drive_DC_Filter_Mul_9Ux3U_12U_4_97_in1
            if (gs_ctrl6) begin
               DC_Filter_Mul_9Ux3U_12U_4_97_in1 = s_reg_186[2:0];
            end
            else begin
               DC_Filter_Mul_9Ux3U_12U_4_97_in1 = {1'b0, s_reg_185_slice1};
            end
         end

         // resource: DC_Filter_Mul_9Ux3U_12U_4  instance: DC_Filter_Mul_9Ux3U_12U_4_97
         assign DC_Filter_Mul_9Ux3U_12U_4_97_out1 = {9'b000000000, DC_Filter_Mul_9Ux3U_12U_4_97_in1}*12'd0258;

         // resource: DC_Filter_Add_5Sx1U_5S_4  instance: DC_Filter_Add_5Sx1U_5S_4_101
         assign DC_Filter_Add_5Sx1U_5S_4_101_out1 = {1'b0, DC_Filter_Mul_2Ux2U_4U_4_95_out1} + {4'b0000, s_reg_186[0]};

         // resource: mux_12bx2i0c
         always @(DC_Filter_Mul_9Ux3U_12U_4_97_out1 or gs_ctrl6)
          begin :drive_DC_Filter_Add_13Sx10U_13S_4_104_in2_slice
            if (gs_ctrl6) begin
               DC_Filter_Add_13Sx10U_13S_4_104_in2_slice = DC_Filter_Mul_9Ux3U_12U_4_97_out1;
            end
            else begin
               DC_Filter_Add_13Sx10U_13S_4_104_in2_slice = {1'b0, DC_Filter_Mul_9Ux3U_12U_4_97_out1[10:0]};
            end
         end

         // resource: DC_Filter_Add_13Sx10U_13S_4  instance: DC_Filter_Add_13Sx10U_13S_4_104
         assign DC_Filter_Add_13Sx10U_13S_4_104_out1 = {1'b0, DC_Filter_Add_13Sx10U_13S_4_104_in2_slice} + {{3'b000, 1'b0}, s_reg_189_slice1};

         // resource: DC_Filter_Add_2Ux2U_3U_4  instance: DC_Filter_Add_2Ux2U_3U_4_106
         assign DC_Filter_Add_2Ux2U_3U_4_106_out1 = {1'b0, s_reg_185_slice1} + 3'd3;

         // resource: mux_2bx2i2c
         always @(gs_ctrl8)
          begin :drive_DC_Filter_LessThan_32Sx10S_1U_4_111_in1_slice
            if (gs_ctrl8) begin
               DC_Filter_LessThan_32Sx10S_1U_4_111_in1_slice = 2'd2;
            end
            else begin
               DC_Filter_LessThan_32Sx10S_1U_4_111_in1_slice = 2'd1;
            end
         end

         // resource: DC_Filter_LessThan_32Sx10S_1U_4  instance: DC_Filter_LessThan_32Sx10S_1U_4_111
         assign DC_Filter_LessThan_32Sx10S_1U_4_111_out1 = s_reg_188[31] ^ s_reg_188 < {30'd0000000064, DC_Filter_LessThan_32Sx10S_1U_4_111_in1_slice};

         // resource: DC_Filter_Add_3Ux2U_4U_4  instance: DC_Filter_Add_3Ux2U_4U_4_112
         assign DC_Filter_Add_3Ux2U_4U_4_112_out1 = {2'b00, s_reg_185_slice1} + 4'd06;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_113
         assign DC_Filter_Add_3Sx2U_4S_4_113_out1 = {2'b00, s_reg_185_slice1} + 4'd01;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_117
         assign DC_Filter_Add_3Sx2U_4S_4_117_out1 = {2'b00, s_reg_185_slice1} + 4'd01;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_118
         assign DC_Filter_Add_3Sx2U_4S_4_118_out1 = {2'b00, s_reg_185_slice1} + 4'd01;

         // resource: DC_Filter_Add_12Sx9U_13S_4  instance: DC_Filter_Add_12Sx9U_13S_4_119
         assign DC_Filter_Add_12Sx9U_13S_4_119_out1 = {4'b0000, s_reg_189_slice1} + 13'd0516;

         // resource: DC_Filter_Mul_2Ux2U_4U_4  instance: DC_Filter_Mul_2Ux2U_4U_4_120
         assign DC_Filter_Mul_2Ux2U_4U_4_120_out1 = {2'b00, s_reg_185_slice1}*4'd03;

         // resource: DC_Filter_Add_4Ux4U_4U_4  instance: DC_Filter_Add_4Ux4U_4U_4_121
         assign DC_Filter_Add_4Ux4U_4U_4_121_out1 = DC_Filter_Mul_2Ux2U_4U_4_120_out1 + 4'd02;

         // resource: mux_32bx2i0c
         always @(s_reg_188 or DC_Filter_N_Mux_32_3_2_4_153_out1 or gs_ctrl9)
          begin :drive_DC_Filter_Add_32Sx29S_32S_4_124_in2
            if (gs_ctrl9) begin
               DC_Filter_Add_32Sx29S_32S_4_124_in2 = DC_Filter_N_Mux_32_3_2_4_153_out1;
            end
            else begin
               /* state34 */
               DC_Filter_Add_32Sx29S_32S_4_124_in2 = s_reg_188;
            end
         end

         // resource: mux_29bx2i1c
         always @(s_reg_198 or gs_ctrl9)
          begin :drive_DC_Filter_Add_32Sx29S_32S_4_124_in1
            if (gs_ctrl9) begin
               DC_Filter_Add_32Sx29S_32S_4_124_in1 = s_reg_198;
            end
            else begin
               DC_Filter_Add_32Sx29S_32S_4_124_in1 = 29'd000000001;
            end
         end

         // resource: DC_Filter_Add_32Sx29S_32S_4  instance: DC_Filter_Add_32Sx29S_32S_4_124
         assign DC_Filter_Add_32Sx29S_32S_4_124_out1 = DC_Filter_Add_32Sx29S_32S_4_124_in2 + {{ 3 {DC_Filter_Add_32Sx29S_32S_4_124_in1[28]}}, DC_Filter_Add_32Sx29S_32S_4_124_in1};

         // resource: DC_Filter_Add_12Sx9U_13S_4  instance: DC_Filter_Add_12Sx9U_13S_4_127
         assign DC_Filter_Add_12Sx9U_13S_4_127_out1 = {4'b0000, s_reg_189_slice1} + 13'd1290;

         // resource: DC_Filter_Add_13Sx10U_13S_4  instance: DC_Filter_Add_13Sx10U_13S_4_128
         assign DC_Filter_Add_13Sx10U_13S_4_128_out1 = {{3'b000, 1'b0}, s_reg_189_slice1} + 13'd2064;

         // resource: mux_2bx3i1c
         always @(s_reg_197 or DC_Filter_Add_3Sx2U_4S_4_136_out1[1:0] or gs_ctrl11)
          begin :drive_DC_Filter_Equal_2Ux2U_1U_4_130_in2
            case (gs_ctrl11) 

               2'd1:                begin
                  DC_Filter_Equal_2Ux2U_1U_4_130_in2 = DC_Filter_Add_3Sx2U_4S_4_136_out1[1:0];
               end
               
               2'd2:                begin
                  DC_Filter_Equal_2Ux2U_1U_4_130_in2 = s_reg_197;
               end
               
               default:                begin
                  DC_Filter_Equal_2Ux2U_1U_4_130_in2 = 2'd0;
               end
               
            endcase

         end

         // resource: DC_Filter_Equal_2Ux2U_1U_4  instance: DC_Filter_Equal_2Ux2U_1U_4_130
         assign DC_Filter_Equal_2Ux2U_1U_4_130_out1 = DC_Filter_Equal_2Ux2U_1U_4_130_in2 == 2'd2;

         // resource: mux_2bx2i1c
         always @(DC_Filter_Add_3Sx2U_4S_4_136_out1[1:0] or gs_ctrl12)
          begin :drive_DC_Filter_Equal_2Ux1U_1U_4_131_in2
            if (gs_ctrl12) begin
               DC_Filter_Equal_2Ux1U_1U_4_131_in2 = DC_Filter_Add_3Sx2U_4S_4_136_out1[1:0];
            end
            else begin
               DC_Filter_Equal_2Ux1U_1U_4_131_in2 = 2'd0;
            end
         end

         // resource: DC_Filter_Equal_2Ux1U_1U_4  instance: DC_Filter_Equal_2Ux1U_1U_4_131
         assign DC_Filter_Equal_2Ux1U_1U_4_131_out1 = DC_Filter_Equal_2Ux1U_1U_4_131_in2 == 2'd1;

         // resource: DC_Filter_OrReduction_2U_1U_4  instance: DC_Filter_OrReduction_2U_1U_4_132
         assign DC_Filter_OrReduction_2U_1U_4_132_out1 = (|DC_Filter_Equal_2Ux1U_1U_4_131_in2);

         // resource: DC_Filter_N_Mux_32_2_0_4
         always @(s_reg_182 or DC_Filter_Equal_2Ux2U_1U_4_130_out1)
          begin :DC_Filter_N_Mux_32_2_0_4_133
            if (DC_Filter_Equal_2Ux2U_1U_4_130_out1) begin
               DC_Filter_N_Mux_32_2_0_4_133_out1 = 32'd0000000000;
            end
            else begin
               DC_Filter_N_Mux_32_2_0_4_133_out1 = s_reg_182;
            end
         end

         // resource: DC_Filter_N_Mux_32_2_0_4
         always @(s_reg_183 or DC_Filter_Equal_2Ux1U_1U_4_131_out1)
          begin :DC_Filter_N_Mux_32_2_0_4_134
            if (DC_Filter_Equal_2Ux1U_1U_4_131_out1) begin
               DC_Filter_N_Mux_32_2_0_4_134_out1 = 32'd0000000000;
            end
            else begin
               DC_Filter_N_Mux_32_2_0_4_134_out1 = s_reg_183;
            end
         end

         // resource: DC_Filter_N_Mux_32_2_3_4
         always @(s_reg_184 or DC_Filter_OrReduction_2U_1U_4_132_out1)
          begin :DC_Filter_N_Mux_32_2_3_4_135
            if (DC_Filter_OrReduction_2U_1U_4_132_out1) begin
               DC_Filter_N_Mux_32_2_3_4_135_out1 = s_reg_184;
            end
            else begin
               DC_Filter_N_Mux_32_2_3_4_135_out1 = 32'd0000000000;
            end
         end

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_136
         assign DC_Filter_Add_3Sx2U_4S_4_136_out1 = {2'b00, s_reg_185_slice1} + 4'd01;

         // resource: DC_Filter_Mul_2Ux2U_4U_4  instance: DC_Filter_Mul_2Ux2U_4U_4_137
         assign DC_Filter_Mul_2Ux2U_4U_4_137_out1 = {2'b00, s_reg_186[1:0]}*4'd03;

         // resource: DC_Filter_Add_4Ux4U_4U_4  instance: DC_Filter_Add_4Ux4U_4U_4_138
         assign DC_Filter_Add_4Ux4U_4U_4_138_out1 = DC_Filter_Mul_2Ux2U_4U_4_137_out1 + {2'b00, s_reg_185_slice1};

         // instance: drive_mask2_in1
         assign mask2_in1 = DC_Filter_Add_4Ux4U_4U_4_138_out1;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_139
         assign DC_Filter_Add_3Sx2U_4S_4_139_out1 = {2'b00, s_reg_186[1:0]} + 4'd01;

         // resource: DC_Filter_Mul_2Ux2U_4U_4  instance: DC_Filter_Mul_2Ux2U_4U_4_140
         assign DC_Filter_Mul_2Ux2U_4U_4_140_out1 = {2'b00, s_reg_196[1:0]}*4'd03;

         // resource: DC_Filter_Add_4Ux4U_4U_4  instance: DC_Filter_Add_4Ux4U_4U_4_141
         assign DC_Filter_Add_4Ux4U_4U_4_141_out1 = DC_Filter_Mul_2Ux2U_4U_4_140_out1 + {2'b00, s_reg_186[1:0]};

         // instance: drive_DC_Filter_Add_9Sx2U_10S_4_142_in2
         assign DC_Filter_Add_9Sx2U_10S_4_142_in2 = {1'b0, s_reg_194_slice};

         // resource: DC_Filter_Add_9Sx2U_10S_4  instance: DC_Filter_Add_9Sx2U_10S_4_142
         assign DC_Filter_Add_9Sx2U_10S_4_142_out1 = {DC_Filter_Add_9Sx2U_10S_4_142_in2[8], DC_Filter_Add_9Sx2U_10S_4_142_in2} + {8'b00000000, s_reg_185_slice1};

         // resource: DC_Filter_OrReduction_4U_1U_4  instance: DC_Filter_OrReduction_4U_1U_4_146
         assign DC_Filter_OrReduction_4U_1U_4_146_out1 = (|DC_Filter_Mul_32Ux32U_32U_4_90_out1[3:0]);

         // instance: drive_DC_Filter_And_1Ux1U_1U_4_147_in1
         assign DC_Filter_And_1Ux1U_1U_4_147_in1 = DC_Filter_Mul_32Ux32U_32U_4_90_out1[31];

         // resource: DC_Filter_And_1Ux1U_1U_4  instance: DC_Filter_And_1Ux1U_1U_4_147
         assign DC_Filter_And_1Ux1U_1U_4_147_out1 = DC_Filter_OrReduction_4U_1U_4_146_out1 & DC_Filter_And_1Ux1U_1U_4_147_in1;

         // instance: drive_DC_Filter_Add_28Sx1U_29S_4_148_in2
         assign DC_Filter_Add_28Sx1U_29S_4_148_in2 = DC_Filter_Mul_32Ux32U_32U_4_90_out1[31:4];

         // resource: DC_Filter_Add_28Sx1U_29S_4  instance: DC_Filter_Add_28Sx1U_29S_4_148
         assign DC_Filter_Add_28Sx1U_29S_4_148_out1 = {DC_Filter_Add_28Sx1U_29S_4_148_in2[27], DC_Filter_Add_28Sx1U_29S_4_148_in2} + {28'b0000000000000000000000000000, DC_Filter_And_1Ux1U_1U_4_147_out1};

         // resource: DC_Filter_OrReduction_2U_1U_4  instance: DC_Filter_OrReduction_2U_1U_4_149
         assign DC_Filter_OrReduction_2U_1U_4_149_out1 = (|s_reg_196[1:0]);

         // resource: DC_Filter_Equal_2Ux1U_1U_4  instance: DC_Filter_Equal_2Ux1U_1U_4_150
         assign DC_Filter_Equal_2Ux1U_1U_4_150_out1 = s_reg_197 == 2'd1;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_151
         assign DC_Filter_Add_3Sx2U_4S_4_151_out1 = {2'b00, s_reg_196[1:0]} + 4'd01;

         // resource: DC_Filter_N_Mux_32_3_2_4
         always @(s_reg_182 or s_reg_183 or s_reg_184 or s_reg_197)
          begin :DC_Filter_N_Mux_32_3_2_4_153
            case (s_reg_197) 

               2'd0:                begin
                  DC_Filter_N_Mux_32_3_2_4_153_out1 = s_reg_184;
               end
               
               2'd1:                begin
                  DC_Filter_N_Mux_32_3_2_4_153_out1 = s_reg_183;
               end
               
               default:                begin
                  DC_Filter_N_Mux_32_3_2_4_153_out1 = s_reg_182;
               end
               
            endcase

         end

         // resource: DC_Filter_N_Mux_32_2_3_4
         always @(s_reg_182 or DC_Filter_Add_32Sx29S_32S_4_124_out1 or DC_Filter_Equal_2Ux2U_1U_4_130_out1)
          begin :DC_Filter_N_Mux_32_2_3_4_155
            if (DC_Filter_Equal_2Ux2U_1U_4_130_out1) begin
               DC_Filter_N_Mux_32_2_3_4_155_out1 = DC_Filter_Add_32Sx29S_32S_4_124_out1;
            end
            else begin
               DC_Filter_N_Mux_32_2_3_4_155_out1 = s_reg_182;
            end
         end

         // resource: DC_Filter_N_Mux_32_2_3_4
         always @(s_reg_183 or s_reg_192 or DC_Filter_Add_32Sx29S_32S_4_124_out1)
          begin :DC_Filter_N_Mux_32_2_3_4_156
            if (s_reg_192) begin
               DC_Filter_N_Mux_32_2_3_4_156_out1 = DC_Filter_Add_32Sx29S_32S_4_124_out1;
            end
            else begin
               DC_Filter_N_Mux_32_2_3_4_156_out1 = s_reg_183;
            end
         end

         // resource: DC_Filter_N_Mux_32_2_3_4
         always @(s_reg_184 or s_reg_191 or DC_Filter_Add_32Sx29S_32S_4_124_out1)
          begin :DC_Filter_N_Mux_32_2_3_4_157
            if (s_reg_191) begin
               DC_Filter_N_Mux_32_2_3_4_157_out1 = s_reg_184;
            end
            else begin
               DC_Filter_N_Mux_32_2_3_4_157_out1 = DC_Filter_Add_32Sx29S_32S_4_124_out1;
            end
         end

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_158
         assign DC_Filter_Add_3Sx2U_4S_4_158_out1 = {2'b00, s_reg_185_slice1} + 4'd01;

         // resource: DC_Filter_Add_8Ux2S_10S_4  instance: DC_Filter_Add_8Ux2S_10S_4_159
         assign DC_Filter_Add_8Ux2S_10S_4_159_out1 = {2'b00, s_reg_194_slice} + 10'd0001;

         // resource: regr_en_sc_6
         always @(posedge i_clk)
          begin :drive_global_state
            if (i_rst == 1'b0) begin
               global_state <= 6'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     global_state <= global_state_next;
                  end
                  
               endcase

            end
         end

         // resource: mux_6bx9i8c
         always @(s_reg_186 or s_reg_188 or s_reg_190[10:0] or s_reg_191 or s_reg_195 or s_reg_196 or DC_Filter_Add_12Sx9U_13S_4_87_out1[10:0] or DC_Filter_Add_3Sx2U_4S_4_92_out1 or DC_Filter_Add_3Sx2U_4S_4_93_out1 or DC_Filter_Add_2Sx1U_3S_4_94_out1 or DC_Filter_LessThan_32Sx10S_1U_4_111_out1 or DC_Filter_Add_3Sx2U_4S_4_113_out1 or DC_Filter_Add_3Sx2U_4S_4_117_out1 or DC_Filter_Add_3Sx2U_4S_4_136_out1 or DC_Filter_Add_3Sx2U_4S_4_158_out1 or DC_Filter_Add_8Ux2S_10S_4_159_out1 or global_state)
          begin :drive_global_state_next
            case (global_state) 

               6'd03:                begin
                  case (s_reg_190[10:0]) 

                     11'd0258:                      begin
                        case (DC_Filter_Add_3Sx2U_4S_4_92_out1) 

                           4'd03:                            begin
                              global_state_next = global_state + 6'd01;
                           end
                           
                           default:                            begin
                              global_state_next = 6'd00;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state_next = 6'd00;
                     end
                     
                  endcase

               end
               
               6'd04:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_93_out1) 

                     4'd03:                      begin
                        global_state_next = 6'd23;
                     end
                     
                     default:                      begin
                        global_state_next = 6'd00;
                     end
                     
                  endcase

               end
               
               6'd10:                begin
                  case (DC_Filter_Add_12Sx9U_13S_4_87_out1[10:0]) 

                     11'd0257:                      begin
                        global_state_next = global_state + 6'd01;
                     end
                     
                     default:                      begin
                        global_state_next = 6'd05;
                     end
                     
                  endcase

               end
               
               6'd11:                begin
                  case (DC_Filter_Add_2Sx1U_3S_4_94_out1) 

                     3'd2:                      begin
                        global_state_next = global_state + 6'd01;
                     end
                     
                     default:                      begin
                        global_state_next = 6'd05;
                     end
                     
                  endcase

               end
               
               6'd12:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_113_out1) 

                     4'd03:                      begin
                        if (s_reg_191) begin
                           global_state_next = 6'd18;
                        end
                        else begin
                           if (DC_Filter_LessThan_32Sx10S_1U_4_111_out1) begin
                              global_state_next = global_state + 6'd01;
                           end
                           else begin
                              global_state_next = 6'd30;
                           end
                        end
                     end
                     
                     default:                      begin
                        global_state_next = 6'd05;
                     end
                     
                  endcase

               end
               
               6'd16:                begin
                  case (s_reg_186) 

                     4'd03:                      begin
                        global_state_next = global_state + 6'd01;
                     end
                     
                     default:                      begin
                        global_state_next = 6'd13;
                     end
                     
                  endcase

               end
               
               6'd17:                begin
                  case (DC_Filter_Add_12Sx9U_13S_4_87_out1[10:0]) 

                     11'd0257:                      begin
                        global_state_next = 6'd30;
                     end
                     
                     default:                      begin
                        global_state_next = 6'd13;
                     end
                     
                  endcase

               end
               
               6'd22:                begin
                  case (s_reg_190[10:0]) 

                     11'd0257:                      begin
                        global_state_next = 6'd30;
                     end
                     
                     default:                      begin
                        global_state_next = 6'd18;
                     end
                     
                  endcase

               end
               
               6'd29:                begin
                  case (s_reg_190[10:0]) 

                     11'd0257:                      begin
                        case (DC_Filter_Add_3Sx2U_4S_4_117_out1) 

                           4'd03:                            begin
                              global_state_next = global_state + 6'd01;
                           end
                           
                           default:                            begin
                              global_state_next = 6'd23;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state_next = 6'd23;
                     end
                     
                  endcase

               end
               
               6'd30:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_136_out1) 

                     4'd03:                      begin
                        global_state_next = global_state + 6'd01;
                     end
                     
                     default:                      begin
                        global_state_next = 6'd30;
                     end
                     
                  endcase

               end
               
               6'd38:                begin
                  case (s_reg_196) 

                     4'd03:                      begin
                        /* state69 */
                        case (s_reg_195) 

                           4'd03:                            begin
                              global_state_next = global_state + 6'd01;
                           end
                           
                           default:                            begin
                              global_state_next = 6'd31;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state_next = 6'd33;
                     end
                     
                  endcase

               end
               
               6'd39:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_158_out1) 

                     4'd03:                      begin
                        global_state_next = global_state + 6'd01;
                     end
                     
                     default:                      begin
                        global_state_next = 6'd31;
                     end
                     
                  endcase

               end
               
               6'd40:                begin
                  /* state76 */
                  case (DC_Filter_Add_8Ux2S_10S_4_159_out1) 

                     10'd0256:                      begin
                        case (s_reg_188) 

                           32'd0000000000:                            begin
                              global_state_next = 6'd23;
                           end
                           
                           default:                            begin
                              global_state_next = 6'd05;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state_next = 6'd30;
                     end
                     
                  endcase

               end
               
               default:                begin
                  global_state_next = global_state + 6'd01;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl0
            if (i_rst == 1'b0) begin
               gs_ctrl0 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd36:                         begin
                           gs_ctrl0 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl0 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl1
            if (i_rst == 1'b0) begin
               gs_ctrl1 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd09:                         begin
                           gs_ctrl1 <= 2'd1;
                        end
                        
                        6'd36:                         begin
                           gs_ctrl1 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl1 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx6i6c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl2
            if (i_rst == 1'b0) begin
               gs_ctrl2 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd08:                         begin
                           gs_ctrl2 <= 3'd1;
                        end
                        
                        6'd18:                         begin
                           gs_ctrl2 <= 3'd2;
                        end
                        
                        6'd20:                         begin
                           gs_ctrl2 <= 3'd3;
                        end
                        
                        6'd21:                         begin
                           gs_ctrl2 <= 3'd4;
                        end
                        
                        6'd23, 6'd26:                         begin
                           gs_ctrl2 <= 3'd5;
                        end
                        
                        default:                         begin
                           gs_ctrl2 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl3
            if (i_rst == 1'b0) begin
               gs_ctrl3 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd09:                         begin
                           gs_ctrl3 <= 3'd1;
                        end
                        
                        6'd18, 6'd23:                         begin
                           gs_ctrl3 <= 3'd2;
                        end
                        
                        6'd20, 6'd26:                         begin
                           gs_ctrl3 <= 3'd3;
                        end
                        
                        6'd21, 6'd28:                         begin
                           gs_ctrl3 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl3 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl4
            if (i_rst == 1'b0) begin
               gs_ctrl4 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd02, 6'd08, 6'd09, 6'd15, 6'd18, 6'd20, 6'd21, 6'd23, 6'd26, 6'd28, 6'd35:                         begin
                           gs_ctrl4 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl4 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl5
            if (i_rst == 1'b0) begin
               gs_ctrl5 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd02, 6'd09, 6'd15, 6'd18, 6'd20, 6'd21, 6'd23, 6'd26, 6'd28:                         begin
                           gs_ctrl5 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl5 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl6
            if (i_rst == 1'b0) begin
               gs_ctrl6 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd26:                         begin
                           gs_ctrl6 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl6 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl8
            if (i_rst == 1'b0) begin
               gs_ctrl8 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd12:                         begin
                           gs_ctrl8 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl8 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl9
            if (i_rst == 1'b0) begin
               gs_ctrl9 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd38:                         begin
                           gs_ctrl9 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl9 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl11
            if (i_rst == 1'b0) begin
               gs_ctrl11 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd30:                         begin
                           gs_ctrl11 <= 2'd1;
                        end
                        
                        6'd38:                         begin
                           gs_ctrl11 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl11 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl12
            if (i_rst == 1'b0) begin
               gs_ctrl12 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        6'd30:                         begin
                           gs_ctrl12 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl12 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_24bx2i0c
         // resource: regr_en_24
         always @(posedge i_clk)
          begin :drive_o_rgb_inside_data
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     6'd18, 6'd23:                      begin
                        o_rgb_inside_data <= i_rgb_data;
                     end
                     
                     6'd39:                      begin
                        if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_80_out1) begin
                           o_rgb_inside_data <= {s_reg_83[7:0], {s_reg_84[7:0], s_reg_85[7:0]}};
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_m_busy_req_0
            if (i_rst == 1'b0) begin
               i_rgb_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        6'd04:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_15_out1) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        6'd12:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_35_out1 && s_reg_92) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        6'd18, 6'd23:                         begin
                           i_rgb_m_busy_req_0 <= 1'd1;
                        end
                        
                        6'd22:                         begin
                           if (11'd0257 != s_reg_91[10:0]) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        6'd29:                         begin
                           case (s_reg_91[10:0]) 

                              11'd0257:                               begin
                                 if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_39_out1) begin
                                    i_rgb_m_busy_req_0 <= 1'd0;
                                 end
                              end
                              
                              default:                               begin
                                 i_rgb_m_busy_req_0 <= 1'd0;
                              end
                              
                           endcase

                        end
                        
                        6'd40:                         begin
                           if (10'd0256 == DC_Filter_Add_8Ux2S_10S_4_81_out1 && 32'd0000000000 == s_reg_89) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_rgb_inside_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_rgb_inside_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        6'd39:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_80_out1) begin
                              o_rgb_inside_m_req_m_trig_req <= DC_Filter_Not_1U_1U_1_6_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx3i1c
         always @(DC_Filter_And_1Ux1U_1U_4_82_out1 or DC_Filter_gen_busy_r_4_161_out1[0] or global_state1)
          begin :drive_stall1
            case (global_state1) 

               6'd18, 6'd23:                begin
                  stall1 = DC_Filter_gen_busy_r_4_161_out1[0];
               end
               
               6'd40:                begin
                  stall1 = DC_Filter_And_1Ux1U_1U_4_82_out1;
               end
               
               default:                begin
                  stall1 = 1'b0;
               end
               
            endcase

         end

         // resource: mux_32bx2i0c
         // resource: regr_en_sc_32
         always @(posedge i_clk)
          begin :drive_s_reg_83
            if (i_rst == 1'b0) begin
               s_reg_83 <= 32'd0000000000;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        6'd12:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_35_out1) begin
                              if (!s_reg_92 && !DC_Filter_LessThan_32Sx10S_1U_4_33_out1) begin
                                 s_reg_83 <= DC_Filter_N_Mux_32_2_0_4_55_out1;
                              end
                           end
                        end
                        
                        6'd17:                         begin
                           if (11'd0257 == DC_Filter_Add_12Sx9U_13S_4_9_out1[10:0]) begin
                              s_reg_83 <= DC_Filter_N_Mux_32_2_0_4_55_out1;
                           end
                        end
                        
                        6'd22:                         begin
                           if (11'd0257 == s_reg_91[10:0]) begin
                              s_reg_83 <= DC_Filter_N_Mux_32_2_0_4_55_out1;
                           end
                        end
                        
                        6'd29:                         begin
                           if (11'd0257 == s_reg_91[10:0]) begin
                              if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_39_out1) begin
                                 s_reg_83 <= DC_Filter_N_Mux_32_2_0_4_55_out1;
                              end
                           end
                        end
                        
                        6'd30:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_58_out1) begin
                              s_reg_83 <= DC_Filter_N_Mux_32_2_0_4_55_out1;
                           end
                        end
                        
                        6'd38:                         begin
                           s_reg_83 <= DC_Filter_N_Mux_32_2_3_4_77_out1;
                        end
                        
                        6'd40:                         begin
                           if (10'd0256 != DC_Filter_Add_8Ux2S_10S_4_81_out1) begin
                              s_reg_83 <= DC_Filter_N_Mux_32_2_0_4_55_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i0c
         // resource: regr_en_sc_32
         always @(posedge i_clk)
          begin :drive_s_reg_84
            if (i_rst == 1'b0) begin
               s_reg_84 <= 32'd0000000000;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        6'd12:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_35_out1) begin
                              if (!s_reg_92 && !DC_Filter_LessThan_32Sx10S_1U_4_33_out1) begin
                                 s_reg_84 <= DC_Filter_N_Mux_32_2_0_4_56_out1;
                              end
                           end
                        end
                        
                        6'd17:                         begin
                           if (11'd0257 == DC_Filter_Add_12Sx9U_13S_4_9_out1[10:0]) begin
                              s_reg_84 <= DC_Filter_N_Mux_32_2_0_4_56_out1;
                           end
                        end
                        
                        6'd22:                         begin
                           if (11'd0257 == s_reg_91[10:0]) begin
                              s_reg_84 <= DC_Filter_N_Mux_32_2_0_4_56_out1;
                           end
                        end
                        
                        6'd29:                         begin
                           if (11'd0257 == s_reg_91[10:0]) begin
                              if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_39_out1) begin
                                 s_reg_84 <= DC_Filter_N_Mux_32_2_0_4_56_out1;
                              end
                           end
                        end
                        
                        6'd30:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_58_out1) begin
                              s_reg_84 <= DC_Filter_N_Mux_32_2_0_4_56_out1;
                           end
                        end
                        
                        6'd38:                         begin
                           s_reg_84 <= DC_Filter_N_Mux_32_2_3_4_78_out1;
                        end
                        
                        6'd40:                         begin
                           if (10'd0256 != DC_Filter_Add_8Ux2S_10S_4_81_out1) begin
                              s_reg_84 <= DC_Filter_N_Mux_32_2_0_4_56_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i0c
         // resource: regr_en_sc_32
         always @(posedge i_clk)
          begin :drive_s_reg_85
            if (i_rst == 1'b0) begin
               s_reg_85 <= 32'd0000000000;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        6'd12:                         begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_35_out1) begin
                              if (!s_reg_92 && !DC_Filter_LessThan_32Sx10S_1U_4_33_out1) begin
                                 s_reg_85 <= DC_Filter_N_Mux_32_2_3_4_57_out1;
                              end
                           end
                        end
                        
                        6'd17:                         begin
                           if (11'd0257 == DC_Filter_Add_12Sx9U_13S_4_9_out1[10:0]) begin
                              s_reg_85 <= DC_Filter_N_Mux_32_2_3_4_57_out1;
                           end
                        end
                        
                        6'd22:                         begin
                           if (11'd0257 == s_reg_91[10:0]) begin
                              s_reg_85 <= DC_Filter_N_Mux_32_2_3_4_57_out1;
                           end
                        end
                        
                        6'd29:                         begin
                           if (11'd0257 == s_reg_91[10:0]) begin
                              if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_39_out1) begin
                                 s_reg_85 <= DC_Filter_N_Mux_32_2_3_4_57_out1;
                              end
                           end
                        end
                        
                        6'd30:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_58_out1) begin
                              s_reg_85 <= DC_Filter_N_Mux_32_2_3_4_57_out1;
                           end
                        end
                        
                        6'd38:                         begin
                           s_reg_85 <= DC_Filter_N_Mux_32_2_3_4_79_out1;
                        end
                        
                        6'd40:                         begin
                           if (10'd0256 != DC_Filter_Add_8Ux2S_10S_4_81_out1) begin
                              s_reg_85 <= DC_Filter_N_Mux_32_2_3_4_57_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx8i2c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_s_reg_86_slice_slice
            if (i_rst == 1'b0) begin
               s_reg_86_slice1 <= 2'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        6'd04:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_15_out1) 

                              4'd03:                               begin
                                 s_reg_86_slice1 <= 2'd1;
                              end
                              
                              default:                               begin
                                 s_reg_86_slice1 <= DC_Filter_Add_3Sx2U_4S_4_15_out1[1:0];
                              end
                              
                           endcase

                        end
                        
                        6'd12:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_35_out1) 

                              4'd03:                               begin
                                 s_reg_86_slice1 <= 2'd0;
                              end
                              
                              default:                               begin
                                 s_reg_86_slice1 <= DC_Filter_Add_3Sx2U_4S_4_35_out1[1:0];
                              end
                              
                           endcase

                        end
                        
                        6'd16:                         begin
                           if (4'd03 != s_reg_87) begin
                              s_reg_86_slice1 <= s_reg_87[1:0];
                           end
                        end
                        
                        6'd17, 6'd22:                         begin
                           s_reg_86_slice1 <= 2'd0;
                        end
                        
                        6'd29:                         begin
                           if (11'd0257 == s_reg_91[10:0]) begin
                              case (DC_Filter_Add_3Sx2U_4S_4_39_out1) 

                                 4'd03:                                  begin
                                    s_reg_86_slice1 <= 2'd0;
                                 end
                                 
                                 default:                                  begin
                                    s_reg_86_slice1 <= DC_Filter_Add_3Sx2U_4S_4_39_out1[1:0];
                                 end
                                 
                              endcase

                           end
                        end
                        
                        6'd30:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_58_out1) 

                              4'd03:                               begin
                                 s_reg_86_slice1 <= 2'd0;
                              end
                              
                              default:                               begin
                                 s_reg_86_slice1 <= DC_Filter_Add_3Sx2U_4S_4_58_out1[1:0];
                              end
                              
                           endcase

                        end
                        
                        6'd39:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_80_out1) begin
                              s_reg_86_slice1 <= DC_Filter_Add_3Sx2U_4S_4_80_out1[1:0];
                           end
                        end
                        
                        6'd40:                         begin
                           /* state76 */
                           case (DC_Filter_Add_8Ux2S_10S_4_81_out1) 

                              10'd0256:                               begin
                                 case (s_reg_89) 

                                    32'd0000000000:                                     begin
                                       s_reg_86_slice1 <= 2'd1;
                                    end
                                    
                                    default:                                     begin
                                       s_reg_86_slice1 <= 2'd0;
                                    end
                                    
                                 endcase

                              end
                              
                              default:                               begin
                                 s_reg_86_slice1 <= 2'd0;
                              end
                              
                           endcase

                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_4bx7i1c
         // resource: regr_en_sc_4
         always @(posedge i_clk)
          begin :drive_s_reg_87
            if (i_rst == 1'b0) begin
               s_reg_87 <= 4'd00;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        6'd03:                         begin
                           if (11'd0258 == s_reg_91[10:0]) begin
                              if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_14_out1) begin
                                 s_reg_87 <= DC_Filter_Add_3Sx2U_4S_4_14_out1;
                              end
                           end
                        end
                        
                        6'd04:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_15_out1) begin
                              s_reg_87 <= 4'd00;
                           end
                        end
                        
                        6'd10:                         begin
                           if (11'd0257 != DC_Filter_Add_12Sx9U_13S_4_9_out1[10:0]) begin
                              s_reg_87 <= {s_reg_87[2], s_reg_87[2:0]};
                           end
                        end
                        
                        6'd11:                         begin
                           if (3'd2 != DC_Filter_Add_2Sx1U_3S_4_16_out1) begin
                              s_reg_87 <= {DC_Filter_Add_2Sx1U_3S_4_16_out1[2], DC_Filter_Add_2Sx1U_3S_4_16_out1};
                           end
                        end
                        
                        6'd12:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_35_out1) begin
                              s_reg_87 <= 4'd00;
                           end
                        end
                        
                        6'd13:                         begin
                           s_reg_87 <= DC_Filter_Add_3Sx2U_4S_4_40_out1;
                        end
                        
                        6'd24:                         begin
                           s_reg_87 <= {1'b0, DC_Filter_Add_2Ux2U_3U_4_28_out1};
                        end
                        
                        6'd30:                         begin
                           s_reg_87 <= 4'd00;
                        end
                        
                        6'd38:                         begin
                           if (4'd03 == s_reg_97 && 4'd03 != s_reg_96) begin
                              s_reg_87 <= s_reg_96;
                           end
                        end
                        
                        6'd39:                         begin
                           if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_80_out1) begin
                              s_reg_87 <= 4'd00;
                           end
                        end
                        
                        6'd40:                         begin
                           if (32'd0000000000 != s_reg_89) begin
                              s_reg_87 <= 4'd00;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_5bx6i0c
         // resource: regr_en_5
         always @(posedge i_clk)
          begin :drive_s_reg_88
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     6'd01:                      begin
                        s_reg_88 <= {1'b0, DC_Filter_Add_4Ux4U_4U_4_11_out1};
                     end
                     
                     6'd06:                      begin
                        s_reg_88 <= {1'b0, DC_Filter_Add_4Ux4U_4U_4_18_out1};
                     end
                     
                     6'd08:                      begin
                        s_reg_88 <= DC_Filter_Add_5Sx1U_5S_4_23_out1;
                     end
                     
                     6'd14:                      begin
                        s_reg_88 <= {1'b0, DC_Filter_Add_4Ux4U_4U_4_43_out1};
                     end
                     
                     6'd27:                      begin
                        s_reg_88 <= {1'b0, DC_Filter_Add_3Ux2U_4U_4_34_out1};
                     end
                     
                     6'd33:                      begin
                        s_reg_88 <= {1'b0, DC_Filter_Add_4Ux4U_4U_4_63_out1};
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_32bx4i2c
         // resource: regr_en_32
         always @(posedge i_clk)
          begin :drive_s_reg_89
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     6'd04:                      begin
                        s_reg_89 <= 32'd0000000000;
                     end
                     
                     6'd17:                      begin
                        if (11'd0257 == DC_Filter_Add_12Sx9U_13S_4_9_out1[10:0]) begin
                           s_reg_89 <= s_reg_94;
                        end
                     end
                     
                     6'd22:                      begin
                        if (11'd0257 == s_reg_91[10:0]) begin
                           s_reg_89 <= DC_Filter_Add_32Sx29S_32S_4_46_out1;
                        end
                     end
                     
                     6'd29:                      begin
                        if (11'd0257 == s_reg_91[10:0]) begin
                           if (4'd03 == DC_Filter_Add_3Sx2U_4S_4_39_out1) begin
                              s_reg_89 <= 32'd0000000003;
                           end
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_9bx5i2c
         // resource: regr_en_sc_9
         always @(posedge i_clk)
          begin :drive_s_reg_90_slice_slice
            if (i_rst == 1'b0) begin
               s_reg_90_slice1 <= 9'd000;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1) 

                        6'd03:                         begin
                           case (s_reg_91[10:0]) 

                              11'd0258:                               begin
                                 if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_14_out1) begin
                                    s_reg_90_slice1 <= 9'd000;
                                 end
                              end
                              
                              default:                               begin
                                 s_reg_90_slice1 <= s_reg_91[8:0];
                              end
                              
                           endcase

                        end
                        
                        6'd04:                         begin
                           case (DC_Filter_Add_3Sx2U_4S_4_15_out1) 

                              4'd03:                               begin
                                 s_reg_90_slice1 <= 9'd001;
                              end
                              
                              default:                               begin
                                 s_reg_90_slice1 <= 9'd000;
                              end
                              
                           endcase

                        end
                        
                        6'd10, 6'd17:                         begin
                           if (11'd0257 != DC_Filter_Add_12Sx9U_13S_4_9_out1[10:0]) begin
                              s_reg_90_slice1 <= DC_Filter_Add_12Sx9U_13S_4_9_out1[8:0];
                           end
                        end
                        
                        6'd11:                         begin
                           if (3'd2 != DC_Filter_Add_2Sx1U_3S_4_16_out1) begin
                              s_reg_90_slice1 <= 9'd001;
                           end
                        end
                        
                        6'd12, 6'd40:                         begin
                           s_reg_90_slice1 <= 9'd001;
                        end
                        
                        6'd22:                         begin
                           if (11'd0257 != s_reg_91[10:0]) begin
                              s_reg_90_slice1 <= s_reg_91[8:0];
                           end
                        end
                        
                        6'd29:                         begin
                           case (s_reg_91[10:0]) 

                              11'd0257:                               begin
                                 if (4'd03 != DC_Filter_Add_3Sx2U_4S_4_39_out1) begin
                                    s_reg_90_slice1 <= 9'd001;
                                 end
                              end
                              
                              default:                               begin
                                 s_reg_90_slice1 <= s_reg_91[8:0];
                              end
                              
                           endcase

                        end
                        
                        6'd34:                         begin
                           s_reg_90_slice1 <= DC_Filter_Add_9Sx2U_10S_4_64_out1[8:0];
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_12bx2i0c
         // resource: regr_en_12
         always @(posedge i_clk)
          begin :drive_s_reg_91
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     6'd00, 6'd19, 6'd25:                      begin
                        s_reg_91 <= {DC_Filter_Add_12Sx9U_13S_4_9_out1[10], DC_Filter_Add_12Sx9U_13S_4_9_out1[10:0]};
                     end
                     
                     6'd07:                      begin
                        s_reg_91 <= DC_Filter_Add_13Sx10U_13S_4_13_out1[11:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_1bx2i0c
         // resource: regr_en_1
         always @(posedge i_clk)
          begin :drive_s_reg_92
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     6'd11:                      begin
                        s_reg_92 <= DC_Filter_LessThan_32Sx10S_1U_4_33_out1;
                     end
                     
                     6'd37:                      begin
                        s_reg_92 <= DC_Filter_OrReduction_2U_1U_4_71_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_1
         always @(posedge i_clk)
          begin :drive_s_reg_93
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  s_reg_93 <= DC_Filter_Equal_2Ux1U_1U_4_72_out1;
               end
               
            endcase

         end

         // resource: mux_32bx2i0c
         // resource: regr_en_32
         always @(posedge i_clk)
          begin :drive_s_reg_94
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     6'd16:                      begin
                        s_reg_94 <= DC_Filter_Add_32Sx29S_32S_4_46_out1;
                     end
                     
                     6'd32:                      begin
                        s_reg_94 <= mask1_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_8bx2i1c
         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_s_reg_95_slice
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     6'd12, 6'd17, 6'd20, 6'd29:                      begin
                        s_reg_95_slice <= 8'd000;
                     end
                     
                     6'd40:                      begin
                        if (10'd0256 != DC_Filter_Add_8Ux2S_10S_4_81_out1) begin
                           s_reg_95_slice <= DC_Filter_Add_8Ux2S_10S_4_81_out1[7:0];
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_4
         always @(posedge i_clk)
          begin :drive_s_reg_96
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     6'd32:                      begin
                        s_reg_96 <= DC_Filter_Add_3Sx2U_4S_4_61_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_4bx3i1c
         // resource: regr_en_4
         always @(posedge i_clk)
          begin :drive_s_reg_97
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     6'd05:                      begin
                        s_reg_97 <= {DC_Filter_Add_2Sx1U_3S_4_16_out1[2], DC_Filter_Add_2Sx1U_3S_4_16_out1};
                     end
                     
                     6'd32:                      begin
                        s_reg_97 <= 4'd00;
                     end
                     
                     6'd37:                      begin
                        s_reg_97 <= DC_Filter_Add_3Sx2U_4S_4_73_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_98
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     6'd36:                      begin
                        s_reg_98 <= s_reg_97[1:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_29
         always @(posedge i_clk)
          begin :drive_s_reg_99
            case (stall1) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state1) 

                     6'd36:                      begin
                        s_reg_99 <= DC_Filter_Add_28Sx1U_29S_4_70_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: DC_Filter_Add_12Sx9U_13S_4  instance: DC_Filter_Add_12Sx9U_13S_4_9
         assign DC_Filter_Add_12Sx9U_13S_4_9_out1 = {4'b0000, s_reg_90_slice1} + 13'd0001;

         // resource: DC_Filter_Mul_2Ux2U_4U_4  instance: DC_Filter_Mul_2Ux2U_4U_4_10
         assign DC_Filter_Mul_2Ux2U_4U_4_10_out1 = {2'b00, s_reg_86_slice1}*4'd03;

         // resource: DC_Filter_Add_4Ux4U_4U_4  instance: DC_Filter_Add_4Ux4U_4U_4_11
         assign DC_Filter_Add_4Ux4U_4U_4_11_out1 = DC_Filter_Mul_2Ux2U_4U_4_10_out1 + {2'b00, s_reg_87[1:0]};

         // resource: mux_32bx2i1c
         always @(f1_array_rgb_out1 or gs_ctrl14)
          begin :drive_DC_Filter_Mul_32Ux32U_32U_4_12_in2
            if (gs_ctrl14) begin
               DC_Filter_Mul_32Ux32U_32U_4_12_in2 = f1_array_rgb_out1;
            end
            else begin
               DC_Filter_Mul_32Ux32U_32U_4_12_in2 = 32'd0000000258;
            end
         end

         // resource: mux_32bx3i0c
         always @(s_reg_88 or s_reg_94 or gs_ctrl15)
          begin :drive_DC_Filter_Mul_32Ux32U_32U_4_12_in1
            case (gs_ctrl15) 

               2'd1:                begin
                  DC_Filter_Mul_32Ux32U_32U_4_12_in1 = {28'b0000000000000000000000000000, s_reg_88[3:0]};
               end
               
               2'd2:                begin
                  DC_Filter_Mul_32Ux32U_32U_4_12_in1 = s_reg_94;
               end
               
               default:                begin
                  DC_Filter_Mul_32Ux32U_32U_4_12_in1 = {27'b000000000000000000000000000, s_reg_88};
               end
               
            endcase

         end

         // resource: DC_Filter_Mul_32Ux32U_32U_4  instance: DC_Filter_Mul_32Ux32U_32U_4_12
         assign DC_Filter_Mul_32Ux32U_32U_4_12_out1 = DC_Filter_Mul_32Ux32U_32U_4_12_in2*DC_Filter_Mul_32Ux32U_32U_4_12_in1;

         // instance: drive_DC_Filter_Add_13Sx10U_13S_4_13_in2
         assign DC_Filter_Add_13Sx10U_13S_4_13_in2 = {1'b0, DC_Filter_Mul_32Ux32U_32U_4_12_out1[11:0]};

         // resource: DC_Filter_Add_13Sx10U_13S_4  instance: DC_Filter_Add_13Sx10U_13S_4_13
         assign DC_Filter_Add_13Sx10U_13S_4_13_out1 = DC_Filter_Add_13Sx10U_13S_4_13_in2 + {{3'b000, 1'b0}, s_reg_90_slice1};

         // resource: mux_12bx6i0c
         always @(s_reg_91 or DC_Filter_Add_13Sx10U_13S_4_13_out1[11:0] or DC_Filter_Add_13Sx10U_13S_4_26_out1[11:0] or DC_Filter_Add_12Sx9U_13S_4_41_out1[10:0] or DC_Filter_Add_12Sx9U_13S_4_49_out1[11:0] or DC_Filter_Add_13Sx10U_13S_4_50_out1[11:0] or gs_ctrl16)
          begin :drive_f1_array_rgb_in1
            case (gs_ctrl16) 

               3'd1:                begin
                  f1_array_rgb_in1 = s_reg_91;
               end
               
               3'd2:                begin
                  f1_array_rgb_in1 = {1'b0, DC_Filter_Add_12Sx9U_13S_4_41_out1[10:0]};
               end
               
               3'd3:                begin
                  f1_array_rgb_in1 = DC_Filter_Add_12Sx9U_13S_4_49_out1[11:0];
               end
               
               3'd4:                begin
                  f1_array_rgb_in1 = DC_Filter_Add_13Sx10U_13S_4_50_out1[11:0];
               end
               
               3'd5:                begin
                  f1_array_rgb_in1 = DC_Filter_Add_13Sx10U_13S_4_26_out1[11:0];
               end
               
               default:                begin
                  f1_array_rgb_in1 = DC_Filter_Add_13Sx10U_13S_4_13_out1[11:0];
               end
               
            endcase

         end

         // resource: mux_32bx5i1c
         always @(o_rgb_inside_data[23:8] or i_rgb_data[7:0] or f1_array_rgb_out1 or gs_ctrl17)
          begin :drive_f1_array_rgb_DIN
            case (gs_ctrl17) 

               3'd1:                begin
                  f1_array_rgb_DIN = f1_array_rgb_out1;
               end
               
               3'd2:                begin
                  f1_array_rgb_DIN = {24'b000000000000000000000000, i_rgb_data[7:0]};
               end
               
               3'd3:                begin
                  f1_array_rgb_DIN = {24'b000000000000000000000000, o_rgb_inside_data[15:8]};
               end
               
               3'd4:                begin
                  f1_array_rgb_DIN = {24'b000000000000000000000000, o_rgb_inside_data[23:16]};
               end
               
               default:                begin
                  f1_array_rgb_DIN = 32'd0000000000;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         always @(stall1 or gs_ctrl18)
          begin :drive_f1_array_rgb_CE
            if (stall1) begin
               f1_array_rgb_CE = 1'b0;
            end
            else begin
               if (gs_ctrl18) begin
                  f1_array_rgb_CE = 1'b1;
               end
               else begin
                  f1_array_rgb_CE = 1'b0;
               end
            end
         end

         // resource: mux_1bx2i2c
         always @(stall1 or gs_ctrl19)
          begin :drive_f1_array_rgb_RW
            if (stall1) begin
               f1_array_rgb_RW = 1'b0;
            end
            else begin
               if (gs_ctrl19) begin
                  f1_array_rgb_RW = 1'b1;
               end
               else begin
                  f1_array_rgb_RW = 1'b0;
               end
            end
         end

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_14
         assign DC_Filter_Add_3Sx2U_4S_4_14_out1 = {2'b00, s_reg_87[1:0]} + 4'd01;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_15
         assign DC_Filter_Add_3Sx2U_4S_4_15_out1 = {2'b00, s_reg_86_slice1} + 4'd01;

         // resource: DC_Filter_Add_2Sx1U_3S_4  instance: DC_Filter_Add_2Sx1U_3S_4_16
         assign DC_Filter_Add_2Sx1U_3S_4_16_out1 = {2'b00, s_reg_87[0]} + 3'd1;

         // resource: DC_Filter_Mul_2Ux2U_4U_4  instance: DC_Filter_Mul_2Ux2U_4U_4_17
         assign DC_Filter_Mul_2Ux2U_4U_4_17_out1 = {2'b00, s_reg_86_slice1}*4'd03;

         // resource: DC_Filter_Add_4Ux4U_4U_4  instance: DC_Filter_Add_4Ux4U_4U_4_18
         assign DC_Filter_Add_4Ux4U_4U_4_18_out1 = DC_Filter_Mul_2Ux2U_4U_4_17_out1 + {s_reg_97[2], s_reg_97[2:0]};

         // resource: mux_3bx2i0c
         always @(s_reg_87[2:0] or gs_ctrl20 or s_reg_86_slice1)
          begin :drive_DC_Filter_Mul_9Ux3U_12U_4_19_in1
            if (gs_ctrl20) begin
               DC_Filter_Mul_9Ux3U_12U_4_19_in1 = s_reg_87[2:0];
            end
            else begin
               DC_Filter_Mul_9Ux3U_12U_4_19_in1 = {1'b0, s_reg_86_slice1};
            end
         end

         // resource: DC_Filter_Mul_9Ux3U_12U_4  instance: DC_Filter_Mul_9Ux3U_12U_4_19
         assign DC_Filter_Mul_9Ux3U_12U_4_19_out1 = {9'b000000000, DC_Filter_Mul_9Ux3U_12U_4_19_in1}*12'd0258;

         // resource: DC_Filter_Add_5Sx1U_5S_4  instance: DC_Filter_Add_5Sx1U_5S_4_23
         assign DC_Filter_Add_5Sx1U_5S_4_23_out1 = {1'b0, DC_Filter_Mul_2Ux2U_4U_4_17_out1} + {4'b0000, s_reg_87[0]};

         // resource: mux_12bx2i0c
         always @(DC_Filter_Mul_9Ux3U_12U_4_19_out1 or gs_ctrl20)
          begin :drive_DC_Filter_Add_13Sx10U_13S_4_26_in2_slice
            if (gs_ctrl20) begin
               DC_Filter_Add_13Sx10U_13S_4_26_in2_slice = DC_Filter_Mul_9Ux3U_12U_4_19_out1;
            end
            else begin
               DC_Filter_Add_13Sx10U_13S_4_26_in2_slice = {1'b0, DC_Filter_Mul_9Ux3U_12U_4_19_out1[10:0]};
            end
         end

         // resource: DC_Filter_Add_13Sx10U_13S_4  instance: DC_Filter_Add_13Sx10U_13S_4_26
         assign DC_Filter_Add_13Sx10U_13S_4_26_out1 = {1'b0, DC_Filter_Add_13Sx10U_13S_4_26_in2_slice} + {{3'b000, 1'b0}, s_reg_90_slice1};

         // resource: DC_Filter_Add_2Ux2U_3U_4  instance: DC_Filter_Add_2Ux2U_3U_4_28
         assign DC_Filter_Add_2Ux2U_3U_4_28_out1 = {1'b0, s_reg_86_slice1} + 3'd3;

         // resource: mux_2bx2i2c
         always @(gs_ctrl22)
          begin :drive_DC_Filter_LessThan_32Sx10S_1U_4_33_in1_slice
            if (gs_ctrl22) begin
               DC_Filter_LessThan_32Sx10S_1U_4_33_in1_slice = 2'd2;
            end
            else begin
               DC_Filter_LessThan_32Sx10S_1U_4_33_in1_slice = 2'd1;
            end
         end

         // resource: DC_Filter_LessThan_32Sx10S_1U_4  instance: DC_Filter_LessThan_32Sx10S_1U_4_33
         assign DC_Filter_LessThan_32Sx10S_1U_4_33_out1 = s_reg_89[31] ^ s_reg_89 < {30'd0000000064, DC_Filter_LessThan_32Sx10S_1U_4_33_in1_slice};

         // resource: DC_Filter_Add_3Ux2U_4U_4  instance: DC_Filter_Add_3Ux2U_4U_4_34
         assign DC_Filter_Add_3Ux2U_4U_4_34_out1 = {2'b00, s_reg_86_slice1} + 4'd06;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_35
         assign DC_Filter_Add_3Sx2U_4S_4_35_out1 = {2'b00, s_reg_86_slice1} + 4'd01;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_39
         assign DC_Filter_Add_3Sx2U_4S_4_39_out1 = {2'b00, s_reg_86_slice1} + 4'd01;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_40
         assign DC_Filter_Add_3Sx2U_4S_4_40_out1 = {2'b00, s_reg_86_slice1} + 4'd01;

         // resource: DC_Filter_Add_12Sx9U_13S_4  instance: DC_Filter_Add_12Sx9U_13S_4_41
         assign DC_Filter_Add_12Sx9U_13S_4_41_out1 = {4'b0000, s_reg_90_slice1} + 13'd0516;

         // resource: DC_Filter_Mul_2Ux2U_4U_4  instance: DC_Filter_Mul_2Ux2U_4U_4_42
         assign DC_Filter_Mul_2Ux2U_4U_4_42_out1 = {2'b00, s_reg_86_slice1}*4'd03;

         // resource: DC_Filter_Add_4Ux4U_4U_4  instance: DC_Filter_Add_4Ux4U_4U_4_43
         assign DC_Filter_Add_4Ux4U_4U_4_43_out1 = DC_Filter_Mul_2Ux2U_4U_4_42_out1 + 4'd02;

         // resource: mux_32bx2i0c
         always @(s_reg_89 or DC_Filter_N_Mux_32_3_2_4_75_out1 or gs_ctrl23)
          begin :drive_DC_Filter_Add_32Sx29S_32S_4_46_in2
            if (gs_ctrl23) begin
               DC_Filter_Add_32Sx29S_32S_4_46_in2 = DC_Filter_N_Mux_32_3_2_4_75_out1;
            end
            else begin
               /* state34 */
               DC_Filter_Add_32Sx29S_32S_4_46_in2 = s_reg_89;
            end
         end

         // resource: mux_29bx2i1c
         always @(s_reg_99 or gs_ctrl23)
          begin :drive_DC_Filter_Add_32Sx29S_32S_4_46_in1
            if (gs_ctrl23) begin
               DC_Filter_Add_32Sx29S_32S_4_46_in1 = s_reg_99;
            end
            else begin
               DC_Filter_Add_32Sx29S_32S_4_46_in1 = 29'd000000001;
            end
         end

         // resource: DC_Filter_Add_32Sx29S_32S_4  instance: DC_Filter_Add_32Sx29S_32S_4_46
         assign DC_Filter_Add_32Sx29S_32S_4_46_out1 = DC_Filter_Add_32Sx29S_32S_4_46_in2 + {{ 3 {DC_Filter_Add_32Sx29S_32S_4_46_in1[28]}}, DC_Filter_Add_32Sx29S_32S_4_46_in1};

         // resource: DC_Filter_Add_12Sx9U_13S_4  instance: DC_Filter_Add_12Sx9U_13S_4_49
         assign DC_Filter_Add_12Sx9U_13S_4_49_out1 = {4'b0000, s_reg_90_slice1} + 13'd1290;

         // resource: DC_Filter_Add_13Sx10U_13S_4  instance: DC_Filter_Add_13Sx10U_13S_4_50
         assign DC_Filter_Add_13Sx10U_13S_4_50_out1 = {{3'b000, 1'b0}, s_reg_90_slice1} + 13'd2064;

         // resource: mux_2bx3i1c
         always @(s_reg_98 or DC_Filter_Add_3Sx2U_4S_4_58_out1[1:0] or gs_ctrl25)
          begin :drive_DC_Filter_Equal_2Ux2U_1U_4_52_in2
            case (gs_ctrl25) 

               2'd1:                begin
                  DC_Filter_Equal_2Ux2U_1U_4_52_in2 = DC_Filter_Add_3Sx2U_4S_4_58_out1[1:0];
               end
               
               2'd2:                begin
                  DC_Filter_Equal_2Ux2U_1U_4_52_in2 = s_reg_98;
               end
               
               default:                begin
                  DC_Filter_Equal_2Ux2U_1U_4_52_in2 = 2'd0;
               end
               
            endcase

         end

         // resource: DC_Filter_Equal_2Ux2U_1U_4  instance: DC_Filter_Equal_2Ux2U_1U_4_52
         assign DC_Filter_Equal_2Ux2U_1U_4_52_out1 = DC_Filter_Equal_2Ux2U_1U_4_52_in2 == 2'd2;

         // resource: mux_2bx2i1c
         always @(DC_Filter_Add_3Sx2U_4S_4_58_out1[1:0] or gs_ctrl26)
          begin :drive_DC_Filter_Equal_2Ux1U_1U_4_53_in2
            if (gs_ctrl26) begin
               DC_Filter_Equal_2Ux1U_1U_4_53_in2 = DC_Filter_Add_3Sx2U_4S_4_58_out1[1:0];
            end
            else begin
               DC_Filter_Equal_2Ux1U_1U_4_53_in2 = 2'd0;
            end
         end

         // resource: DC_Filter_Equal_2Ux1U_1U_4  instance: DC_Filter_Equal_2Ux1U_1U_4_53
         assign DC_Filter_Equal_2Ux1U_1U_4_53_out1 = DC_Filter_Equal_2Ux1U_1U_4_53_in2 == 2'd1;

         // resource: DC_Filter_OrReduction_2U_1U_4  instance: DC_Filter_OrReduction_2U_1U_4_54
         assign DC_Filter_OrReduction_2U_1U_4_54_out1 = (|DC_Filter_Equal_2Ux1U_1U_4_53_in2);

         // resource: DC_Filter_N_Mux_32_2_0_4
         always @(s_reg_83 or DC_Filter_Equal_2Ux2U_1U_4_52_out1)
          begin :DC_Filter_N_Mux_32_2_0_4_55
            if (DC_Filter_Equal_2Ux2U_1U_4_52_out1) begin
               DC_Filter_N_Mux_32_2_0_4_55_out1 = 32'd0000000000;
            end
            else begin
               DC_Filter_N_Mux_32_2_0_4_55_out1 = s_reg_83;
            end
         end

         // resource: DC_Filter_N_Mux_32_2_0_4
         always @(s_reg_84 or DC_Filter_Equal_2Ux1U_1U_4_53_out1)
          begin :DC_Filter_N_Mux_32_2_0_4_56
            if (DC_Filter_Equal_2Ux1U_1U_4_53_out1) begin
               DC_Filter_N_Mux_32_2_0_4_56_out1 = 32'd0000000000;
            end
            else begin
               DC_Filter_N_Mux_32_2_0_4_56_out1 = s_reg_84;
            end
         end

         // resource: DC_Filter_N_Mux_32_2_3_4
         always @(s_reg_85 or DC_Filter_OrReduction_2U_1U_4_54_out1)
          begin :DC_Filter_N_Mux_32_2_3_4_57
            if (DC_Filter_OrReduction_2U_1U_4_54_out1) begin
               DC_Filter_N_Mux_32_2_3_4_57_out1 = s_reg_85;
            end
            else begin
               DC_Filter_N_Mux_32_2_3_4_57_out1 = 32'd0000000000;
            end
         end

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_58
         assign DC_Filter_Add_3Sx2U_4S_4_58_out1 = {2'b00, s_reg_86_slice1} + 4'd01;

         // resource: DC_Filter_Mul_2Ux2U_4U_4  instance: DC_Filter_Mul_2Ux2U_4U_4_59
         assign DC_Filter_Mul_2Ux2U_4U_4_59_out1 = {2'b00, s_reg_87[1:0]}*4'd03;

         // resource: DC_Filter_Add_4Ux4U_4U_4  instance: DC_Filter_Add_4Ux4U_4U_4_60
         assign DC_Filter_Add_4Ux4U_4U_4_60_out1 = DC_Filter_Mul_2Ux2U_4U_4_59_out1 + {2'b00, s_reg_86_slice1};

         // instance: drive_mask1_in1
         assign mask1_in1 = DC_Filter_Add_4Ux4U_4U_4_60_out1;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_61
         assign DC_Filter_Add_3Sx2U_4S_4_61_out1 = {2'b00, s_reg_87[1:0]} + 4'd01;

         // resource: DC_Filter_Mul_2Ux2U_4U_4  instance: DC_Filter_Mul_2Ux2U_4U_4_62
         assign DC_Filter_Mul_2Ux2U_4U_4_62_out1 = {2'b00, s_reg_97[1:0]}*4'd03;

         // resource: DC_Filter_Add_4Ux4U_4U_4  instance: DC_Filter_Add_4Ux4U_4U_4_63
         assign DC_Filter_Add_4Ux4U_4U_4_63_out1 = DC_Filter_Mul_2Ux2U_4U_4_62_out1 + {2'b00, s_reg_87[1:0]};

         // instance: drive_DC_Filter_Add_9Sx2U_10S_4_64_in2
         assign DC_Filter_Add_9Sx2U_10S_4_64_in2 = {1'b0, s_reg_95_slice};

         // resource: DC_Filter_Add_9Sx2U_10S_4  instance: DC_Filter_Add_9Sx2U_10S_4_64
         assign DC_Filter_Add_9Sx2U_10S_4_64_out1 = {DC_Filter_Add_9Sx2U_10S_4_64_in2[8], DC_Filter_Add_9Sx2U_10S_4_64_in2} + {8'b00000000, s_reg_86_slice1};

         // resource: DC_Filter_OrReduction_4U_1U_4  instance: DC_Filter_OrReduction_4U_1U_4_68
         assign DC_Filter_OrReduction_4U_1U_4_68_out1 = (|DC_Filter_Mul_32Ux32U_32U_4_12_out1[3:0]);

         // instance: drive_DC_Filter_And_1Ux1U_1U_4_69_in1
         assign DC_Filter_And_1Ux1U_1U_4_69_in1 = DC_Filter_Mul_32Ux32U_32U_4_12_out1[31];

         // resource: DC_Filter_And_1Ux1U_1U_4  instance: DC_Filter_And_1Ux1U_1U_4_69
         assign DC_Filter_And_1Ux1U_1U_4_69_out1 = DC_Filter_OrReduction_4U_1U_4_68_out1 & DC_Filter_And_1Ux1U_1U_4_69_in1;

         // instance: drive_DC_Filter_Add_28Sx1U_29S_4_70_in2
         assign DC_Filter_Add_28Sx1U_29S_4_70_in2 = DC_Filter_Mul_32Ux32U_32U_4_12_out1[31:4];

         // resource: DC_Filter_Add_28Sx1U_29S_4  instance: DC_Filter_Add_28Sx1U_29S_4_70
         assign DC_Filter_Add_28Sx1U_29S_4_70_out1 = {DC_Filter_Add_28Sx1U_29S_4_70_in2[27], DC_Filter_Add_28Sx1U_29S_4_70_in2} + {28'b0000000000000000000000000000, DC_Filter_And_1Ux1U_1U_4_69_out1};

         // resource: DC_Filter_OrReduction_2U_1U_4  instance: DC_Filter_OrReduction_2U_1U_4_71
         assign DC_Filter_OrReduction_2U_1U_4_71_out1 = (|s_reg_97[1:0]);

         // resource: DC_Filter_Equal_2Ux1U_1U_4  instance: DC_Filter_Equal_2Ux1U_1U_4_72
         assign DC_Filter_Equal_2Ux1U_1U_4_72_out1 = s_reg_98 == 2'd1;

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_73
         assign DC_Filter_Add_3Sx2U_4S_4_73_out1 = {2'b00, s_reg_97[1:0]} + 4'd01;

         // resource: DC_Filter_N_Mux_32_3_2_4
         always @(s_reg_83 or s_reg_84 or s_reg_85 or s_reg_98)
          begin :DC_Filter_N_Mux_32_3_2_4_75
            case (s_reg_98) 

               2'd0:                begin
                  DC_Filter_N_Mux_32_3_2_4_75_out1 = s_reg_85;
               end
               
               2'd1:                begin
                  DC_Filter_N_Mux_32_3_2_4_75_out1 = s_reg_84;
               end
               
               default:                begin
                  DC_Filter_N_Mux_32_3_2_4_75_out1 = s_reg_83;
               end
               
            endcase

         end

         // resource: DC_Filter_N_Mux_32_2_3_4
         always @(s_reg_83 or DC_Filter_Add_32Sx29S_32S_4_46_out1 or DC_Filter_Equal_2Ux2U_1U_4_52_out1)
          begin :DC_Filter_N_Mux_32_2_3_4_77
            if (DC_Filter_Equal_2Ux2U_1U_4_52_out1) begin
               DC_Filter_N_Mux_32_2_3_4_77_out1 = DC_Filter_Add_32Sx29S_32S_4_46_out1;
            end
            else begin
               DC_Filter_N_Mux_32_2_3_4_77_out1 = s_reg_83;
            end
         end

         // resource: DC_Filter_N_Mux_32_2_3_4
         always @(s_reg_84 or s_reg_93 or DC_Filter_Add_32Sx29S_32S_4_46_out1)
          begin :DC_Filter_N_Mux_32_2_3_4_78
            if (s_reg_93) begin
               DC_Filter_N_Mux_32_2_3_4_78_out1 = DC_Filter_Add_32Sx29S_32S_4_46_out1;
            end
            else begin
               DC_Filter_N_Mux_32_2_3_4_78_out1 = s_reg_84;
            end
         end

         // resource: DC_Filter_N_Mux_32_2_3_4
         always @(s_reg_85 or s_reg_92 or DC_Filter_Add_32Sx29S_32S_4_46_out1)
          begin :DC_Filter_N_Mux_32_2_3_4_79
            if (s_reg_92) begin
               DC_Filter_N_Mux_32_2_3_4_79_out1 = s_reg_85;
            end
            else begin
               DC_Filter_N_Mux_32_2_3_4_79_out1 = DC_Filter_Add_32Sx29S_32S_4_46_out1;
            end
         end

         // resource: DC_Filter_Add_3Sx2U_4S_4  instance: DC_Filter_Add_3Sx2U_4S_4_80
         assign DC_Filter_Add_3Sx2U_4S_4_80_out1 = {2'b00, s_reg_86_slice1} + 4'd01;

         // resource: DC_Filter_Add_8Ux2S_10S_4  instance: DC_Filter_Add_8Ux2S_10S_4_81
         assign DC_Filter_Add_8Ux2S_10S_4_81_out1 = {2'b00, s_reg_95_slice} + 10'd0001;

         // resource: regr_en_sc_6
         always @(posedge i_clk)
          begin :drive_global_state1
            if (i_rst == 1'b0) begin
               global_state1 <= 6'd00;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     global_state1 <= global_state1_next;
                  end
                  
               endcase

            end
         end

         // resource: mux_6bx9i8c
         always @(s_reg_87 or s_reg_89 or s_reg_91[10:0] or s_reg_92 or s_reg_96 or s_reg_97 or DC_Filter_Add_12Sx9U_13S_4_9_out1[10:0] or DC_Filter_Add_3Sx2U_4S_4_14_out1 or DC_Filter_Add_3Sx2U_4S_4_15_out1 or DC_Filter_Add_2Sx1U_3S_4_16_out1 or DC_Filter_LessThan_32Sx10S_1U_4_33_out1 or DC_Filter_Add_3Sx2U_4S_4_35_out1 or DC_Filter_Add_3Sx2U_4S_4_39_out1 or DC_Filter_Add_3Sx2U_4S_4_58_out1 or DC_Filter_Add_3Sx2U_4S_4_80_out1 or DC_Filter_Add_8Ux2S_10S_4_81_out1 or global_state1)
          begin :drive_global_state1_next
            case (global_state1) 

               6'd03:                begin
                  case (s_reg_91[10:0]) 

                     11'd0258:                      begin
                        case (DC_Filter_Add_3Sx2U_4S_4_14_out1) 

                           4'd03:                            begin
                              global_state1_next = global_state1 + 6'd01;
                           end
                           
                           default:                            begin
                              global_state1_next = 6'd00;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state1_next = 6'd00;
                     end
                     
                  endcase

               end
               
               6'd04:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_15_out1) 

                     4'd03:                      begin
                        global_state1_next = 6'd23;
                     end
                     
                     default:                      begin
                        global_state1_next = 6'd00;
                     end
                     
                  endcase

               end
               
               6'd10:                begin
                  case (DC_Filter_Add_12Sx9U_13S_4_9_out1[10:0]) 

                     11'd0257:                      begin
                        global_state1_next = global_state1 + 6'd01;
                     end
                     
                     default:                      begin
                        global_state1_next = 6'd05;
                     end
                     
                  endcase

               end
               
               6'd11:                begin
                  case (DC_Filter_Add_2Sx1U_3S_4_16_out1) 

                     3'd2:                      begin
                        global_state1_next = global_state1 + 6'd01;
                     end
                     
                     default:                      begin
                        global_state1_next = 6'd05;
                     end
                     
                  endcase

               end
               
               6'd12:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_35_out1) 

                     4'd03:                      begin
                        if (s_reg_92) begin
                           global_state1_next = 6'd18;
                        end
                        else begin
                           if (DC_Filter_LessThan_32Sx10S_1U_4_33_out1) begin
                              global_state1_next = global_state1 + 6'd01;
                           end
                           else begin
                              global_state1_next = 6'd30;
                           end
                        end
                     end
                     
                     default:                      begin
                        global_state1_next = 6'd05;
                     end
                     
                  endcase

               end
               
               6'd16:                begin
                  case (s_reg_87) 

                     4'd03:                      begin
                        global_state1_next = global_state1 + 6'd01;
                     end
                     
                     default:                      begin
                        global_state1_next = 6'd13;
                     end
                     
                  endcase

               end
               
               6'd17:                begin
                  case (DC_Filter_Add_12Sx9U_13S_4_9_out1[10:0]) 

                     11'd0257:                      begin
                        global_state1_next = 6'd30;
                     end
                     
                     default:                      begin
                        global_state1_next = 6'd13;
                     end
                     
                  endcase

               end
               
               6'd22:                begin
                  case (s_reg_91[10:0]) 

                     11'd0257:                      begin
                        global_state1_next = 6'd30;
                     end
                     
                     default:                      begin
                        global_state1_next = 6'd18;
                     end
                     
                  endcase

               end
               
               6'd29:                begin
                  case (s_reg_91[10:0]) 

                     11'd0257:                      begin
                        case (DC_Filter_Add_3Sx2U_4S_4_39_out1) 

                           4'd03:                            begin
                              global_state1_next = global_state1 + 6'd01;
                           end
                           
                           default:                            begin
                              global_state1_next = 6'd23;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state1_next = 6'd23;
                     end
                     
                  endcase

               end
               
               6'd30:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_58_out1) 

                     4'd03:                      begin
                        global_state1_next = global_state1 + 6'd01;
                     end
                     
                     default:                      begin
                        global_state1_next = 6'd30;
                     end
                     
                  endcase

               end
               
               6'd38:                begin
                  case (s_reg_97) 

                     4'd03:                      begin
                        /* state69 */
                        case (s_reg_96) 

                           4'd03:                            begin
                              global_state1_next = global_state1 + 6'd01;
                           end
                           
                           default:                            begin
                              global_state1_next = 6'd31;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state1_next = 6'd33;
                     end
                     
                  endcase

               end
               
               6'd39:                begin
                  case (DC_Filter_Add_3Sx2U_4S_4_80_out1) 

                     4'd03:                      begin
                        global_state1_next = global_state1 + 6'd01;
                     end
                     
                     default:                      begin
                        global_state1_next = 6'd31;
                     end
                     
                  endcase

               end
               
               6'd40:                begin
                  /* state76 */
                  case (DC_Filter_Add_8Ux2S_10S_4_81_out1) 

                     10'd0256:                      begin
                        case (s_reg_89) 

                           32'd0000000000:                            begin
                              global_state1_next = 6'd23;
                           end
                           
                           default:                            begin
                              global_state1_next = 6'd05;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state1_next = 6'd30;
                     end
                     
                  endcase

               end
               
               default:                begin
                  global_state1_next = global_state1 + 6'd01;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl14
            if (i_rst == 1'b0) begin
               gs_ctrl14 <= 1'b0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        6'd36:                         begin
                           gs_ctrl14 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl14 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl15
            if (i_rst == 1'b0) begin
               gs_ctrl15 <= 2'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        6'd09:                         begin
                           gs_ctrl15 <= 2'd1;
                        end
                        
                        6'd36:                         begin
                           gs_ctrl15 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl15 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx6i6c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl16
            if (i_rst == 1'b0) begin
               gs_ctrl16 <= 3'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        6'd08:                         begin
                           gs_ctrl16 <= 3'd1;
                        end
                        
                        6'd18:                         begin
                           gs_ctrl16 <= 3'd2;
                        end
                        
                        6'd20:                         begin
                           gs_ctrl16 <= 3'd3;
                        end
                        
                        6'd21:                         begin
                           gs_ctrl16 <= 3'd4;
                        end
                        
                        6'd23, 6'd26:                         begin
                           gs_ctrl16 <= 3'd5;
                        end
                        
                        default:                         begin
                           gs_ctrl16 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl17
            if (i_rst == 1'b0) begin
               gs_ctrl17 <= 3'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        6'd09:                         begin
                           gs_ctrl17 <= 3'd1;
                        end
                        
                        6'd18, 6'd23:                         begin
                           gs_ctrl17 <= 3'd2;
                        end
                        
                        6'd20, 6'd26:                         begin
                           gs_ctrl17 <= 3'd3;
                        end
                        
                        6'd21, 6'd28:                         begin
                           gs_ctrl17 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl17 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl18
            if (i_rst == 1'b0) begin
               gs_ctrl18 <= 1'b0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        6'd02, 6'd08, 6'd09, 6'd15, 6'd18, 6'd20, 6'd21, 6'd23, 6'd26, 6'd28, 6'd35:                         begin
                           gs_ctrl18 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl18 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl19
            if (i_rst == 1'b0) begin
               gs_ctrl19 <= 1'b0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        6'd02, 6'd09, 6'd15, 6'd18, 6'd20, 6'd21, 6'd23, 6'd26, 6'd28:                         begin
                           gs_ctrl19 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl19 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl20
            if (i_rst == 1'b0) begin
               gs_ctrl20 <= 1'b0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        6'd26:                         begin
                           gs_ctrl20 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl20 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl22
            if (i_rst == 1'b0) begin
               gs_ctrl22 <= 1'b0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        6'd12:                         begin
                           gs_ctrl22 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl22 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl23
            if (i_rst == 1'b0) begin
               gs_ctrl23 <= 1'b0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        6'd38:                         begin
                           gs_ctrl23 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl23 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl25
            if (i_rst == 1'b0) begin
               gs_ctrl25 <= 2'd0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        6'd30:                         begin
                           gs_ctrl25 <= 2'd1;
                        end
                        
                        6'd38:                         begin
                           gs_ctrl25 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl25 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl26
            if (i_rst == 1'b0) begin
               gs_ctrl26 <= 1'b0;
            end
            else begin
               case (stall1) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state1_next) 

                        6'd30:                         begin
                           gs_ctrl26 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl26 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // instance: drive_i_rgb_busy
         assign i_rgb_busy = DC_Filter_gen_busy_r_4_161_out1[2];

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_161
         assign DC_Filter_gen_busy_r_4_161_out1 = {DC_Filter_gen_busy_r_4_161_gnew_req_i0, {DC_Filter_gen_busy_r_4_161_gdiv_i1, DC_Filter_gen_busy_r_4_161_gen_busy_0_i_rgb_m_data_is_invalid_next}};

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_161
         assign DC_Filter_gen_busy_r_4_161_gen_busy_0_i_rgb_m_data_is_invalid_next = ~DC_Filter_gen_busy_r_4_161_gdiv_i1;

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_161
         assign DC_Filter_gen_busy_r_4_161_gdiv_i1 = i_rgb_vld & !DC_Filter_gen_busy_r_4_161_gnew_req_i0;

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_161
         assign DC_Filter_gen_busy_r_4_161_gnew_req_i0 = i_rgb_m_busy_req_0 & (i_rgb_m_unvalidated_req | i_rgb_vld);

         // resource: regr_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_m_unvalidated_req
            if (i_rst == 1'b0) begin
               i_rgb_m_unvalidated_req <= 1'd1;
            end
            else begin
               i_rgb_m_unvalidated_req <= DC_Filter_N_Muxb_1_2_4_4_7_out1;
            end
         end

         // resource: DC_Filter_N_Muxb_1_2_4_4
         always @(i_rgb_vld or i_rgb_m_busy_req_0 or i_rgb_m_unvalidated_req)
          begin :DC_Filter_N_Muxb_1_2_4_4_7
            if (i_rgb_m_busy_req_0) begin
               DC_Filter_N_Muxb_1_2_4_4_7_out1 = i_rgb_m_unvalidated_req;
            end
            else begin
               DC_Filter_N_Muxb_1_2_4_4_7_out1 = i_rgb_vld;
            end
         end

         // instance: drive_o_result_vld
         assign o_result_vld = DC_Filter_Or_1Ux1U_1U_4_2_out1;

         // resource: DC_Filter_Or_1Ux1U_1U_4  instance: DC_Filter_Or_1Ux1U_1U_4_2
         assign DC_Filter_Or_1Ux1U_1U_4_2_out1 = o_result_m_unacked_req | DC_Filter_Xor_1Ux1U_1U_1_1_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_unacked_req
            if (i_rst == 1'b0) begin
               o_result_m_unacked_req <= 1'd0;
            end
            else begin
               o_result_m_unacked_req <= DC_Filter_And_1Ux1U_1U_4_84_out1;
            end
         end

         // resource: DC_Filter_And_1Ux1U_1U_4  instance: DC_Filter_And_1Ux1U_1U_4_84
         assign DC_Filter_And_1Ux1U_1U_4_84_out1 = o_result_busy & o_result_vld;

         // resource: DC_Filter_Xor_1Ux1U_1U_1  instance: DC_Filter_Xor_1Ux1U_1U_1_1
         assign DC_Filter_Xor_1Ux1U_1U_1_1_out1 = o_result_m_req_m_trig_req ^ o_result_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_result_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_result_m_req_m_prev_trig_req <= o_result_m_req_m_trig_req;
            end
         end

         // resource: DC_Filter_Not_1U_1U_1  instance: DC_Filter_Not_1U_1U_1_3
         assign DC_Filter_Not_1U_1U_1_3_out1 = !o_result_m_req_m_trig_req;

         // instance: drive_i_rgb_inside_busy
         assign i_rgb_inside_busy = DC_Filter_gen_busy_r_4_162_out1[2];

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_162
         assign DC_Filter_gen_busy_r_4_162_out1 = {DC_Filter_gen_busy_r_4_162_gnew_req_i0, {DC_Filter_gen_busy_r_4_162_gdiv_i1, DC_Filter_gen_busy_r_4_162_gen_busy_0_i_rgb_m_data_is_invalid_next}};

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_162
         assign DC_Filter_gen_busy_r_4_162_gen_busy_0_i_rgb_m_data_is_invalid_next = ~DC_Filter_gen_busy_r_4_162_gdiv_i1;

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_162
         assign DC_Filter_gen_busy_r_4_162_gdiv_i1 = i_rgb_inside_vld & !DC_Filter_gen_busy_r_4_162_gnew_req_i0;

         // resource: DC_Filter_gen_busy_r_4  instance: DC_Filter_gen_busy_r_4_162
         assign DC_Filter_gen_busy_r_4_162_gnew_req_i0 = i_rgb_inside_m_busy_req_0 & (i_rgb_inside_m_unvalidated_req | i_rgb_inside_vld);

         // resource: regr_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_inside_m_unvalidated_req
            if (i_rst == 1'b0) begin
               i_rgb_inside_m_unvalidated_req <= 1'd1;
            end
            else begin
               i_rgb_inside_m_unvalidated_req <= DC_Filter_N_Muxb_1_2_4_4_85_out1;
            end
         end

         // resource: DC_Filter_N_Muxb_1_2_4_4
         always @(i_rgb_inside_vld or i_rgb_inside_m_busy_req_0 or i_rgb_inside_m_unvalidated_req)
          begin :DC_Filter_N_Muxb_1_2_4_4_85
            if (i_rgb_inside_m_busy_req_0) begin
               DC_Filter_N_Muxb_1_2_4_4_85_out1 = i_rgb_inside_m_unvalidated_req;
            end
            else begin
               DC_Filter_N_Muxb_1_2_4_4_85_out1 = i_rgb_inside_vld;
            end
         end

         // instance: drive_o_rgb_inside_vld
         assign o_rgb_inside_vld = DC_Filter_Or_1Ux1U_1U_4_5_out1;

         // resource: DC_Filter_Or_1Ux1U_1U_4  instance: DC_Filter_Or_1Ux1U_1U_4_5
         assign DC_Filter_Or_1Ux1U_1U_4_5_out1 = o_rgb_inside_m_unacked_req | DC_Filter_Xor_1Ux1U_1U_1_4_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_rgb_inside_m_unacked_req
            if (i_rst == 1'b0) begin
               o_rgb_inside_m_unacked_req <= 1'd0;
            end
            else begin
               o_rgb_inside_m_unacked_req <= DC_Filter_And_1Ux1U_1U_4_82_out1;
            end
         end

         // resource: DC_Filter_And_1Ux1U_1U_4  instance: DC_Filter_And_1Ux1U_1U_4_82
         assign DC_Filter_And_1Ux1U_1U_4_82_out1 = o_rgb_inside_busy & o_rgb_inside_vld;

         // resource: DC_Filter_Xor_1Ux1U_1U_1  instance: DC_Filter_Xor_1Ux1U_1U_1_4
         assign DC_Filter_Xor_1Ux1U_1U_1_4_out1 = o_rgb_inside_m_req_m_trig_req ^ o_rgb_inside_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_rgb_inside_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_rgb_inside_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_rgb_inside_m_req_m_prev_trig_req <= o_rgb_inside_m_req_m_trig_req;
            end
         end

         // resource: DC_Filter_Not_1U_1U_1  instance: DC_Filter_Not_1U_1U_1_6
         assign DC_Filter_Not_1U_1U_1_6_out1 = !o_rgb_inside_m_req_m_trig_req;


endmodule

